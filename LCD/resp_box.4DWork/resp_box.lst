file D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Gen4-uLCD-32PT.fnc

000001  000001  #platform "Gen4-uLCD-32PT"
000002  000001  #platform "Gen4-uLCD-32PT"
000003  000008  */
000004  000009      #constant Gen4_ULCD_32PT
000005  000009      #constant Gen4_ULCD_32PT
000006  000010        
000007  000011      #IFNOT EXISTS PICASO_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\PicasoFunctions.fnc

000008  000012          #inherit "PicasoFunctions.fnc"          // inherit the generic functions
000009  000012          #inherit "PicasoFunctions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for PicasoGFX2 platforms
000012  000003        
000013  000004  #constant PICASO_FUNCTIONS
000014  000004  #constant PICASO_FUNCTIONS
000015  000005        
000016  000006        
000017  000007  #CONST
000018  000017  #END
000019  000018        
000020  000019  #CONST
000021  000025  #END
000022  000026        
000023  000027        
000024  000028  #CONST
000025  000040  #END
000026  000041        
000027  000042        
000028  000043  #CONST
000029  000208  #END
000030  000209        
000031  000210        
000032  000211  // baud divisor rates for setbaud(n);
000033  000212  #CONST
000034  000234  #END
000035  000235        
000036  000236        
000037  000237        
000038  000238        
000039  000243  */
000040  000244        
000041  000245        
000042  000246  //==============================================//
000043  000247  // EVE bios functions                           //
000044  000248  //==============================================//
000045  000249                                                  //
000046  000250  func serin(), 1;                // read a byte from COM0
000047  000251  // Syntax: serin();
000048  000252  // Usage : char := serin();
000049  000253  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
000050  000254  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
000051  000255  //     : The default Baud Rate is 115,200 bits per second or 115,200 baud. The baud rate can be
000052  000256  //     : changed under program control by using the setbaud(...) or the com_SetBaud(...) function.
000053  000257  //     : Returns: -1 if no character is available
000054  000258  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
000055  000259  //     : Returns: positive value 0 to 255 for a valid character received
000056  000260        
000057  000261  func putch("char"), 0;                // write single char to current output device
000058  000262  // Syntax: putch("char");
000059  000263  // Usage : putch("A");
000060  000264  // Notes : Transmits a single byte from the Serial Port COM0. The transmission format is:
000061  000265  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
000062  000266  //     : The default Baud Rate is 115,200 bits per second or 115,200 baud. The baud rate can be
000063  000267  //     : changed under program control by using the setbaud(...) or the com_SetBaud(...) function.
000064  000268  //     : The arguments can be a variable, array element, expression or constant
000065  000269        
000066  000270  func serout("char"), 0;                // write a byte to COM0
000067  000271  // Syntax: serout1("char");
000068  000272  // Usage : serout1(ch);
000069  000273  // Notes : send character to COM1
000070  000274        
000071  000275  func setbaud("baudnum"), 0;            // set baud rate of COM0
000072  000276  // Syntax: setbaud(baud_number);
000073  000277  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
000074  000278  // *Notes : argument specifies the baud rate using pre-defined constant.
000075  000279  //       : The pre-defined constant is a value of 0-19 , and internally
000076  000280  //       : this is used as a table pointer to get the baud rate divisor
000077  000281  //       : value for one of the 20 selected baud rates, control is then
000078  000282  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
000079  000283  //       : The pre-defined constants equate to a value of 0-19.
000080  000284  //       : If a value other than 0-19 is used, a run time error (eror 25)
000081  000285  //       : will occur.
000082  000286        
000083  000287  func to("device"), 1;                // output device redirection
000084  000288  // Syntax: to(outstream);
000085  000289  // Usage : to(APPEND); putstr("TWO ");
000086  000290  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000087  000291  //     :
000088  000292  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000089  000293  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000090  000294  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000091  000295  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000092  000296  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000093  000297  //     : completed its action. The APPEND argument is used to send the printed output to the same
000094  000298  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000095  000299  //     : sequential data to a media stream.
000096  000300  //     :
000097  000301  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000098  000302  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000099  000303  //     :                            appended to user memory if previous redirection was to an array.
000100  000304  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000101  000305  //     : TEXT           0xFF08      Output is directed to the screen (default).
000102  000306  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000103  000307  //     : I2C            0xF820      Output is directed to the I2C port.
000104  000308  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000105  000309        
000106  000310        
000107  000311  func pause("milliseconds"), 0;            // blocking delay
000108  000312  // Syntax: pause(milliseconds);
000109  000313  // Usage : pause(1000);                //pause for 1 second
000110  000314  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000111  000315        
000112  000316  func putnum("arg1","arg2"), 1;            // print number to current output device
000113  000317  // Syntax: putnum(format, value);
000114  000318  // Usage : var := putnum(HEX, val);
000115  000319  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000116  000320  //     : Format: A constant that specifies the number format
000117  000321  //     : Value : The number to be printed
000118  000322  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000119  000323  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000120  000324  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000121  000325  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000122  000326  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000123  000327  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000124  000328  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000125  000329  //     :                                     BIN6     BIN6Z     BIN6ZB
000126  000330  //     :                                     BIN7     BIN7Z     BIN7ZB
000127  000331  //     :                                     BIN8     BIN8Z     BIN8ZB
000128  000332  //     :                                     BIN9     BIN9Z     BIN9ZB
000129  000333  //     :                                     BIN10     BIN10Z     BIN10ZB
000130  000334  //     :                                     BIN11     BIN11Z     BIN11ZB
000131  000335  //     :                                     BIN12     BIN12Z     BIN12ZB
000132  000336  //     :                                     BIN13     BIN13Z     BIN13ZB
000133  000337  //     :                                     BIN14     BIN14Z     BIN14ZB
000134  000338  //     :                                     BIN15     BIN15Z     BIN15ZB
000135  000339  //     :                                     BIN16     BIN16Z     BIN16ZB
000136  000340  //     :
000137  000341  //     : bit 15 Leading spaces (1=space before signed number, 0=No space)
000138  000342  //     : bit 14 sign bit (0=signed, 1=unsigned)
000139  000343  //     : bit 13 Blanking (1=Leading zero blanking, 0=Show Zeros)
000140  000344  //     : bit 12 Leading zeros (1=Zeros included, 0=Zeros suppressed)
000141  000345  //     : bits 11-8 Displayed digit quantity
000142  000346  //     : bits 7-5 Reserved
000143  000347  //     : bits 4-0 Number base (usually 2,10 or 16)
000144  000348        
000145  000349        
000146  000350  func translate("arg1","arg2","arg3","arg4"), 1; // list translator (internal use only, not usable)
000147  000351        
000148  000352  func putstr("string"), 1;                       // print string to current output device
000149  000353  // Syntax: putstr(pointer);
000150  000354  // Usage : putstr("HELLO\n");
000151  000355  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000152  000356  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000153  000357  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000154  000358  //       : The output of putstr can be redirected to the communications port, the media, or memory
000155  000359  //       : using the to(...); function.
000156  000360  //       : A string constant is automatically terminated with a zero.
000157  000361  //       : A string in a data statement is not automatically terminated with a zero.
000158  000362  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000159  000363  //       : element packs 1 or 2 characters.
000160  000364        
000161  000365        
000162  000366  func strlen("varAddress"), 1;                   // return length of a var packed string in character units
000163  000367  // Syntax: strlen("varAddress);
000164  000368  // Usage : strlen("HELLO\n");
000165  000369  // Notes : gives the length of a string that is packed into regular var array
000166  000370  //       : Use str_Length(ptr)  for string pointer mode
000167  000371        
000168  000372        
000169  000373  //==============================================//
000170  000374  // Memory Access Function Prototypes            //
000171  000375  //==============================================//
000172  000376                                                  //
000173  000377  func peekW("address"), 1;                       // read a word from system memory
000174  000378  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000175  000379  // refer to address map of internal variables   //
000176  000380  //==============================================//
000177  000381  // Math Functions                               //
000178  000382  //==============================================//
000179  000383                                                  //
000180  000384  func ABS("value"), 1;                           // return a positive number
000181  000385  // Syntax: ABS(value);
000182  000386  // Usage : var := ABS(arg);
000183  000387  // Notes : Returns the absolute value of an argument
000184  000388        
000185  000389  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000186  000390  // Syntax: MIN(value1, value2);
000187  000391  // Usage : var := MIN(arg1, arg2);
000188  000392  // Notes : Returns the minimum of 2 arguments
000189  000393        
000190  000394  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000191  000395  // Syntax: MAX(value1, value2);
000192  000396  // Usage : var := MAX(arg1, arg2);
000193  000397  // Notes : Returns the maximum of 2 arguments
000194  000398        
000195  000399  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000196  000400  // Syntax: SWAP(&var1, &var2);
000197  000401  // Usage : SWAP(&var1, &var2);
000198  000402  // Notes : Swaps the contents of 2 variables or memory locations
000199  000403        
000200  000404  func SIN("angle"), 1;                           // return SIN of angle
000201  000405  // Syntax: SIN(angle);
000202  000406  // Usage : var := SIN(arg);
000203  000407  // Notes : Returns the sine in radians of an argument in degrees
000204  000408  //       : the returned value range is from 127 to -127. The real
000205  000409  //       : cosine values vary from 1.0 to -1.0 so appropriate
000206  000410  //       : scaling must be done in user code.
000207  000411        
000208  000412  func COS("angle"), 1;                           // return COS of angle
000209  000413  // Syntax: COS(angle);
000210  000414  // Usage : var := COS(arg);
000211  000415  // Notes : Returns the cosine in radians of an argument in degrees
000212  000416  //       : the returned value range is from 127 to -127. The real
000213  000417  //       : cosine values vary from 1.0 to -1.0 so appropriate
000214  000418  //       : scaling must be done in user code.
000215  000419        
000216  000420  func RAND(), 1;                                 // return a pseudo random number
000217  000421  // Syntax: RAND();
000218  000422  // Usage : var := RAND();
000219  000423  // Notes : Returns a random number between 0 and 0xFFFF.
000220  000424  //       : The random number generator must first be seeded
000221  000425  //       : by using the SEED(number) function.
000222  000426        
000223  000427  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000224  000428  // Syntax: SEED(number);
000225  000429  // Usage : SEED(arg);
000226  000430  // Notes : Seeds the random number generator.
000227  000431        
000228  000432  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000229  000433  // Syntax: OVF();
000230  000434  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000231  000435  //       : hiWord := OVF();
000232  000436  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000233  000437        
000234  000438  func SQRT("number"), 1;                         // return square root of a number
000235  000439  // Syntax: SQRT(number);
000236  000440  // Usage : SQRT(arg);
000237  000441  // Notes : Returns the integer square root of a number.
000238  000442  //------------------------------------------------------------------//
000239  000443  //          Text Related Function Prototypes
000240  000444  //------------------------------------------------------------------//
000241  000445        
000242  000446  func txt_MoveCursor("line", "column"), 0;
000243  000447  // Syntax: txt_SetCursor(line, column);
000244  000448  // Usage : txt_SetCursor(arg1, arg2);
000245  000449  // Notes : Moves the text Cursor to a new screen position set by
000246  000450  //       : line,column parameters.
000247  000451        
000248  000452  func txt_Set("mode", "value"), 0;
000249  000453  // Syntax: txt_Set(mode, value);
000250  000454  // Usage : txt_Set(arg1, arg2);
000251  000455  // Returns : Original value before the change
000252  000456  // Notes : Sets various text related parameters used by other functions
000253  000457  //       : This allows the features to be set programatically with a
000254  000458  //       : single function call.It is strongly recommended to use the
000255  000459  //       : pre-defined constants rather than the mode numbers.
000256  000460  //       : NB:- Although it is often required to be able to set text
000257  000461  //       : functions with a single function call for graphics engine
000258  000462  //       : related functions, there is a complete set of single parameter
000259  000463  //       : shortcut functions that have exactly the same function as
000260  000464  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000261  000465  //       :
000262  000466  //       : mode = TEXT_COLOUR (mode 0)
000263  000467  //       : txt_Set(TEXT_COLOUR, value);
000264  000468  //       : value = 0 to 0xFFFF, Black to White
000265  000469  //       : Sets the Text colour for the display
000266  000470  //       : Default = LIME.
000267  000471  //       :
000268  000472  //       : mode = TEXT_HIGHLIGHT (mode 1)
000269  000473  //       : txt_Set(TEXT_HIGHLIGHT, value);
000270  000474  //       : value = 0 to 0xFFFF, Black to White
000271  000475  //       : Sets the Text background colour for the display. Effective
000272  000476  //       : when text mode is Opaque.
000273  000477  //       : Default = BLACK.
000274  000478  //       :
000275  000479  //       : mode = FONT_ID (mode 2)
000276  000480  //       : txt_Set(FONT_ID, value);
000277  000481  //       : value = FONT1, FONT2 or FONT3 for internal fonts
000278  000482  //       : else this value is the name of a font included
000279  000483  //       : in a users program in a data statement.
000280  000484  //       : Default = FONT SIZE 3.
000281  000485  //       :
000282  000486  //       : mode = TEXT_WIDTH  (mode 3)
000283  000487  //       : txt_Set(TEXT_WIDTH, value);
000284  000488  //       : value = 1 to 16
000285  000489  //       : Sets the Text Width multiplier
000286  000490  //       : text will be printed magnified horizontally
000287  000491  //       : by this factor, Default = 1.
000288  000492  //       :
000289  000493  //       : mode = TEXT_HEIGHT  (mode 4)
000290  000494  //       : txt_Set(TEXT_HEIGHT, value);
000291  000495  //       : value = 1 to 16
000292  000496  //       : Sets the Text Height multiplier
000293  000497  //       : text will be printed magnified vertically
000294  000498  //       : by this factor, Default = 1.
000295  000499  //       :
000296  000500  //       : mode = TEXT_XGAP  (mode 5)
000297  000501  //       : txt_Set(TEXT_XGAP, value);
000298  000502  //       : value = 1 to 32
000299  000503  //       : Sets the horizontal gap between characters
000300  000504  //       : The gap is in pixel units, Default = 0
000301  000505  //       :
000302  000506  //       : mode = TEXT_YGAP  (mode 6)
000303  000507  //       : txt_Set(TEXT_YGAP, value);
000304  000508  //       : value = 1 to 32
000305  000509  //       : Sets the vertical gap below characters
000306  000510  //       : The gap is in pixel units, Default = 0
000307  000511  //       :
000308  000512  //       : mode = TEXT_PRINTDELAY  (mode 7) DEPRECATED
000309  000513  //       : txt_Set(TEXT_PRINTDELAY, value);
000310  000514  //       : value = 0 to 255
000311  000515  //       : Sets the delay time (in ms) during character
000312  000516  //       : printing to give a 'teletype' like effect.
000313  000517  //       : Often used to attract attention to a string
000314  000518  //       : being printed which can often be missed if
000315  000519  //       : just suddenly appearing or changing.
000316  000520  //       : Default = 0 ms.
000317  000521  //       :
000318  000522  //       : mode = TEXT_OPACITY (mode 8)
000319  000523  //       : txt_Set(TEXT_OPACITY, value);
000320  000524  //       : value = TRANSPARENT (0) = Text Trasparent
000321  000525  //       : value = OPAQUE (1) = Text Opaque
000322  000526  //       : Sets the Opacity/Transparency of the text
000323  000527  //       : Default = 0 or TRANSPARENT
000324  000528  //       :
000325  000529  //       : mode = TEXT_BOLD (mode 9)
000326  000530  //       : txt_Set(TEXT_BOLD, value);
000327  000531  //       : value = dont care
000328  000532  //       : Sets Bold Text mode for the next string or char
000329  000533  //       : The feature automatically resets after printing
000330  000534  //       : using putstr or print has completed
000331  000535  //       :
000332  000536  //       : mode = TEXT_ITALIC (mode 10)
000333  000537  //       : txt_Set(TEXT_ITALIC, value);
000334  000538  //       : value = dont care
000335  000539  //       : Sets Italic Text mode for the next string or char
000336  000540  //       : The feature automatically resets after printing
000337  000541  //       : using putstr or print has completed
000338  000542        
000339  000543  //       : mode = TEXT_INVERSE (mode 11)
000340  000544  //       : txt_Set(TEXT_INVERSE, value);
000341  000545  //       : value = dont care
000342  000546  //       : Sets Inverse Text mode for the next string or char
000343  000547  //       : The feature automatically resets after printing
000344  000548  //       : using putstr or print has completed
000345  000549  //       :
000346  000550  //       : mode = TEXT_UNDERLINED (mode 12)
000347  000551  //       : txt_Set(TEXT_UNDERLINED, value);
000348  000552  //       : value = dont care
000349  000553  //       : Sets Underlined Text mode for the next string or char
000350  000554  //       : The feature automatically resets after printing
000351  000555  //       : using putstr or print has completed
000352  000556  //       :
000353  000557  //       : mode = TEXT_ATTRIBUTES (mode 13)
000354  000558  //       : txt_Set(TEXT_ATTRIBUTES, value);
000355  000559  //       : value = bits are defined as:
000356  000560  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000357  000561  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000358  000562  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000359  000563  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000360  000564  //       : Allows a combination of text attributes to be defined together
000361  000565  //       : by 'or'ing the bits together.
000362  000566  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000363  000567  //       : The feature automatically resets after printing
000364  000568  //       : using putstr or print has completed.
000365  000569  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000366  000570  //       :
000367  000571  //       : mode = TEXT_WRAP (mode 14)
000368  000572  //       : txt_Set(TEXT_WRAP , value);
000369  000573  //       : Sets the position where text wrap will occur
000370  000574  //       : The feature automatically resets when screen
000371  000575  //       : mode is changed. If the value is set to 0,
000372  000576  //       : text wrap is turned off.
000373  000577  //       : of the current screen. Default value is 0
000374  000578  // Notes : The value is in pixel units.
000375  000579  //       :
000376  000580        
000377  000581  //       : txt_Set mode 15 reserved for future use
000378  000582  //       :
000379  000583        
000380  000584        
000381  000585        
000382  000586  //=====================================================//
000383  000587  // Single parameter short-cuts                         //
000384  000588  // for the txt_Set functions                           //
000385  000589  // These functions return the existing value before    //
000386  000590  // the change is made.                                 //
000387  000591  //=====================================================//
000388  000592  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000389  000593  func txt_BGcolour("colour"), 1;             // 1  text background colour
000390  000594  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000391  000595  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000392  000596  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000393  000597  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000394  000598  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000395  000599  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000396  000600  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000397  000601  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000398  000602  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000399  000603  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000400  000604  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000401  000605  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000402  000606  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000403  000607  func _1F(), 0;                              // 15 text (reserved DO NOT REMOVE)
000404  000608        
000405  000609        
000406  000610  //------------------------------------------------------------------//
000407  000611  //                 Hardware Function Prototypes
000408  000612  //------------------------------------------------------------------//
000409  000613        
000410  000614  // I/O Pin reference:-
000411  000615  //
000412  000616  //    IO1_PIN           is pin 2 of J1
000413  000617  //    IO2_PIN           is pin 1 of J1
000414  000618  //    IO3_PIN           is pin 3 of J1
000415  000619  //    IO4_PIN           is pin 5 of J1 (also used for BUS_RD)
000416  000620  //    IO5_PIN           is pin 9 of J2 (also used for BUS_WR)
000417  000621  //    BUS_RD_PIN        is pin 5 of J1 (alias IO4_PIN)
000418  000622  //    BUS_WR_PIN        is pin 9 of J2 (alias IO5_PIN)
000419  000623  //    BUS_0             is pin 27 of J1
000420  000624  //    BUS_1             is pin 25 of J1
000421  000625  //    BUS_2             is pin 23 of J1
000422  000626  //    BUS_3             is pin 21 of J1
000423  000627  //    BUS_4             is pin 19 of J1
000424  000628  //    BUS_5             is pin 17 of J1
000425  000629  //    BUS_6             is pin 13 of J2
000426  000630  //    BUS_7             is pin 11 of J2
000427  000631  //    BACKLITE          is backlite control pin
000428  000632  //    AUDIO_ENABLE      is amplifier chip control pin
000429  000633        
000430  000634  func pin_Set("mode", "pin"), 1;            // set pin to required mode
000431  000635  // Syntax: pin_Set(mode, pin);
000432  000636  // Usage : pin_Set(arg1, arg2);
000433  000637  // Notes : Sets the appropriate pins to Inputs or Outputs
000434  000638  //       : returns true if the pin number is legal (usually ignored)
000435  000639  //       :
000436  000640  //       : mode = 0 : Set Pin to Output
000437  000641  //       : pin_Set(0, pin);
000438  000642  //       : pin_Set(OUTPUT, pin);
000439  000643  //       : pin = 1  : set IO1_PIN to output (pin 2 J1)
000440  000644  //       : pin = 2  : set IO2_PIN to output (pin 1 J1)
000441  000645  //       : pin = 3  : set IO3_PIN to output (pin 3 J1)
000442  000646  //       : pin = 4  : set IO4_PIN to output (pin 5 J1, also used for BUS_RD)
000443  000647  //       : pin = 5  : set IO5_PIN to output (pin 9 J2, also used for BUS_WR)
000444  000648  //       : (pin 6,7 are BACKLITE and AMP control and are permanemtly outputs which can't be altered)
000445  000649  //       : pin = 8  : set BUS_0   to output (pin 27 of J1)
000446  000650  //       : pin = 9  : set BUS_1   to output (pin 25 of J1)
000447  000651  //       : pin = 10 : set BUS_2   to output (pin 23 of J1)
000448  000652  //       : pin = 11 : set BUS_3   to output (pin 21 of J1)
000449  000653  //       : pin = 12 : set BUS_4   to output (pin 19 of J1)
000450  000654  //       : pin = 13 : set BUS_5   to output (pin 17 of J1)
000451  000655  //       : pin = 14 : set BUS_6   to output (pin 13 of J2)
000452  000656  //       : pin = 15 : set BUS_7   to output (pin 11 of J2)
000453  000657  //       : Sets the desired pin to be used as an Output.
000454  000658  //       :
000455  000659  //       : mode = 1 : Set Pin to Input
000456  000660  //       : pin_Set(1, pin);
000457  000661  //       : pin_Set(INPUT, pin);
000458  000662  //       : pin = 1  : set IO1_PIN to input (pin 2 J1)
000459  000663  //       : pin = 2  : set IO2_PIN to input (pin 1 J1)
000460  000664  //       : pin = 3  : set IO3_PIN to input (pin 3 J1)
000461  000665  //       : pin = 4  : set IO4_PIN to input (pin 5 J1, also used for BUS_RD)
000462  000666  //       : pin = 5  : set IO5_PIN to input (pin 9 J2, also used for BUS_WR)
000463  000667  //       : (pin 6,7 are BACKLITE and AMP control and are permanemtly outputs which can't be altered)
000464  000668  //       : pin = 8  : set BUS_0   to input (pin 27 of J1)
000465  000669  //       : pin = 9  : set BUS_1   to input (pin 25 of J1)
000466  000670  //       : pin = 10 : set BUS_2   to input (pin 23 of J1)
000467  000671  //       : pin = 11 : set BUS_3   to input (pin 21 of J1)
000468  000672  //       : pin = 12 : set BUS_4   to input (pin 19 of J1)
000469  000673  //       : pin = 13 : set BUS_5   to input (pin 17 of J1)
000470  000674  //       : pin = 14 : set BUS_6   to input (pin 13 of J2)
000471  000675  //       : pin = 15 : set BUS_7   to input (pin 11 of J2)
000472  000676  //       : Sets the desired pin to be used as an Input.
000473  000677        
000474  000678  func pin_HI("pin"), 1;                    // set pin to logic '1'
000475  000679  // Syntax: pin_HI(pin);
000476  000680  // Usage : pin_HI(arg);
000477  000681  // Notes : Outputs a logic "High" (3.3V) on the appropriate
000478  000682  //       : pin that was previously selected as an Output.
000479  000683  //       : returns true if the pin number is legal (usually ignored)
000480  000684  //       :
000481  000685  //       : pin = 1  : set IO1_PIN to "High" level (pin 2 of J1)
000482  000686  //       : pin = 2  : set IO2_PIN to "High" level (pin 1 of J1)
000483  000687  //       : pin = 3  : set IO3_PIN to "High" level (pin 3 of J1)
000484  000688  //       : pin = 4  : set IO4_PIN to "High" level (pin 5 of J1, also used for BUS_RD)
000485  000689  //       : pin = 5  : set IO5_PIN to "High" level (pin 9 of J2, also used for BUS_WR)
000486  000690  //       : pin = 6  : set DCENB pin to "High" level (BACKLITE ON)
000487  000691  //       : pin = 7  : set AUDIO_ENABL pin to "High" level (AMP OFF)
000488  000692  //       : pin = 8  : set BUS_0   to "High" level (pin 27 of J1)
000489  000693  //       : pin = 9  : set BUS_1   to "High" level (pin 25 of J1)
000490  000694  //       : pin = 10 : set BUS_2   to "High" level (pin 23 of J1)
000491  000695  //       : pin = 11 : set BUS_3   to "High" level (pin 21 of J1)
000492  000696  //       : pin = 12 : set BUS_4   to "High" level (pin 19 of J1)
000493  000697  //       : pin = 13 : set BUS_5   to "High" level (pin 17 of J1)
000494  000698  //       : pin = 14 : set BUS_6   to "High" level (pin 13 of J2)
000495  000699  //       : pin = 15 : set BUS_7   to "High" level (pin 11 of J2)
000496  000700        
000497  000701  func pin_LO("pin"), 1;                    // set pin to logic '0'
000498  000702  // Syntax: pin_LO(pin);
000499  000703  // Usage : pin_LO(arg);
000500  000704  // Notes : Outputs a logic "Low" (0V) on the appropriate
000501  000705  //       : pin that was previously selected as an Output.
000502  000706  //       : returns true if the pin number is legal (usually ignored)
000503  000707  //       :
000504  000708  //       : pin = 1 : set IO1_PIN to "Low" level (pin 2 of J1)
000505  000709  //       : pin = 2 : set IO2_PIN to "Low" level (pin 1 of J1)
000506  000710  //       : pin = 3 : set IO3_PIN to "Low" level (pin 3 of J1)
000507  000711  //       : pin = 4 : set IO4_PIN to "Low" level (pin 5 of J1, also used for BUS_RD)
000508  000712  //       : pin = 5 : set IO5_PIN to "Low" level (pin 9 of J2, also used for BUS_WR)
000509  000713  //       : pin = 6 : set DCENB pin to "Low" level (BACKLITE)
000510  000714  //       : pin = 7 : set AUDIO_ENABL pin to "Low" level (AMP ON)
000511  000715  //       : pin = 8  : set BUS_0  to "Low" level (pin 27 of J1)
000512  000716  //       : pin = 9  : set BUS_1  to "Low" level (pin 25 of J1)
000513  000717  //       : pin = 10 : set BUS_2  to "Low" level (pin 23 of J1)
000514  000718  //       : pin = 11 : set BUS_3  to "Low" level (pin 21 of J1)
000515  000719  //       : pin = 12 : set BUS_4  to "Low" level (pin 19 of J1)
000516  000720  //       : pin = 13 : set BUS_5  to "Low" level (pin 17 of J1)
000517  000721  //       : pin = 14 : set BUS_6  to "Low" level (pin 13 of J2)
000518  000722  //       : pin = 15 : set BUS_7  to "Low" level (pin 11 of J2)
000519  000723        
000520  000724  func pin_Read("pin"), 1;                // read pin, logic or analogue
000521  000725  // Syntax: pin_Read(pin);
000522  000726  // Usage : arg1 := pin_Read(arg2);
000523  000727  // Notes : Reads the logic state of the appropriate
000524  000728  //       : pin that was previously selected as an Input.
000525  000729  //       :
000526  000730  //       : pin = 1  : Read the state of IO1_PIN (pin 2 of J1)
000527  000731  //       : pin = 2  : Read the state of IO2_PIN (pin 1 of J1)
000528  000732  //       : pin = 3  : Read the state of IO3_PIN (pin 3 of J1)
000529  000733  //       : pin = 4  : Read the state of IO4_PIN (pin 5 of J1, also used for BUS_RD)
000530  000734  //       : pin = 5  : Read the state of IO5_PIN (pin 9 of J2, also used for BUS_WR)
000531  000735  //       : pin = 6  : Read the state of DCENB pin to "Low" level (BACKLITE)
000532  000736  //       : pin = 7  : Read the state of AUDIO_ENABL pin to "Low" level (AMP ON)
000533  000737  //       : pin = 8  : Read the state of BUS_0   (pin 27 of J1)
000534  000738  //       : pin = 9  : Read the state of BUS_1   (pin 25 of J1)
000535  000739  //       : pin = 10 : Read the state of BUS_2   (pin 23 of J1)
000536  000740  //       : pin = 11 : Read the state of BUS_3   (pin 21 of J1)
000537  000741  //       : pin = 12 : Read the state of BUS_4   (pin 19 of J1)
000538  000742  //       : pin = 13 : Read the state of BUS_5   (pin 17 of J1)
000539  000743  //       : pin = 14 : Read the state of BUS_6   (pin 13 of J2)
000540  000744  //       : pin = 15 : Read the state of BUS_7   (pin 11 of J2)
000541  000745  //       : Returns a 0 (logic low) or 1 (logic high).
000542  000746        
000543  000747        
000544  000748  //------------------------------------------------------------------//
000545  000749  //                 P1 module BUS I/O control
000546  000750  //------------------------------------------------------------------//
000547  000751        
000548  000752  func bus_In(), 1;
000549  000753  // Syntax: bus_In();
000550  000754  // Usage : arg1 := bus_In();
000551  000755  // Notes : Read the 8bit wide bus into the lower 8 bits of arg1.
000552  000756  //       : The upper 8 bits of arg1 are set to 0.
000553  000757  //       : the BUS_RD and BUS_WR pins are not affected.
000554  000758  //       :
000555  000759  //       : BUS_0 is pin 27 of J1
000556  000760  //       : BUS_1 is pin 25 of J1
000557  000761  //       : BUS_2 is pin 23 of J1
000558  000762  //       : BUS_3 is pin 21 of J1
000559  000763  //       : BUS_4 is pin 19 of J1
000560  000764  //       : BUS_5 is pin 17 of J1
000561  000765  //       : BUS_6 is pin 13 of J2
000562  000766  //       : BUS_7 is pin 11 of J2
000563  000767        
000564  000768  func bus_Out("var"), 0;
000565  000769  // Syntax: bus_Out(var);
000566  000770  // Usage : bus_Out(arg1);
000567  000771  // Notes : The lower 8 bits of arg1 are placed on the 8bit wide bus.
000568  000772  //       : The upper 8 bits of arg1 are ignored.
000569  000773  //       : the BUS_RD and BUS_WR pins are not affected.
000570  000774  //       : NB:- any BUS pins that are set to inputs are not affected.
000571  000775  //       :
000572  000776  //       : BUS_0 is pin 27 of J1
000573  000777  //       : BUS_1 is pin 25 of J1
000574  000778  //       : BUS_2 is pin 23 of J1
000575  000779  //       : BUS_3 is pin 21 of J1
000576  000780  //       : BUS_4 is pin 19 of J1
000577  000781  //       : BUS_5 is pin 17 of J1
000578  000782  //       : BUS_6 is pin 13 of J2
000579  000783  //       : BUS_7 is pin 11 of J2
000580  000784        
000581  000785  func bus_Set("var"), 0;
000582  000786  // Syntax: bus_Set(var);
000583  000787  // Usage : bus_Set(arg1);
000584  000788  // Notes : The lower 8 bits of arg1 are placed in the BUS direction register.
000585  000789  //       : a '1' sets a pin to be an input, a '0' sets a pin to be output.
000586  000790  //       : The upper 8 bits of arg1 are ignored.
000587  000791  //       : the BUS_RD and BUS_WR pins are not affected.
000588  000792  //       :
000589  000793  //       : BUS_0 is pin 27 of J1
000590  000794  //       : BUS_1 is pin 25 of J1
000591  000795  //       : BUS_2 is pin 23 of J1
000592  000796  //       : BUS_3 is pin 21 of J1
000593  000797  //       : BUS_4 is pin 19 of J1
000594  000798  //       : BUS_5 is pin 17 of J1
000595  000799  //       : BUS_6 is pin 13 of J2
000596  000800  //       : BUS_7 is pin 11 of J2
000597  000801        
000598  000802  func bus_Write("var"), 0;
000599  000803  // Syntax: bus_Write(var);
000600  000804  // Usage : bus_Write(arg1);
000601  000805  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
000602  000806  //       : a settling delay of approx 50nsec, the BUS_WR pin is strobed
000603  000807  //       : LO for approx 50nsec then set back HI.
000604  000808  //       : The upper 8 bits of arg1 are ignored.
000605  000809  //       : NB:- the BUS_WR pin is automatically pre-set to an output to
000606  000810  //       : ensure BUS write integrity.
000607  000811  //       :
000608  000812  //       : BUS_0 is pin 27 of J1
000609  000813  //       : BUS_1 is pin 25 of J1
000610  000814  //       : BUS_2 is pin 23 of J1
000611  000815  //       : BUS_3 is pin 21 of J1
000612  000816  //       : BUS_4 is pin 19 of J1
000613  000817  //       : BUS_5 is pin 17 of J1
000614  000818  //       : BUS_6 is pin 13 of J2
000615  000819  //       : BUS_7 is pin 11 of J2
000616  000820        
000617  000821  func bus_Read(), 1;
000618  000822  // Syntax: bus_Read();
000619  000823  // Usage : arg1 := bus_Read();
000620  000824  // Notes : The BUS_RD pin set to LO, then, after a settling delay
000621  000825  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
000622  000826  //       : (the upper 8 bits being set to 0)
000623  000827  //       : the BUS_RD pin is then set back to a HI level.
000624  000828  //       : NB:- the BUS_RD pin is automatically pre-set to an output to
000625  000829  //       : ensure BUS write integrity.
000626  000830  //       :
000627  000831  //       : BUS_0 is pin 27 of J1
000628  000832  //       : BUS_1 is pin 25 of J1
000629  000833  //       : BUS_2 is pin 23 of J1
000630  000834  //       : BUS_3 is pin 21 of J1
000631  000835  //       : BUS_4 is pin 19 of J1
000632  000836  //       : BUS_5 is pin 17 of J1
000633  000837  //       : BUS_6 is pin 13 of J2
000634  000838  //       : BUS_7 is pin 11 of J2
000635  000839        
000636  000840        
000637  000841  //------------------------------------------------------------------//
000638  000842  //   Graphics Functions
000639  000843  //------------------------------------------------------------------//
000640  000844  func gfx_Set("mode", "value"), 0;            // set various graphics functions
000641  000845  // Syntax: gfx_Set(mode, value);
000642  000846  // Usage : gfx_Set(arg1, arg2);
000643  000847  // Notes : Sets various graphics parameters used by other functions
000644  000848  //       : This allows the features to be set programatically with a
000645  000849  //       : single function call.It is strongly recommended to use the
000646  000850  //       : pre-defined constants rather than the mode numbers.
000647  000851  //       : NB:- Although it is often required to be able to set graphics
000648  000852  //       : functions with a single function call for graphics engine
000649  000853  //       : related functions, there is a complete set of single parameter
000650  000854  //       : shortcut functions that have exactly the same function as
000651  000855  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
000652  000856  //       :
000653  000857  //       : mode = PEN_SIZE (mode 16)
000654  000858  //       : gfx_Set(PEN_SIZE, value);
000655  000859  //       : value = SOLID (value 0) rectangle and circle objects are solid
000656  000860  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
000657  000861  //       : Sets the mode of the Pen used by most graphics objects
000658  000862  //       :
000659  000863  //       : mode = BACKGROUND_COLOUR (mode 17)
000660  000864  //       : gfx_Set(BACKGROUND_COLOUR, value);
000661  000865  //       : value = 0 to 0xFFFF, Black to White
000662  000866  //       : Sets the Background colour of the screen
000663  000867  //       :
000664  000868  //       : mode = OBJECT_COLOUR (mode 18)
000665  000869  //       : gfx_Set(OBJECT_COLOUR, value);
000666  000870  //       : value = 0 to 0xFFFF, Black to White
000667  000871  //       : Sets the Object colour used in various functions
000668  000872  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
000669  000873  //       :
000670  000874  //       : mode = CLIPPING (mode 19)
000671  000875  //       : gfx_Set(CLIPPING, value);
000672  000876  //       : value = OFF (value 0) Clipping disabled
000673  000877  //       : value = ON (value 1) Clipping enabled
000674  000878  //       : Enables/Disables the Clipping feature
000675  000879  //       :
000676  000880  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
000677  000881  //       : gfx_Set(TRANSPARENT_COLOUR, value);
000678  000882  //       : value = 0 to 0xFFFF Black to White
000679  000883  //       : Sets Bitmap, Image or Animation Transparency Colour.
000680  000884  //       : NB not implemented
000681  000885  //       :
000682  000886  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
000683  000887  //       : gfx_Set(5, value);
000684  000888  //       : value = OFF (value 0) Transparency disabled
000685  000889  //       : value = ON (value 1) Transparency enabled
000686  000890  //       : Enables/Disables the Transparency feature
000687  000891  //       : NB not implemented
000688  000892  //       :
000689  000893  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
000690  000894  //       : gfx_Set(FRAME_DELAY, value);
000691  000895  //       : value = 0 to 65535 ms
000692  000896  //       : Sets the Video/Animation clip inter-frame delay. This setting will
000693  000897  //       : over-ride the embedded frame delay of the clip. After the event,
000694  000898  //       : the setting will auto disable and if further inter-frame delays need
000695  000899  //       : overriding the setting must be re-issued.
000696  000900  //       :
000697  000901  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
000698  000902  //       : gfx_Set(SCREEN_MODE, value);
000699  000903  //       : value = LANDSCAPE   (value 0)
000700  000904  //       : value = LANDSCAPE_R (value 1)
000701  000905  //       : value = PORTRAIT    (value 2)
000702  000906  //       : value = PORTRAIT_R  (value 3)
000703  000907  //       :
000704  000908  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
000705  000909  //       : gfx_Set(OUTLINE_COLOUR, value);
000706  000910  //       : value = 1 to 0xFFFF, if 0, featre is OFF
000707  000911  //       : Sets the filled Rectangle or Circle objects outline colour
000708  000912  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
000709  000913  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
000710  000914  //       :
000711  000915  //       : Only supports variable contrast for uOLED Modules
000712  000916  //       : mode = CONTRAST (mode 25) : Contrast
000713  000917  //       : gfx_Set(CONTRAST, value);
000714  000918  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
000715  000919  //       : when contrast=0, display is placed in low power mode.
000716  000920  //       : This function should be called with contrast=0 when
000717  000921  //       : powering down the module.
000718  000922  //       :
000719  000923  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
000720  000924  //       : gfx_Set(LINE_PATTERN, value);
000721  000925  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
000722  000926  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
000723  000927  //       : a value of 0 turns the feature off
000724  000928  //       :
000725  000929  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
000726  000930  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
000727  000931  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
000728  000932  //       : NB not implemented, default is COLOUR16
000729  000933  //       :
000730  000934  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
000731  000935  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
000732  000936  //       : sets the button and slider objects bevel width
000733  000937  //       :
000734  000938  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
000735  000939  //       : gfx_Set(BEVEL_SHADOW , 5);
000736  000940  //       : sets the button and slider objects darken and lighten depth for the bevel colour
000737  000941  //       :
000738  000942  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
000739  000943  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
000740  000944  //       : sets the origin of drawn objects to a position other than 0,0
000741  000945  //       :
000742  000946  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
000743  000947  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
000744  000948  //       : sets the origin of drawn objects to a position other than 0,0
000745  000949        
000746  000950        
000747  000951  func gfx_Cls(), 0;                    // clear the screen
000748  000952  // Syntax: gfx_Cls();
000749  000953  // Usage : gfx_Cls();
000750  000954  // Notes : Clears the screen with current background colour
000751  000955        
000752  000956  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
000753  000957  // Syntax: gfx_MoveTo(x, y);
000754  000958  // Usage : gfx_MoveTo(arg1, arg2);
000755  000959  // Notes : Moves the origin to a new x,y position
000756  000960        
000757  000961  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
000758  000962  // Syntax: gfx_MoveRel(x, y);
000759  000963  // Usage : gfx_MoveRel(arg1, arg2);
000760  000964  // Notes : Moves the origin to a new x,y position
000761  000965  //       : relative to the current origing
000762  000966        
000763  000967  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
000764  000968  // Syntax: gfx_LineTo(x1, y1);
000765  000969  // Usage : gfx_LineTo(arg1, arg2);
000766  000970  // Notes : Draws a Line from the origin x,y to x1,y1.
000767  000971  //       : The new origin is then set to x1, y1. Line colour needs
000768  000972  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
000769  000973        
000770  000974  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
000771  000975  // Syntax: gfx_LineRel(x1, y1);
000772  000976  // Usage : gfx_LineRel(arg1, arg2);
000773  000977  // Notes : Draws a Line from the origin x,y to x1,y1.
000774  000978  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
000775  000979  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
000776  000980        
000777  000981  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
000778  000982  // Syntax: gfx_Line(x1, x2, y2, colr);
000779  000983  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
000780  000984  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
000781  000985        
000782  000986  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
000783  000987  // Syntax: gfx_Line(x1, x2, y, colr);
000784  000988  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
000785  000989  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
000786  000990        
000787  000991  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
000788  000992  // Syntax: gfx_Line(y1, y2, x, colr);
000789  000993  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
000790  000994  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
000791  000995        
000792  000996  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
000793  000997  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
000794  000998  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
000795  000999  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
000796  001000  //       : bottom corner (x2,y2) on the screen.
000797  001001        
000798  001002  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
000799  001003  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
000800  001004  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
000801  001005  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
000802  001006  //       : bottom corner (x2,y2) on the screen.
000803  001007        
000804  001008  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
000805  001009  // Syntax: gfx_Circle(x, y, rad, colr);
000806  001010  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
000807  001011  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
000808  001012        
000809  001013  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
000810  001014  // Syntax: gfx_Circle(x, y, rad, colr);
000811  001015  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
000812  001016  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
000813  001017        
000814  001018  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
000815  001019  // Syntax: gfx_PutPixel(x, y, colr);
000816  001020  // Usage : gfx_PutPixel(arg1, arg2, arg3);
000817  001021  // Notes : Plots a coloured pixel on the screen at x,y location
000818  001022        
000819  001023  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
000820  001024  // Syntax: gfx_GetPixel(x, y);
000821  001025  // Usage : var := gfx_GetPixel(arg1, arg2);
000822  001026  // Notes : Reads and returns the colour value of a pixel at location x,y
000823  001027        
000824  001028  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
000825  001029  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
000826  001030  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
000827  001031  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
000828  001032  //       : Vertices must be specified in an anti-clockwise fashion
000829  001033        
000830  001034  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
000831  001035  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
000832  001036  // Usage : gfx_OrbitInit(&arg1, &arg2);
000833  001037  // Notes : Sets up the Orbit function parameters.
000834  001038  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
000835  001039  //       : variables that get updated after calling gfx_Orbit(,,) function.
000836  001040  //       : The coordiantaes are calculated relative to the origin
000837  001041  //       : obtained by using the gfx_MoveTo(x, y) function.
000838  001042        
000839  001043  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
000840  001044  // Syntax: gfx_Orbit(angle, distance);
000841  001045  // Usage : gfx_Orbit(arg1, arg2);
000842  001046  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
000843  001047  //       : only known parameters are the angle and the distance from the current origin.
000844  001048        
000845  001049  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
000846  001050  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
000847  001051  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
000848  001052  // Notes : This function is very similar to the Ploygon function
000849  001053  //       : with the exception of the 1st and the last vertices not joined.
000850  001054        
000851  001055  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
000852  001056  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
000853  001057  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
000854  001058  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
000855  001059  //       : Vertices must be minimum of 3 and can be specified in any fashion
000856  001060        
000857  001061  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
000858  001062  // Syntax: gfx_Dot();
000859  001063  // Usage : gfx_Dot();
000860  001064  // Notes : Places a coloured dot at the origin
000861  001065        
000862  001066        
000863  001067  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
000864  001068  // Syntax: gfx_Bullet();
000865  001069  // Usage : gfx_Bullet();
000866  001070  // Notes : Places a coloured circle at the origin
000867  001071  //       : filled or unfilled state is controlled by PenSize
000868  001072        
000869  001073  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
000870  001074  // Syntax: gfx_IncX();
000871  001075  // Usage : var := gfx_IncX();
000872  001076  // Notes : Increments the x coordinate of the origin
000873  001077        
000874  001078  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
000875  001079  // Syntax: gfx_IncY();
000876  001080  // Usage : var := gfx_IncY();
000877  001081  // Notes : Increments the y coordinate of the origin
000878  001082        
000879  001083  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
000880  001084  // Syntax: gfx_BoxTo(x1, y1);
000881  001085  // Usage : gfx_BoxTo(arg1, arg2);
000882  001086  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
000883  001087  //       : The new origin is then set to x1,y1. Rectangle colour needs
000884  001088  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
000885  001089  //       : and the PenSize setting determines if Box is solid or outline.
000886  001090        
000887  001091  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
000888  001092  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
000889  001093  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
000890  001094  // Notes : Specifies a clipping window region on the screen such that any objects
000891  001095  //       : and text placed onto the screen will be clipped and displayed only
000892  001096  //       : within that region. For the clipping window to take effect, "Clipping"
000893  001097  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
000894  001098        
000895  001099        
000896  001100  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
000897  001101  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
000898  001102  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
000899  001103  // *Notes:
000900  001104        
000901  001105  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
000902  001106  // Syntax: gfx_SetClipRegion();
000903  001107  // Usage : var := gfx_SetClipRegion();
000904  001108  // *Notes:
000905  001109        
000906  001110  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
000907  001111  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
000908  001112  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
000909  001113  // Notes : Plots a coloured Ellipse on the screen at centre x,y
000910  001114  //       : with xradius = xrad and yradius = yrad.
000911  001115  //       : if PenSize = 0 Ellipse is Solid
000912  001116  //       : if PenSize = 1 Ellipse is Outline
000913  001117        
000914  001118        
000915  001119  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
000916  001120  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
000917  001121  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
000918  001122  // Notes : Plots a coloured Ellipse on the screen at centre x,y
000919  001123  //       : with xradius = xrad and yradius = yrad.
000920  001124        
000921  001125  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 0;
000922  001126  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
000923  001127  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
000924  001128  // Notes : Draws a 3 dimensional Text Button at screen location defined by
000925  001129  //       : x,y arguments (top left corner). The size of the button depends on
000926  001130  //       : the font, width, height and length of the text.
000927  001131  //       : The button appearance will depend on the state parameter setting:
000928  001132  //       :         state = 0 : Button Pressed
000929  001133  //       :         state = 1 : Button Raised
000930  001134        
000931  001135  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
000932  001136  // Syntax: gfx_Panel("style", "x", "y", "width", "height", "colour"), 0;
000933  001137  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
000934  001138  // Notes : Draws a panel (groupbox) at screen location defined by
000935  001139  //       : x, y, width and height with colour "colour".
000936  001140  //       :         state = 0 : recessed
000937  001141  //       :         state = 1 : raised
000938  001142        
000939  001143  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
000940  001144  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
000941  001145  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
000942  001146  // Notes : Draws a 3 dimensional Slider Bar on the screen.
000943  001147  //       : Slider parameters are as follows:
000944  001148  //       :         mode = 0 : Slider recessed
000945  001149  //       :         mode = 1 : Slider raised
000946  001150  //       :         x1, y1 = top left corner
000947  001151  //       :         x2, y2 = bottom right corner
000948  001152  //       :         scale = n : sets the full scale range from 0 to n
000949  001153  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
000950  001154  //       : returns:-
000951  001155        
000952  001156        
000953  001157  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
000954  001158  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
000955  001159  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
000956  001160  // Notes : Copies an area of a screen from xs,ys of size given by width and height
000957  001161  //       : and pastes it to another location determined by xd, yd.
000958  001162        
000959  001163  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
000960  001164  // Syntax: gfx_RGBto565(red, green, blue);
000961  001165  // Usage : gfx_RGBto565(arg1, arg2, arg3);
000962  001166  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
000963  001167        
000964  001168  func gfx_332to565("COLOUR8BIT"), 1;
000965  001169  // Syntax: gfx_332to565(colour);
000966  001170  // Usage : gfx_332to565(arg);
000967  001171  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
000968  001172        
000969  001173  func gfx_Selection("index", "backcolor", "textcolor"), 0;
000970  001174  // Syntax: gfx_Selection("index", "backcolor", "textcolor"), 0;
000971  001175  // Usage : gfx_Selection(1, RED, YELLOW);
000972  001176  // Notes : Called prior to drawing a button, this function
000973  001177  //       : hilites the required text line on a multiline button.
000974  001178        
000975  001179  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
000976  001180  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
000977  001181  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
000978  001182  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
000979  001183  //       : Vertices must be specified in an anti-clockwise fashion
000980  001184        
000981  001185        
000982  001186  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
000983  001187  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
000984  001188  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
000985  001189  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
000986  001190  //       : Vertices must be minimum of 3 and can be specified in any fashion
000987  001191        
000988  001192        
000989  001193  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
000990  001194  // Syntax: gfx_Offset(x, y);
000991  001195  // Usage : gfx_Offset(arg1, arg2);
000992  001196  // Notes : Set the screen offset
000993  001197        
000994  001198        
000995  001199        
000996  001200  func gfx_Get("mode"), 1;
000997  001201  // Syntax: gfx_Get(mode);
000998  001202  // Usage : arg1 := gfx_Get(arg);
000999  001203  // Notes : Returns various parameters to caller
001000  001204  //       :
001001  001205  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001002  001206  //       : var := gfx_Get(X_MAX);
001003  001207  //       : Returns the maximum horizontal value of the display
001004  001208  //       :
001005  001209  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001006  001210  //       : var := gfx_Get(Y_MAX);
001007  001211  //       : Returns the maximum vertical value of the display
001008  001212  //       :
001009  001213  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001010  001214  //       : var := gfx_Get(LEFT_POS);
001011  001215  //       : Returns the left location of the last drawn object
001012  001216  //       : such as a slider or button or an image/video
001013  001217  //       :
001014  001218  //       : mode = TOP_POS (mode 3) : Top location of Object
001015  001219  //       : var := gfx_Get(TOP_POS);
001016  001220  //       : Returns the top location of the last drawn object
001017  001221  //       : such as a slider or button or an image/video
001018  001222  //       :
001019  001223  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001020  001224  //       : var := gfx_Get(RIGHT_POS);
001021  001225  //       : Returns the right location of the last drawn object
001022  001226  //       : such as a slider or button or an image/video
001023  001227  //       :
001024  001228  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001025  001229  //       : var := gfx_Get(BOTTOM_POS );
001026  001230  //       : Returns the bottom location of the last drawn object
001027  001231  //       : such as a slider or button or an image/video
001028  001232  //       :
001029  001233        
001030  001234        
001031  001235  //==================================================//
001032  001236  // Single parameter short-cuts                      //
001033  001237  // for the gfx_Set functions                        //
001034  001238  // These functions return the existing value before //
001035  001239  // the change is made.                              //
001036  001240  //==================================================//
001037  001241  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001038  001242  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001039  001243  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001040  001244  func gfx_Clipping("mode"), 0;                       // 3  graphics clipping ON/OFF
001041  001245  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001042  001246  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001043  001247  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001044  001248  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001045  001249  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001046  001250  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001047  001251  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001048  001252  func gfx_ColourMode("mode"), 1;                     // 11 graphics colour mode COLOUR8 or COLOUR16 (default colour 16)
001049  001253  func gfx_BevelWidth("mode"), 1;                     // 12 graphics button bevel width
001050  001254  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001051  001255  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001052  001256  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001053  001257        
001054  001258        
001055  001259  //==================================================//
001056  001260  // uSD/FLASH Function Prototypes                    //
001057  001261  //==================================================//
001058  001262  func media_Video("x", "y"), 0;                      // display movie at position x y
001059  001263  // Syntax: media_Video(x, y);
001060  001264  // Usage : media_Video(arg1, arg2);
001061  001265  // Notes : Play a Video/Animation clip from the uSD card at screen location
001062  001266  //       : specified by x,y (top left corner). The location of the clip in the
001063  001267  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001064  001268        
001065  001269  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001066  001270  // Syntax: media_VideoFrame(Frame_number);
001067  001271  // Usage : arg1 := media_VideoFrame();
001068  001272  // Notes : After a pointer to a valid video has been set with media_SetSector,
001069  001273  //       : calling this function shows each fram sequentially, returning
001070  001274  //       : the number of frames remaining. The position of the image is
001071  001275  //     : at the current origin as set with gfx_MoveTo(...);
001072  001276        
001073  001277  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001074  001278  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001075  001279  // Usage : media_SetAdd(arg1, arg2);
001076  001280  // Notes : Set uSD internal Address pointer for bytewise access
001077  001281        
001078  001282  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001079  001283  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001080  001284  // Usage : media_SetSector(arg1, arg2);
001081  001285  // Notes : Set uSD internal Sector pointer for sector block access
001082  001286        
001083  001287  func media_RdSector("*destination"), 1;
001084  001288  // Syntax: media_RdSector(*destination);
001085  001289  // Usage : media_RdSector(rdblock);
001086  001290  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001087  001291  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001088  001292  //       : After the read the Sector pointer is automatically incremented by 1.
001089  001293  //       : Returns TRUE if uSD response was TRUE
001090  001294        
001091  001295  func media_WrSector("*source"), 1;
001092  001296  // Syntax: media_WrSector(*source);
001093  001297  // Usage : media_WrSector(wrblock);
001094  001298  // Notes : Writes 512 bytes (256 words) from a source memory block
001095  001299  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001096  001300  //       : pointer is automatically incremented by 1.
001097  001301  //       : Returns TRUE if uSD response was TRUE
001098  001302        
001099  001303  func media_ReadByte(), 1;                // read a byte at the current stream position
001100  001304  // Syntax: media_RdByte();
001101  001305  // Usage : var := media_RdByte();
001102  001306  // Notes : Reads and Returns a single byte of data from the
001103  001307  //       : uSD card pointed to by the internal Address pointer.
001104  001308  //       : After the read the Address pointer is automatically
001105  001309  //       : incremented by 1.
001106  001310        
001107  001311  func media_ReadWord(), 1;                // read a word at the current stream position
001108  001312  // Syntax: media_ReadWord();
001109  001313  // Usage : var := media_ReadWord();
001110  001314  // *Notes : Reads and Returns a single word of data from the
001111  001315  //       : uSD card pointed to by the internal Address pointer.
001112  001316  //       : After the read the Address pointer is automatically
001113  001317  //       : incremented by 2.
001114  001318        
001115  001319  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
001116  001320  // Syntax: media_WriteByte(arg1);
001117  001321  // Usage : var := media_WriteByte(arg1);
001118  001322  // *Notes : Writes and Returns xxxxx
001119  001323  //       : After the write the Address pointer is automatically
001120  001324  //       : incremented by 1.
001121  001325        
001122  001326  func media_WriteWord("word"), 1;            // write a word to the current stream position
001123  001327  // Syntax: media_WriteWord(arg1);
001124  001328  // Usage : var := media_WriteWord(arg1);
001125  001329  // *Notes : Writes and Returns xxxxx
001126  001330  //       : After the write the Address pointer is automatically
001127  001331  //       : incremented by 2.
001128  001332        
001129  001333  func media_Image("x", "y"), 0;            // display image at position x y
001130  001334  // Syntax: media_Image(x, y);
001131  001335  // Usage : media_Image(arg1, arg2);
001132  001336  // Notes : Display an image from the uSD card at screen location
001133  001337  //       : specified by x,y (top left corner). The location of the
001134  001338  //       : Image in the uSD card must be specified by
001135  001339  //       : media_setSector(Image_Sector_Add) function.
001136  001340        
001137  001341  func media_Flush(), 1;                    // after writing to media, flush the sector and write
001138  001342  // Syntax: media_Flush();
001139  001343  // Usage : var := media_Flush();
001140  001344  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
001141  001345  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
001142  001346        
001143  001347  func media_Init(), 1;                    // initialize uSD card
001144  001348  // Usage : media_Init();
001145  001349  // Notes : Initialise uSD CARD
001146  001350  //       : Response: 0 = No Card
001147  001351  //       :           1 = Card Initialised
001148  001352        
001149  001353        
001150  001354  //==============================================//
001151  001355  // Communications Function Prototypes           //
001152  001356  //==============================================//
001153  001357  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
001154  001358  // Syntax: com_Init(buffer, bufsize, qualifier);
001155  001359  // Usage1: com_Init(mybuf, 20, 0);
001156  001360  // Usage2: com_Init(mybuf, 20, ':');
001157  001361  // Notes : initialize a serial capture buffer for the comms input
001158  001362  //       : The program must declare a var array as a circular buffer.
001159  001363  //       : Usage1 declares a circular buffer which will continually
001160  001364  //       : buffer characters.
001161  001365  //       : Usage2 must receive ':' before any characters will
001162  001366  //       : accumulate in the buffer.
001163  001367        
001164  001368  func com_Reset(), 0;                 // reset the comms receiver
001165  001369  // Syntax: com_Reset();
001166  001370  // Usage : com_Reset();
001167  001371  // Notes : reset comms to default polled mode
001168  001372        
001169  001373  func com_Count(), 1;                // return count of characters in receive buffer
001170  001374  // Syntax: com_Count();
001171  001375  // Usage : arg := com_Count();
001172  001376  // Notes : return count of buffered characters in buffer attachment
001173  001377        
001174  001378  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
001175  001379  // Syntax: com_Full();
001176  001380  // Usage : if (com_Full() ,,,, go read buffer;
001177  001381  // Notes : return true if buffer full (not necessarily an error if
001178  001382  //       : buffer is sized to a packet size)
001179  001383        
001180  001384  func com_Error(), 1;                // return comms errors comms error occurred
001181  001385  // Syntax: com_Error();
001182  001386  // Usage : if (com_Error() ) ...... take recovery action;
001183  001387  // Notes : return non zero if any errors low level comms errors occured
001184  001388  // returns :
001185  001389  // bit0 = Receiver Overflow Error
001186  001390  // bit1 = Receiver Framing Error
001187  001391  // bit2 = Transmit Buffer Overflow
001188  001392        
001189  001393  func com_Sync(), 1;                // returns TRUE if qualifier has been received
001190  001394  // Syntax: com_Sync();
001191  001395  // Usage : com_Sync();
001192  001396  // return true if sync character has been received in com_Init("...") mode
001193  001397        
001194  001398        
001195  001399  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
001196  001400  // Syntax: com_TXbuffer("buf", "bufsize", "pin");
001197  001401  // Usage : com_TXbuffer(mybuf, 1024, IO1_PIN);    // set the TX buffer, usin IO1_PIN for turnaround
001198  001402  // Usage : com_TXbuffer(0, 0, 0);              // revert to non buffered service
001199  001403  // Notes : initialize a serial buffer for the COM0 output.
001200  001404  //       : The program must declare a var array as a circular buffer.
001201  001405  //       : When a TX buffer is declared for comms, the transmission
001202  001406  //       : of characters becomes non blocking. The only time
001203  001407  //       : blocking will occur is if the buffer has insufficient space
001204  001408  //       : to accept the next character, in which case the function
001205  001409  //       : will wait for buffer space to become available. If the
001206  001410  //       : TX buffer is no longer required, just set the buffer pointer
001207  001411  //       : to zero, the size in this case doesnt matter and is ignored.
001208  001412  //       : The function can resize or reallocated to another buffer at
001209  001413  //       : any time. The buffer is flushed before any changes are made.
001210  001414  //       : "pin" designates an IO pin to control a bi-directional 
001211  001415  //       : control device for half duplex mode. "pin" will go HI at the
001212  001416  //       : start of a transmission, and will return low after the final
001213  001417  //       : byte is transmitted. If not required, just set "pin" to zero.
001214  001418        
001215  001419        
001216  001420  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
001217  001421  // Syntax: com_TXcount();
001218  001422  // Usage : arg := com_Count();
001219  001423  // Notes : return count of characters remaining in COM0 transmit buffer
001220  001424  //       : that was previously allocated with com_TXbuffer(...);
001221  001425        
001222  001426        
001223  001427  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
001224  001428  // Syntax: com_TXemptyEvent(function);
001225  001429  // Usage : arg := com_TXemptyEvent();
001226  001430  // Notes : If a comms TX buffer that was previously allocated with
001227  001431  //       : com_TXbuffer(...);, this function can be used to set up
001228  001432  //       : a function to be called when the COM0 TX buffer is empty.
001229  001433  //       : This is useful for either reloading the TX buffer, setting
001230  001434  //       : or clearing a pin to change the direction of eg a RS485
001231  001435  //       : line driver, or any other form of traffic control.
001232  001436  //       : The event function must not have any parameters.
001233  001437  //       : To disable the event, simply call com_TXemptyEvent(0).
001234  001438  //       : com_TXbuffer(...); also resets any active event.
001235  001439  //       : com_TXemptyEvent returns any previous event function
001236  001440  //       : address, or zero if there was no previous function.
001237  001441        
001238  001442        
001239  001443  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
001240  001444  // Usage : arg := com_TXbufferHold(ON);  // hold the buffer while we fill it
001241  001445  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
001242  001446  // Notes : Expecting that a comms TX buffer that was previously allocated with
001243  001447  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
001244  001448  //       : the buffer being sent wile it is being loaded. Mormally, when
001245  001449  //       : using buffered comms, the transmit process will begin
001246  001450  //       : immediately. This is often undesirable for 2 reasons,
001247  001451  //       : 1] you may wish to build a packet then send it later
001248  001452  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
001249  001453  //       : as the FIFO buffer is constantly trying to empty while
001250  001454  //       : you are busy tring to fill it.
001251  001455  // return -1 if function is called illegally when TX comms is not buffered.
001252  001456  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
001253  001457  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
001254  001458        
001255  001459        
001256  001460  //=============================================================//
001257  001461  // Auxilliary Communications Function Prototypes
001258  001462  //=============================================================//
001259  001463  func com1_Init("buffer", "bufsize", "qualifier"), 0;
001260  001464  // Syntax: com_Init(buffer, bufsize, qualifier);
001261  001465  // Usage1: com_Init(mybuf, 20, 0);
001262  001466  // Usage2: com_Init(mybuf, 20, ':');
001263  001467  // Notes : initialize a serial capture buffer for the comms input
001264  001468  //       : The program must declare a var array as a circular buffer.
001265  001469  //       : Usage1 declares a circular buffer which will continually
001266  001470  //       : buffer characters.
001267  001471  //       : Usage2 must receive ':' before any characters will
001268  001472  //       : accumulate in the buffer.
001269  001473        
001270  001474  func com1_Reset(), 0;
001271  001475  // Syntax: com_Reset();
001272  001476  // Usage : com_Reset();
001273  001477  // Notes : reset comms receiver to default polled mode
001274  001478        
001275  001479  func com1_Count(), 1;
001276  001480  // Syntax: com_Count();
001277  001481  // Usage : arg := com_Count();
001278  001482  // Notes : return count of characters in receive buffer
001279  001483        
001280  001484  func com1_Full(), 1;
001281  001485  // Syntax: com_Full();
001282  001486  // Usage : if (com_Full() ,,,, go read buffer;
001283  001487  // Notes : return true if receive buffer full
001284  001488        
001285  001489  func com1_Error(), 1;
001286  001490  // Syntax: com_Error();
001287  001491  // Usage : if (com_Error() ) ...... take recovery action;
001288  001492  // Notes : return non zero if any level comms errors occured
001289  001493  // returns :
001290  001494  // bit0 = Receiver Overflow Error
001291  001495  // bit1 = Receiver Framing Error
001292  001496  // bit2 = Transmit Buffer Overflow
001293  001497        
001294  001498  func com1_Sync(), 1;
001295  001499  // Syntax: com_Sync();
001296  001500  // Usage : com_Sync();
001297  001501  // Notes : return true if sync character has been received in com_Init("...") mode
001298  001502        
001299  001503        
001300  001504  func com1_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
001301  001505  // Syntax: com1_TXbuffer("buf", "bufsize", "pin");
001302  001506  // Usage : com1_TXbuffer(mybuf, 1024, IO1_PIN);    // set the TX buffer, usin IO1_PIN for turnaround
001303  001507  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
001304  001508  // Notes : initialize a serial buffer for the COM1 output.
001305  001509  //       : The program must declare a var array as a circular buffer.
001306  001510  //       : When a TX buffer is declared for comms, the transmission
001307  001511  //       : of characters becomes non blocking. The only time
001308  001512  //       : blocking will occur is if the buffer has insufficient space
001309  001513  //       : to accept the next character, in which case the function
001310  001514  //       : will wait for buffer space to become available. If the
001311  001515  //       : TX buffer is no longer required, just set the buffer pointer
001312  001516  //       : to zero, the size in this case doesnt matter and is ignored.
001313  001517  //       : The function can resize or reallocated to another buffer at
001314  001518  //       : any time. The buffer is flushed before any changes are made.
001315  001519  //       : "pin" designates an IO pin to control a bi-directional 
001316  001520  //       : control device for half duplex mode. "pin" will go HI at the
001317  001521  //       : start of a transmission, and will return low after the final
001318  001522  //       : byte is transmitted. If not required, just set "pin" to zero.
001319  001523        
001320  001524        
001321  001525  func com1_TXcount(), 1;                // return count of characters in COM1 TX buffer
001322  001526  // Syntax: com1_TXcount();
001323  001527  // Usage : arg := com1_Count();
001324  001528  // Notes : return count of characters remaining in COM1 transmit buffer
001325  001529  //       : that was previously allocated with com1_TXbuffer(...);
001326  001530        
001327  001531        
001328  001532  func com1_TXemptyEvent("function"), 1;  // sets a function to be called when COM1 TX buffer empty
001329  001533  // Syntax: com1_TXemptyEvent(function);
001330  001534  // Usage : arg := com1_TXemptyEvent();
001331  001535  // Notes : If a comms TX buffer that was previously allocated with
001332  001536  //       : com1_TXbuffer(...);, this function can be used to set up
001333  001537  //       : a function to be called when the COM1 TX buffer is empty.
001334  001538  //       : This is useful for either reloading the TX buffer, setting
001335  001539  //       : or clearing a pin to change the direction of eg a RS485
001336  001540  //       : line driver, or any other form of traffic control.
001337  001541  //       : The event function must not have any parameters.
001338  001542  //       : To disable the event, simply call com1_TXemptyEvent(0).
001339  001543  //       : com1_TXbuffer(...); also resets any active event.
001340  001544  //       : com1_TXemptyEvent returns any previous event function
001341  001545  //       : address, or zero if there was no previous function.
001342  001546        
001343  001547        
001344  001548  func com1_TXbufferHold("state"), 1; // hold or release a com1_TXbuffer
001345  001549  // Usage : arg := com1_TXbufferHold(ON);  // hold the buffer while we fill it
001346  001550  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
001347  001551  // Notes : Expecting that a comms TX buffer that was previously allocated with
001348  001552  //       : com1_TXbuffer(...);, com1_TXbufferHold(ON) can be used to stop
001349  001553  //       : the buffer being sent wile it is being loaded. Mormally, when
001350  001554  //       : using buffered comms, the transmit process will begin
001351  001555  //       : immediately. This is often undesirable for 2 reasons,
001352  001556  //       : 1] you may wish to build a packet then send it later
001353  001557  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
001354  001558  //       : as the FIFO buffer is constantly trying to empty while
001355  001559  //       : you are busy tring to fill it.
001356  001560  // return -1 if function is called illegally when TX comms is not buffered.
001357  001561  // return buffer count when called with argument of 1, eg com1_TXbufferHold(ON)
001358  001562  // return 0 when argument is zero, eg com1_TXbufferHold(OFF)
001359  001563        
001360  001564  func serin1(), 1;
001361  001565  // Syntax: serin1();
001362  001566  // Usage : char := serin1();
001363  001567  // Notes : return the next available character from COM1
001364  001568        
001365  001569  func serout1("char"), 0;
001366  001570  // Syntax: serout1("char");
001367  001571  // Usage : serout1(ch);
001368  001572  // Notes : send character to COM1
001369  001573        
001370  001574  func com_SetBaud("comport","baudrate/10"), 1;
001371  001575  // Syntax: com_SetBaud("comport","baudrate/10");
001372  001576  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
001373  001577  // Notes : sets to any viable baud rate from 160 to 655350
001374  001578  // return true if baud rate was acceptable
001375  001579        
001376  001580        
001377  001581        
001378  001582  //==============================================//
001379  001583  // Display Access                               //
001380  001584  //==============================================//
001381  001585  func disp_Init(), 0;                            // initialize display with required tables
001382  001586  // Syntax: disp_Init();
001383  001587  // Usage : disp_Init();
001384  001588  // Notes : Initialises or reinitialises the display.
001385  001589  //       : Normally used after restoration of peripheral power
001386  001590  //       : and after DeepSleep.
001387  001591        
001388  001592  func disp_SetReg("register", "data"), 0;
001389  001593  // Syntax: display_SetReg(register, data);
001390  001594  // Usage : display_SetReg(arg1, arg2);
001391  001595  // Notes : Sets uLCD specific display driver registers. Refer
001392  001596  //       : to appropriate display driver data sheet.
001393  001597        
001394  001598  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
001395  001599  // Syntax: disp_setGRAM(x1, y1, x2, y2);
001396  001600  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
001397  001601  // Notes : Prepares the GRAM area for user access.
001398  001602  //       : Data can now be written with disp_GRAM.
001399  001603  //       : GRAM will be set accordingly for the correct screen mode.
001400  001604  //       : the LO word of the 32 bit pixel count is returned. This is
001401  001605  //       : usually all that is needed unlse GRAM area exceeds 256^2
001402  001606  //       : A copy of the 32bit value can be found in
001403  001607  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
001404  001608        
001405  001609  func disp_WrGRAM("colour"), 0;
001406  001610  // Syntax: display_WrGRAM(colour);
001407  001611  // Usage : display_WrGRAM(arg);
001408  001612  // Notes : Data can be written to the GRAM consecutively using
001409  001613  //       : this function once the GRAM access window has been setup.
001410  001614        
001411  001615  func disp_WriteControl("value"), 0;             // write a control byte to the display
001412  001616  func disp_WriteWord("value"), 0;                // write a word to the display
001413  001617        
001414  001618        
001415  001619  func disp_ReadWord(), 1;                        // read a word from the display
001416  001620  // Syntax: disp_ReadWord();
001417  001621  // Usage : x:=disp_ReadWord();
001418  001622  // Notes : Read a word from the controller
001419  001623  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
001420  001624  //       : print(disp_ReadWord());        // print ID
001421  001625  //       : (Many displays are write only)
001422  001626        
001423  001627                                                  //
001424  001628  //==============================================//
001425  001629  // unadorned SPI functions                      //
001426  001630  //==============================================//
001427  001631  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
001428  001632  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
001429  001633  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
001430  001634  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
001431  001635                                                  //
001432  001636  //==============================================//
001433  001637  // flash device specific functions              //
001434  001638  //==============================================//
001435  001639  func flash_SIG(), 1;                            // read Jedecsignature from SPI Flash device
001436  001640  func flash_ID(), 1;                             // read ID code from FLASH device
001437  001641  func flash_BulkErase(), 0;                      // erase the entire FLASH device
001438  001642  func flash_BlockErase("block"), 1;              // erase the required 64k flash block
001439  001643                                                  //
001440  001644                                                  //
001441  001645  //==============================================//
001442  001646  // string and character size function           //
001443  001647  //==============================================//
001444  001648  func charwidth("char"), 1;                      // return width of a character in pixel units
001445  001649  func charheight("char"), 1;                     // return height of a character in pixel units
001446  001650  func strwidth("pointer"), 1;                    // return width of a string in pixel units
001447  001651  func strheight(), 1;                            // return height of a string in pixel units
001448  001652        
001449  001653        
001450  001654  //------------------------------------------------------------------//
001451  001655  //        I2C Function Prototypes
001452  001656  //------------------------------------------------------------------//
001453  001657  func I2C_Open("speed"), 0;
001454  001658  // Syntax: I2C_Open(speed),
001455  001659  // Usage : I2C_Open(I2C_MED);
001456  001660  // Notes : configures the I2C module
001457  001661  //       : speed can be I2C_SLOW, I2C_MED, I2C_FAST (100khz, 400khz, 1mhz)
001458  001662        
001459  001663  func I2C_Close(), 0;
001460  001664  // Syntax: I2C_Close();
001461  001665  // Usage : I2C_Close();
001462  001666  // Notes : disables the I2C1 module.
001463  001667        
001464  001668  func I2C_Start(), 1;
001465  001669  // Syntax: I2C_Start();
001466  001670  // Usage : I2C_Start();
001467  001671  // Notes : generates a Start condition.
001468  001672  //       : returns true if successful (usually ignored)
001469  001673        
001470  001674  func I2C_Stop(), 1;
001471  001675  // Syntax: I2C_Stop();
001472  001676  // Usage : I2C_Stop();
001473  001677  // Notes : generates a Stop condition.
001474  001678  //       : returns true if successful (usually ignored)
001475  001679        
001476  001680  func I2C_Restart(), 1;
001477  001681  // Syntax: I2C_Restart();
001478  001682  // Usage : I2C_Restart();
001479  001683  // Notes : generates a Restart condition.
001480  001684  //       : returns true if successful (usually ignored)
001481  001685        
001482  001686  func I2C_Read(), 1;
001483  001687  // Syntax: I2C_Read();
001484  001688  // Usage : ch := I2C_Read();
001485  001689  // Notes : reads a single byte from the I2C Bus.
001486  001690        
001487  001691  func I2C_Write("byte"), 1;
001488  001692  // Syntax: I2C_Write(byte);
001489  001693  // Usage : r := I2C_Write(ch);
001490  001694  // Notes : is used to write a byte to the I2C bus.
001491  001695  //       : Returns 0 if failed, 1 if no ack, 2 if ack
001492  001696        
001493  001697  func I2C_Ack(), 0;
001494  001698  // Syntax: I2C_Ack();
001495  001699  // Usage : I2C_Ack();
001496  001700  // Notes : generates the acknowledge condition.
001497  001701        
001498  001702  func I2C_Nack(), 0;
001499  001703  // Syntax: I2C_Nack();
001500  001704  // Usage : I2C_Nack();
001501  001705  // Notes : generates the negative acknowledge condition.
001502  001706        
001503  001707  func I2C_AckStatus(), 0;
001504  001708  // Syntax: I2C_AckStatus();
001505  001709  // Usage : r := I2C_AckStatus();
001506  001710  // Notes : returns the ACK status from the device.
001507  001711        
001508  001712  func I2C_AckPoll("control"), 1;
001509  001713  // Syntax: I2C_AckPoll();
001510  001714  // Usage : r := I2C_AckPoll(0xA0);
001511  001715  // Notes : waits for a device to return from ACK polling.
001512  001716        
001513  001717  func I2C_Idle(), 0;
001514  001718  // Syntax: I2C_Idle();
001515  001719  // Usage : I2C_Idle();
001516  001720  // Notes : waits until the I2C Bus is Inactive.
001517  001721        
001518  001722  func I2C_Gets("buffer", "size"), 1;
001519  001723  // Syntax: I2C_Gets("buffer", "size");
001520  001724  // Usage : r := I2C_Gets(mybuf, 16);
001521  001725  // Notes : only reads up to "size" characters into "buffer"
001522  001726  //       : Reads up to asciiz terminator including terminator
001523  001727        
001524  001728  func I2C_Getn("buffer", "size"), 1;
001525  001729  // Syntax: I2C_Gets("buffer", "size");
001526  001730  // Usage : r := I2C_Gets(mybuf, 16);
001527  001731  // Notes : reads "size" bytes into "buffer"
001528  001732  //       :
001529  001733        
001530  001734  func I2C_Puts("buffer"), 1;
001531  001735  // Syntax: I2C_Puts("buffer");
001532  001736  // Usage : r := I2C_Puts(mybuf);
001533  001737  // Notes : writes an asciiz string to the I2C device
001534  001738  //       : returns count of characters written
001535  001739        
001536  001740  func I2C_Putn("buffer", "count"), 1;
001537  001741  // Syntax: I2C_Putn("buffer","count");
001538  001742  // Usage : r := I2C_Puts(mybuf,10);
001539  001743  // Notes : writes up to "size" bytes to the I2C device
001540  001744  //       : returns number of bytes written
001541  001745        
001542  001746        
001543  001747  //------------------------------------------------------------------//
001544  001748  //        Image Control Function Prototypes
001545  001749  //------------------------------------------------------------------//
001546  001750  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
001547  001751  // Syntax: img_SetPosition(handle, index, xpos, ypos);
001548  001752  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
001549  001753  // Notes : set the position where the image will be displayed
001550  001754  //       : returns true if index was ok and function was successful.
001551  001755  //       : you may turn off an image so when img_Refresh is called,
001552  001756  //       : the image will not be shown
001553  001757        
001554  001758  func img_Enable("handle", "index"), 1;
001555  001759  // Syntax: img_Enable(handle, index);
001556  001760  // Usage : r := img_Enable(hImageList, imagenum);
001557  001761  // Notes : enable image in a image list
001558  001762  //       : returns true if index was ok and function was successful.
001559  001763  //       : this is the default state so when img_Refresh is called,
001560  001764  //       : all the images in the list will be shown
001561  001765  //       : if index is set to -1, all of the images are enabled
001562  001766        
001563  001767  func img_Disable("handle", "index"), 1;
001564  001768  // Syntax: img_Disable(handle, index);
001565  001769  // Usage : r := img_Disable(hImageList, imagenum);
001566  001770  // Notes : disable image in a image list
001567  001771  //       : returns true if index was ok and function was successful.
001568  001772  //       : you must turn off an image so when img_Refresh is called,
001569  001773  //       : the image will not be shown.
001570  001774  //       : if index is set to -1, all of the images are disabled
001571  001775        
001572  001776        
001573  001777  func img_Darken("handle", "index"), 1;
001574  001778  // Syntax: img_Darken(handle, index);
001575  001779  // Usage : r := img_Darken(hImageList, imagenum);
001576  001780  // Notes : darken image in a image list
001577  001781  //       : returns true if index was ok and function was successful.
001578  001782  //       : if index is set to -1, all of the images are darkened
001579  001783  //       : NB:- this feature will only work for the next refresh, then
001580  001784  //       : the image reverts back to normal when displayed again.
001581  001785        
001582  001786        
001583  001787  func img_Lighten("handle", "index"), 1;
001584  001788  // Syntax: img_Lighten(handle, index);
001585  001789  // Usage : r := img_Lighten(hImageList, imagenum);
001586  001790  // Notes : lighten image in a image list
001587  001791  //       : returns true if index was ok and function was successful.
001588  001792  //       : if index is set to -1, all of the images are lightened
001589  001793  //       : NB:- this feature will only work for the next refresh, then
001590  001794  //       : the image reverts back to normal when displayed again.
001591  001795        
001592  001796  func img_SetWord("handle", "index", "offset", "word"), 1;
001593  001797  // Syntax: img_SetWord(handle, index, offset, word);
001594  001798  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
001595  001799  // Notes : set specified word (0-7) in a image entry
001596  001800  //       : returns TRUE if successful, return value usually ignored.
001597  001801        
001598  001802  func img_GetWord("handle", "index", "offset"), 1;
001599  001803  // Syntax: myvar := img_GetWord("handle", "index", "offset");
001600  001804  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
001601  001805  // Notes : returns specified word (0-14) from an image entry
001602  001806  //       : refer to image control entry offsets.
001603  001807        
001604  001808  func img_Show("handle", "index"), 1;
001605  001809  // Syntax: img_Show(handle, index);
001606  001810  // Usage : display image entry (regardless of enable/disable)
001607  001811  //       : returns TRUE if successful, return value usually ignored.
001608  001812        
001609  001813  func img_SetAttributes("handle", "index","value"), 1;
001610  001814  // Syntax: img_SetAttributes("handle", "index","offset");
001611  001815  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
001612  001816  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
001613  001817  //       : of an image control entry. "value" refers to various bits in
001614  001818  //       : the image control entry (see image attribute flags).
001615  001819  //       : A '1' bit in the "value" field SETS the respective bit
001616  001820  //       : in the IMAGE_FLAGS field of the image control entry.
001617  001821  //       : returns TRUE if successful, return value usually ignored.
001618  001822        
001619  001823  func img_ClearAttributes("handle", "index","value"), 1;
001620  001824  // Syntax: img_ClearAttributes("handle", "index","offset");
001621  001825  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
001622  001826  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
001623  001827  //       : of an image control entry. "value" refers to various bits in
001624  001828  //       : the image control entry (see image attribute flags)
001625  001829  //       : a '1' bit in the "value" field CLEARS the respective bit
001626  001830  //       : in the IMAGE_FLAGS field of the image control entry.
001627  001831  //       : returns TRUE if successful, return value usually ignored.
001628  001832        
001629  001833  func img_Touched("handle", "index"), 1;
001630  001834  // Syntax: r := img_Touched(handle, index);
001631  001835  // Usage : img_Touched(hndl, 17);
001632  001836  //       : returns -1 if image not touched, or returns index
001633  001837  // Notes : if index is passed as -1, function tests all images,
001634  001838  //       : and returns -1 if image not touched, or returns index.
001635  001839        
001636  001840        
001637  001841        
001638  001842        
001639  001843  //------------------------------------------------------------------//
001640  001844  //        Timer Function Prototypes
001641  001845  //------------------------------------------------------------------//
001642  001846  func sys_T(), 1;
001643  001847  // Syntax: sys_T();
001644  001848  // Usage : t := sys_T();
001645  001849  // Notes : return the current value of the rolling system timer (1msec) LO word
001646  001850        
001647  001851  func sys_T_HI(), 1;
001648  001852  // Syntax: sys_T_HI();
001649  001853  // Usage : t := sys_T_HI();
001650  001854  // Notes : return the current value of the rolling system timer (1msec) HI word
001651  001855        
001652  001856  func sys_SetTimer("timernum","value"), 0;
001653  001857  // Syntax: sys_SetTimer("timernum", "value");
001654  001858  // Usage : sys_SetTimer(TIMER5, 10000);
001655  001859  // Notes : set a countdown on the selected timer, or 'top up' if required.
001656  001860  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
001657  001861  //       : Maximum timeout period is 65.535 seconds
001658  001862  //       : A timer can be read with the sys_GetTimer("timernum") function
001659  001863        
001660  001864  func sys_GetTimer("timernum"), 1;
001661  001865  // Syntax: t := sys_GetTimer("timernum");
001662  001866  // Usage : t := sys_GetTimer(TIMER3);
001663  001867  // Notes : returns 0 if timer has expired, or the current countdown value.
001664  001868  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
001665  001869  //       : Maximum timeout period is 65.535 seconds
001666  001870  //       : A timer must be set with the sys_SetTimer("timernum","value") function
001667  001871        
001668  001872  func sys_SetTimerEvent("timernum","function"), 1;
001669  001873  // Syntax: sys_SetTimerFunction("timernum", "function");
001670  001874  // Usage : sys_SetTimer(TIMER5, myfunc);
001671  001875  // Notes : set a function to be called for selected timer.
001672  001876  //       : When the timer reaches zero, the function is called.
001673  001877  //       : The called function must not have any parameters
001674  001878  //       : sys_SetTimerEvent returns any previous event function
001675  001879  //       : address, or zero if there was no previous function.
001676  001880        
001677  001881  func sys_EventQueue(), 1;
001678  001882  // Syntax: sys_EventQueue();
001679  001883  // Usage : tasks := sys_EventQueue();
001680  001884  // Notes : returns the max number of events that were pending
001681  001885  //       : in the timer queue since the last call to this function.
001682  001886  //       : This can be used to assess timer event overhead burden,
001683  001887  //       : especially after or during a sys_EventsPostpone action.
001684  001888        
001685  001889  func sys_EventsPostpone(), 0;
001686  001890  // Syntax: sys_EventPostpone();
001687  001891  // Usage : sys_EventPostpone();   // postpone the event queue
001688  001892  // Notes : postpone any events until the sys_EventResume function is executed
001689  001893  //       : The timer event queue will continue to queue events, but no action
001690  001894  //       : will take place untill a sys_EventResume function is encountered.
001691  001895  //       : The queue will continue to receive up to 32 events before discarding
001692  001896  //       : any further events. This function is required to allow a sequence of
001693  001897  //       : instructions or functions to occur that would otherwise be corrupted
001694  001898  //       : by an event occuring during the sequence of instructions or functions.
001695  001899  //       : A good example of this is when you set a position to print, if there
001696  001900  //       : was no way of locking the current sequence, an event may occur which
001697  001901  //       : does a similar thing, and a contention would occur - printing to
001698  001902  //       : the wrong position. This function should be used wisely, if any action
001699  001903  //       : that is required would take considerable time, it is better to disable
001700  001904  //       : any conflicting event functions with a bypass flag, then restart the
001701  001905  //       : conflicting event by re-issuing a timer value.
001702  001906        
001703  001907  func sys_EventsResume(), 0;
001704  001908  // Syntax: sys_EventsResume();
001705  001909  // Usage : sys_EventsResume();   // resume the event queue
001706  001910  // Notes : resume any postponed events. The queue will try to execute any timer
001707  001911  //       : events that were incurred during the postponed period.
001708  001912        
001709  001913        
001710  001914  func sys_Sleep("units"), 1;
001711  001915  // Syntax: t := sys_Sleep("units");
001712  001916  // Usage : t := sys_Sleep(10);
001713  001917  // Notes : sets the display into low power mode for a period of time.
001714  001918  //       : Touching the touch screen will also wake from sleep.
001715  001919  //       : Returns remaining sleep units.
001716  001920        
001717  001921  func iterator("offset"), 0;
001718  001922  // Syntax: t :=  iterator("offset");
001719  001923  // Usage : t :=  iterator(10);
001720  001924  // Notes : set the iterator size for ++/--
001721  001925  //       : The next postinc,postdec,preinc of predec will alter
001722  001926  //       : by the specified value.
001723  001927  //       : The offset will return to 1 after the next operation.
001724  001928        
001725  001929        
001726  001930        
001727  001931        
001728  001932  //------------------------------------------------------------------//
001729  001933  //         Touch Screen Function Prototypes
001730  001934  //------------------------------------------------------------------//
001731  001935        
001732  001936  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
001733  001937  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
001734  001938  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
001735  001939  // Notes : Specifies a new touch detect region on the screen
001736  001940  //       : such that only touch activity in that region will
001737  001941  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
001738  001942        
001739  001943  func touch_Set("mode"), 0;
001740  001944  // Syntax: touch_Set(mode);
001741  001945  // Usage : touch_Set(arg);
001742  001946  // Notes : Sets various Touch Screen related parameters
001743  001947  //       :
001744  001948  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
001745  001949  //       : touch_Set(TOUCH_ENABLE);
001746  001950  //       : Enables and initialises Touch Screen hardware
001747  001951  //       :
001748  001952  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
001749  001953  //       : touch_Set(TOUCH_DISABLE );
001750  001954  //       : Disables the Touch Screen
001751  001955  //       : Note: Touch Screen runs in the background and disabling
001752  001956  //       : it when not in use will free up extra resources
001753  001957  //       : such as 4DVM CPU cycles.
001754  001958  //       :
001755  001959  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
001756  001960  //       : touch_Set(TOUCH_REGIONDEFAULT);
001757  001961  //       : This will reset the current active region to default
001758  001962  //       : to the full screen without the application having to
001759  001963  //       : set a new active region for the full screen.
001760  001964  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
001761  001965  //       : that requre to be interfaced with an external pointing
001762  001966  //       : device, values that are poked into TOUCH_DRIVE will be
001763  001967  //       : read with the touch_Get() function)
001764  001968        
001765  001969        
001766  001970  func touch_Get("mode"), 1;
001767  001971  // Syntax: touch_Get(mode);
001768  001972  // Usage : arg1 := touch_Get(arg);
001769  001973  // Notes : Returns various Touch Screen parameters to caller
001770  001974  //       :
001771  001975  //       : mode = TOUCH_STATUS  (mode 0)
001772  001976  //       : var := touch_Get(TOUCH_STATUS);
001773  001977  //       : Returns the various states of the touch screen
001774  001978  //       : 0 = NOTOUCH
001775  001979  //       : 1 = TOUCH_PRESSED
001776  001980  //       : 2 = TOUCH_RELEASED
001777  001981  //       : 3 = TOUCH_MOVING
001778  001982  //       :
001779  001983  //       : mode = TOUCH_GETX   (mode 1)
001780  001984  //       : var := touch_Get(TOUCH_GETX);
001781  001985  //       : Returns the X coordinates of the touch
001782  001986  //       :
001783  001987  //       : mode = TOUCH_GETY   (mode 2)
001784  001988  //       : var := touch_Get(TOUCH_GETY);
001785  001989  //       : Returns the Y coordinates of the touch
001786  001990        
001787  001991  //------------------------------------------------------------------//
001788  001992  //        CTYPE Function Prototypes
001789  001993  //------------------------------------------------------------------//
001790  001994        
001791  001995  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
001792  001996  // Syntax: isdigit("char");
001793  001997  // Usage : Var := isdigit(ch);
001794  001998  // Notes : char specifies the ascii character for the test
001795  001999  //     : 0 : char is not an ascii digit.
001796  002000  //     : 1 : char is an ascii digit..
001797  002001  //     : Valid range is "0123456789"
001798  002002        
001799  002003  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
001800  002004  // Syntax: isxdigit("char");
001801  002005  // Usage : Var := isxdigit(ch);
001802  002006  // Notes : char specifies the ascii character for the test
001803  002007  //     : 0 : char is not an ascii hexadecimal digit.
001804  002008  //     : 1 : char is an ascii hexadecimal digit..
001805  002009  //     : Valid range is "0123456789ABCDEF"
001806  002010        
001807  002011  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
001808  002012  // Syntax: isupper("char");
001809  002013  // Usage : Var := isupper(ch);
001810  002014  // Notes : char specifies the ascii character for the test
001811  002015  //     : 0 : char is not an ascii upper-case letter.
001812  002016  //     : 1 : char is an ascii upper-case letter.
001813  002017  //     : Valid range is "ABCD....WXYZ"
001814  002018        
001815  002019  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
001816  002020  // Syntax: islower("char");
001817  002021  // Usage : Var := islower(ch);
001818  002022  // Notes : char specifies the ascii character for the test
001819  002023  //     : 0 : char is not an ascii lower-case letter.
001820  002024  //     : 1 : char is an ascii lower-case letter.
001821  002025  //     : Valid range is "abcd....wxyz"
001822  002026        
001823  002027  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
001824  002028  // Syntax: isalpha("char");
001825  002029  // Usage : Var := isalpha(ch);
001826  002030  // Notes : char specifies the ascii character for the test
001827  002031  //     : 0 : char is not an ascii lower or upper case letter.
001828  002032  //     : 1 : char is an ascii lower or upper case letter.
001829  002033  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
001830  002034        
001831  002035  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
001832  002036  // Syntax: isalnum("char");
001833  002037  // Usage : Var := isalnum(ch);
001834  002038  // Notes : char specifies the ascii character for the test
001835  002039  //     : 0 : char is not an ascii alphanumeric character.
001836  002040  //     : 1 : char is an ascii alphanumeric character.
001837  002041  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
001838  002042        
001839  002043  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
001840  002044  // Syntax: isprint("char");
001841  002045  // Usage : Var := isprint(ch);
001842  002046  // Notes : char specifies the ascii character for the test
001843  002047  //     : 0 : char is not a printable ascii character.
001844  002048  //     : 1 : char is a printable ascii character.
001845  002049  //     : Valid range is "0x20...0x7F"
001846  002050        
001847  002051  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
001848  002052  // Syntax: isspace("char");
001849  002053  // Usage : Var := isspace(ch);
001850  002054  // Notes : char specifies the ascii character for the test
001851  002055  //     : 0 : char is not a space type character.
001852  002056  //     : 1 : char is a space type character.
001853  002057  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
001854  002058        
001855  002059  //unformatted
001856  002060  func iswhite("char"), 1;    //
001857  002061  // Syntax: iswhite("char");
001858  002062  // Usage : Var := iswhite(ch);
001859  002063  // Notes : char specifies the ascii character for the test
001860  002064  //     : 0 : char is not a space or tab character.
001861  002065  //     : 1 : char is not a space or tab character.
001862  002066  //     : Valid range is space or tab
001863  002067        
001864  002068  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
001865  002069  // Syntax: toupper("char");
001866  002070  // Usage : Var := toupper(ch);
001867  002071  // Notes : char specifies the ascii character for the test
001868  002072  //     : "ABCD....XYZ" : if character is a lower case letter.
001869  002073  //     : char : if character is not a lower case letter.
001870  002074  //     : Valid range is "abcd....wxyz"
001871  002075        
001872  002076  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
001873  002077  // Syntax: tolower("char");
001874  002078  // Usage : Var := tolower(ch);
001875  002079  // Notes : char specifies the ascii character for the test
001876  002080  //     : "abcd....xyz" : if character is an upper case letter.
001877  002081  //     : char : if character is not an upper case letter.
001878  002082  //     : Valid range is "ABCD....WXYZ"
001879  002083        
001880  002084  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
001881  002085  // Syntax: LObyte(var);
001882  002086  // Usage : myVar := LObyte(myvar2);
001883  002087  // Notes : var specifies the user variable
001884  002088  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
001885  002089        
001886  002090  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
001887  002091  // Syntax: HIbyte(var);
001888  002092  // Usage : myVar := HIbyte(myvar2);
001889  002093  // Notes : var specifies the user variable
001890  002094  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
001891  002095        
001892  002096        
001893  002097  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
001894  002098  // Syntax: ByteSwap(var);
001895  002099  // Usage : myVar := ByteSwap(myvar2);
001896  002100  // Notes : var specifies the user variable
001897  002101  //     : Returns the endian swapped value of a 16 bit variable
001898  002102        
001899  002103        
001900  002104  //------------------------------------------------------------------//
001901  002105  //        Memory Allocation Function Prototypes
001902  002106  //------------------------------------------------------------------//
001903  002107        
001904  002108  func mem_Alloc("size"), 1;
001905  002109  // Syntax: mem_Alloc(bytesize);
001906  002110  // Usage : myvar := mem_Alloc(100);
001907  002111  // Notes : Allocate a block of memory to pointer myvar
001908  002112  //       : The allocated memory contains garbage but is a fast allocation.
001909  002113  //       : The block must later be released with mem_Free();
001910  002114  //       : returns 0 if function fails
001911  002115        
001912  002116  func mem_AllocV("size"), 1;
001913  002117  // Syntax: mem_AllocV(bytesize);
001914  002118  // Usage : myvar := mem_AllocV(100);
001915  002119  // Notes : Allocate a block of memory to pointer myvar
001916  002120  //       : The block of memory is filled with signature values
001917  002121  //       : the block starts with A5,5A then fills with incrementing
001918  002122  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
001919  002123  //       : This can be helpful when debugging
001920  002124  //       : The block must later be released with mem_Free();
001921  002125  //       : returns 0 if function fails
001922  002126        
001923  002127  func mem_AllocZ("size"), 1;
001924  002128  // Syntax: mem_AllocZ(bytesize);
001925  002129  // Usage : myvar := mem_AllocC(100);
001926  002130  // Notes : Allocate a zeroed block of memory to pointer myvar
001927  002131  //       : The block of memory is filled with zeroes
001928  002132  //       : The block must later be released with mem_Free();
001929  002133  //       : returns 0 if function fails
001930  002134        
001931  002135  func mem_Realloc("ptr", "size"), 1;
001932  002136  // Syntax: myvar := mem_Realloc("ptr", "size");
001933  002137  // Usage : myvar := mem_Realloc(ptr, size);
001934  002138  // Notes : The function may move the memory block to a new location,
001935  002139  //       : in which case the new location is returned.
001936  002140  //       : The content of the memory block is preserved up to the lesser
001937  002141  //       : of the new and old sizes, even if the block is moved.
001938  002142  //       : If the new size is larger, the value of the newly allocated
001939  002143  //       : portion is indeterminate. In case that ptr is NULL,
001940  002144  //       : the function behaves exactly as mem_Alloc, assigning a new block
001941  002145  //       : of size bytes and returning a pointer to the beginning of it.
001942  002146  //       : In case that the size is 0, the memory previously allocated in
001943  002147  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
001944  002148  //       : pointer is returned.
001945  002149        
001946  002150  func mem_Free("allocation"), 1;
001947  002151  // Syntax: myvar := mem_Free(allocation);
001948  002152  // Usage : myvar := mem_Free(myvar);
001949  002153  // Notes : De-allocate a block of memory previously created with
001950  002154  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
001951  002155  //       : returns 0 if function fails
001952  002156        
001953  002157  func mem_Heap(), 1;
001954  002158  // Syntax: myvar := mem_Heap();
001955  002159  // Usage : myvar := mem_Heap();
001956  002160  // Notes : returns bytecount available in heap
001957  002161  //       :
001958  002162        
001959  002163  func mem_Set("ptr","char","size"), 1;
001960  002164  // Syntax: mem_Set(ptr,char,bytesize);
001961  002165  // Usage : mem_Set(p, 'A', 100);
001962  002166  // Notes : fill a block of memory with a byte value
001963  002167  //       : returns ptr
001964  002168        
001965  002169  func mem_Copy("src", "dest", "bytecount"), 1;
001966  002170  // Syntax: myvar := mem_Copy(src, dest, bytesize);
001967  002171  // Usage : myvar := mem_Copy(p1, p2, 100);
001968  002172  // Notes : copy a word aligned block of memory from src to dest
001969  002173  //       : Note that count is a byte count, this facilitates
001970  002174  //       : copying word aligned byte arrays when using word
001971  002175  //       : aliggned packed strings.
001972  002176  //       : returns src
001973  002177        
001974  002178  func mem_Compare("ptr1","ptr2","count"), 1;
001975  002179  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
001976  002180  // Usage : myvar := mem_Compare(p1, p2, 100);
001977  002181  // Notes : compare blocks of memory at src, dest
001978  002182  //       : returns 0 if we have a match
001979  002183        
001980  002184  //------------------------------------------------------------------//
001981  002185  //        FAT16 Function Prototypes
001982  002186  //------------------------------------------------------------------//
001983  002187        
001984  002188  func file_Error(), 1;
001985  002189  // Syntax: myvar := file_Error();
001986  002190  // Usage : e := file_Error();
001987  002191  // Notes : return the most recent file error.
001988  002192  //       :
001989  002193        
001990  002194  func file_Count("filename"), 1;
001991  002195  // Syntax: count := file_Count("filename");
001992  002196  // Usage : count := file_Count("*.4dg");
001993  002197  // Notes : returns number of files found that match the criteria
001994  002198        
001995  002199  func file_Dir("filename"), 1;
001996  002200  // Syntax: count := file_Dir("filename");
001997  002201  // Usage : count := file_Dir("*.4dg");
001998  002202  // Notes : streams a string of filenames that agree with the search key
001999  002203  //       : returns number of files found that match the criteria
002000  002204        
002001  002205  func file_FindFirst("fname"), 1;
002002  002206  // Syntax: res := file_FindFirst("fname");
002003  002207  // Usage : if (file_FindFirst("*.4xe") ....
002004  002208  // Notes : returns true if at least 1 file exists
002005  002209  //       : that satisfies the file argument.
002006  002210  //       : Wildcards are usually used so if
002007  002211  //       : file_FindFirst returns true, further
002008  002212  //       : tests can be made using file_FindNext();
002009  002213  //       : to find all the files that match the
002010  002214  //       : wildcard class. Note that the stream behaviour
002011  002215  //       : is the same as file_Dir.
002012  002216  //       :
002013  002217        
002014  002218  func file_FindNext(), 1;
002015  002219  // Syntax: res := file_FindNext();
002016  002220  // Usage : while ((file_FindNext()) ....
002017  002221  // Notes : returns true if more file exists
002018  002222  //       : that satisfies the file argument
002019  002223  //       : that was given for  file_FindFirst.
002020  002224  //       : Wildcards must be used for
002021  002225  //       : file_FindFirst, else this function will
002022  002226  //       : always return zero as the only occurence
002023  002227  //       : will have already been found.
002024  002228  //       : Note that the stream behaviour
002025  002229  //       : is the same as file_Dir.
002026  002230  //       :
002027  002231        
002028  002232  func file_Exists("fname"), 1;
002029  002233  // Syntax: res := file_Exists("fname"),
002030  002234  // Usage : if(file_Exists("myfile") ....
002031  002235  // Notes : returns true if file exists
002032  002236  //       :
002033  002237        
002034  002238  func file_Open("fname", "mode"), 1;
002035  002239  // Syntax: handle := file_Open("fname","mode"),
002036  002240  // Usage : handle := file_Open("myfile.txt", 'r');
002037  002241  // Notes : returns handle if file exists
002038  002242  //       :
002039  002243        
002040  002244  func file_Close("handle"), 1;
002041  002245  // Syntax: res := file_Close("handle");
002042  002246  // Usage : res := file_Close(hnd1);
002043  002247  // Notes : returns true if file closed ok
002044  002248  //       :
002045  002249        
002046  002250  func file_Read("*dest", "size", "handle"), 1;
002047  002251  // Syntax: res := file_Read("*dest", "size", "handle"),
002048  002252  // Usage : res := file_Read(memblock,20,hnd1);
002049  002253  // Notes : returns number of characters read
002050  002254  //       : if "dest" is zero, data is read direct to GRAM window
002051  002255  //       :
002052  002256        
002053  002257        
002054  002258  func file_Seek("handle", "HiWord", "LoWord"), 1;
002055  002259  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
002056  002260  // Usage : res := file_Seek(hSource, 0, 0x1234);
002057  002261  // Notes : set file position to 0x00001234 (byte position 4660)
002058  002262  //       : for the file handle so subsequent data may be read
002059  002263  //       : from that position onwards with file_GetC(...),
002060  002264  //       : file_GetW(...) or file_GetS(...), or an image
002061  002265  //       : can be displayed with file_Image(...)
002062  002266  // Notes : returns true if ok, usually ignored
002063  002267        
002064  002268  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
002065  002269  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
002066  002270  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
002067  002271  // Notes : set file seek position to 123000
002068  002272  //       : for the file handle so subsequent data may be read
002069  002273  //       : from that record position onwards with file_GetC(...),
002070  002274  //       : file_GetW(...) or file_GetS(...), or an image
002071  002275  //       : can be displayed with file_Image(...)
002072  002276  // Notes : returns true if ok, usually ignored
002073  002277        
002074  002278  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
002075  002279  // Syntax: file_Tell("handle", &HiWord, &LoWord);
002076  002280  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
002077  002281  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
002078  002282  //       : returns true if function succeeded
002079  002283        
002080  002284  func file_Write("*source", "size", "handle"), 1;
002081  002285  // Syntax: res := fwrite("*source", "size", "handle"),
002082  002286  // Usage : res := fwrite(memblock, 20, hnd1);
002083  002287  // Notes : returns number of bytes written
002084  002288  //       :
002085  002289        
002086  002290  func file_Size("handle", "&HiWord", "&LoWord"), 1;
002087  002291  // Syntax: file_Size("handle", &HiWord, &LoWord);
002088  002292  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
002089  002293  // Notes : Reads the 32 bit file size and stores it into 2 variables.
002090  002294  //       : returns true if function succeeded
002091  002295        
002092  002296  func file_Image("x", "y", "handle"), 1;
002093  002297  // Syntax: file_Image(x, y, handle);
002094  002298  // Usage : file_Image(10, 10, hnd1);
002095  002299  // Notes : Display an image from a file at the current file position.
002096  002300  //       : The image is displayed at x,y (with respect to top left corner).
002097  002301  //       : If there is more than 1 image in the file, it can be
002098  002302  //       : accessed with file_Seek(...)
002099  002303        
002100  002304  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
002101  002305  // Syntax: file_ScreenCapture(x, y, w, h, handle);
002102  002306  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
002103  002307  // Notes : Save a image from screen to file at the current file position.
002104  002308  //       : The image can later be displayed with file_Image(...);
002105  002309  //       : The file may be opened in append mode to accumulate multiple
002106  002310  //       : images. Later, the images can be accessed with file_Seek(...);
002107  002311  //       : Note that the image will be sector aligned.
002108  002312  //       : All image headers must start on a sector boundary.
002109  002313  //       : The image is saved from x, y (with respect to top left corner)
002110  002314  //       : and the capture area is determined by "width" and "height".
002111  002315  //       : returns 0 if function succeeded
002112  002316        
002113  002317  func file_PutC("char","handle"), 1;
002114  002318  // Syntax: file_PutC("char", "handle");
002115  002319  // Usage : file_PutC('x', hndl);
002116  002320  // Notes : returns true if function succeeded
002117  002321        
002118  002322  func file_GetC("handle"), 1;
002119  002323  // Syntax: file_GetC("handle");
002120  002324  // Usage : mychar := fgetC("handle");
002121  002325  // Notes : returns next char from file
002122  002326        
002123  002327  func file_PutW("word","handle"), 1;
002124  002328  // Syntax: file_PutW("word","handle");
002125  002329  // Usage : file_PutW(0x1234, hndl);
002126  002330  // Notes : returns true if function succeeded
002127  002331        
002128  002332  func file_GetW("handle"), 1;
002129  002333  // Syntax: file_GetW("handle");
002130  002334  // Usage : myword := fgetW("handle");
002131  002335  // Notes : returns next word in file
002132  002336        
002133  002337  func file_PutS("*source", "handle"), 1;
002134  002338  // Syntax: res := file_Puts("*source", "handle"),
002135  002339  // Usage : res := file_Puts(mystring, hnd1);
002136  002340  // Notes : returns number of characters written
002137  002341  //       :
002138  002342        
002139  002343  func file_GetS("*string", "size", "handle"), 1;
002140  002344  // Syntax: res := file_Gets("*string", "size", "handle");
002141  002345  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
002142  002346  // Notes : get a string from a file
002143  002347  //       : returns pointer to string or null if failed.
002144  002348  //       : file_GetS(...) automatically appends a null-terminator to the data read.
002145  002349  //       : NB:- only reads up to "size-1" characters into "string"
002146  002350  //       : file_GetS(...) will stop reading when any of the following conditions are true:
002147  002351  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
002148  002352  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
002149  002353  //       : C] It reaches the end of file
002150  002354  //       : D] A read error occurs.
002151  002355        
002152  002356        
002153  002357  func file_Erase("fname"), 1;
002154  002358  // Syntax: res := file_Erase("fname");
002155  002359  // Usage : res := file_Erase("myfile.txt");
002156  002360  // Notes : returns true if successful
002157  002361  //       :
002158  002362        
002159  002363  func file_Rewind("handle"), 1;
002160  002364  // Syntax: res := file_Rewind("handle");
002161  002365  // Usage : res := file_Rewind(hnd1);
002162  002366  // Notes : returns true if file rewound ok (usually ignored)
002163  002367  //       : resets the file pointer the the beginning of the open file.
002164  002368        
002165  002369  func file_LoadFunction("fname.4xe"), 1;
002166  002370  // Syntax: res := file_LoadFunction("fname.4fn");
002167  002371  // Usage : myfunc := file_LoadFunction(myfuncname);
002168  002372  // Notes : Load a function or program from disk and
002169  002373  //       : return a function pointer to the allocation.
002170  002374  //       : The function can then be invoked just like any other
002171  002375  //       : function would be called via a function pointer.
002172  002376  //       : Parameters may be passed to it in a conventional way.
002173  002377  //       : The function may be discarded at any time when no
002174  002378  //       : longer required, thus freeing its memory resources.
002175  002379  //       : The loaded function can be discarded with mem_Free(..)
002176  002380  //       : eg:
002177  002381  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
002178  002382  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
002179  002383  //       : then elsewhere in your program:-
002180  002384  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
002181  002385  //       : if(res == QUIT_APPLICATION) goto exitApp;
002182  002386  //       : Later in your program, when popupWindow is no longer
002183  002387  //       : required for the application:-
002184  002388  //       : res := mem_Free(popupWindow);
002185  002389  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
002186  002390  //       : The callers stack is shared by the loaded function,
002187  002391  //       : however any global variables in the loaded function
002188  002392  //       : are private to that function.
002189  002393  //
002190  002394        
002191  002395  func file_Run("fname.4xe", "arglistptr"), 1;
002192  002396  // Syntax: res := file_Run("fname.4xe","arglistptr");
002193  002397  // Usage : res := file_Run(fname, argptr);
002194  002398  // Notes : current program releases any allocated memory but
002195  002399  //       : retains the stack and global memory.
002196  002400  //       : If arglistptr is 0, no arguments are passed, else
002197  002401  //       : arglist points to an array, the first element being
002198  002402  //       : the number of elements in the array.
002199  002403  //       : func 'main' in the called program accepts
002200  002404  //       : the arguments, if any. THe arguments can only
002201  002405  //       : be passed by value, no pointers or references can be
002202  002406  //       : used as all memory is cleared before the file
002203  002407  //       : is loaded. Refer to file_Exec and file_LoadFunction
002204  002408  //       : for functions that can pass by reference.
002205  002409        
002206  002410  func file_Exec("fname.4xe", "arglistptr"), 1;
002207  002411  // Syntax: res := file_Exec("fname.4xe","arglistptr");
002208  002412  // Usage : res := file_Exec("fname.4xe","arglistptr");
002209  002413  // Notes : returns like a function, current program
002210  002414  //       : calling program is kept active and control returns to it.
002211  002415  //       : If arglistptr is 0, no arguments are passed, else
002212  002416  //       : arglist points to an array, the first element being
002213  002417  //       : the number of elements in the array.
002214  002418  //       : func 'main' in the called program accepts the arguments.
002215  002419  //       : This function is similar to file_LoadFunction(...), however,
002216  002420  //       : the function argument list is passed by pointer, and
002217  002421  //       : the memory consumed by the function is released as
002218  002422  //       : soon as the function completes.
002219  002423        
002220  002424  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
002221  002425  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
002222  002426  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
002223  002427  // Notes : Reads a control file to create an image list.
002224  002428  //       : Returns NULL if function fails.
002225  002429  //       : Returns a handle (pointer to the memory allocation) to the
002226  002430  //       : image control list that has been created.
002227  002431  //       : "fname1" is the control list filename "*.dat"
002228  002432  //       : "fname2" is the image filename "*.gci"
002229  002433        
002230  002434  // Notes : This function Calculates the size of a chunk of memory required for
002231  002435  //       : a image list and populates it from the image control file ("*.dat")
002232  002436  //       : therefore, when imagelist is no longer required, you must de-allocate
002233  002437  //       : the image list memory by using eg:- mem_Free(hImagelist);
002234  002438  //       : to restore the heap.
002235  002439  //       :
002236  002440  //       : mode 0:- it is assumed that there is a graphics file with the
002237  002441  //       : file extension "fname2.gci". In this case, the images have been stored
002238  002442  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
002239  002443  //       : "fname1.dat" file are saved in the image control so that the image control
002240  002444  //       : can open the file (*.gci) and us file_Seek to get to the position of the
002241  002445  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
002242  002446  //       : mode 0 builds the image control quickly as it only scans the *.dat file
002243  002447  //       : for the file offsets and save them in the relevant entries in the image control.
002244  002448  //       : The penalty is that images take longer to find when displayed due to file_Seek
002245  002449  //       : overheads.
002246  002450  //
002247  002451  //       : mode 1:- it is assumed that there is a graphics file with the
002248  002452  //       : file extension "fname2.gci". In this case, the images have been stored
002249  002453  //       : in a FAT16 file concurrently, and the offset of the images are saved
002250  002454  //       : in the image control so that image file (*.gci) can be mapped to directly.
002251  002455  //       : The absolute cluster/sector is mapped so file seek does not need to be called
002252  002456  //       : internally. This means that there is no seek time penalty, however, the
002253  002457  //       : image list takes a lot longer to build, as all the seeking is done at control
002254  002458  //       : build time.
002255  002459        
002256  002460  //       : mode 2:- the graphics file with the is placed in a partitioned area
002257  002461  //       : In this case, the images have been stored in a in a known raw area of the FAT16
002258  002462  //       : disk, and the absolute address of the images are saved in the DAT file
002259  002463  //       : This is the fastest operation of the image control as there is no seeking
002260  002464  //       : or other disk activity taking place.
002261  002465        
002262  002466  func file_Mount(), 1;
002263  002467  // Syntax: r := file_Mount();
002264  002468  // Usage : r := file_Mount();
002265  002469  // Notes : Create a control block for FAT16 and mount the File System
002266  002470        
002267  002471  func file_Unmount(), 0;
002268  002472  // Syntax: file_Unmount();
002269  002473  // Usage : file_Unmount();
002270  002474  // Notes : release any control block and buffers for FAT16
002271  002475  //       : and unmount the File System
002272  002476        
002273  002477  func file_PlayWAV("fname1"), 1;
002274  002478  // Syntax: file_PlayWAV("fname1");
002275  002479  // Usage : file_PlayWAV("ding.wav");
002276  002480  // Notes : Play a wave file with filename "fname1"
002277  002481  //       : This function automatically grabs a chunk
002278  002482  //       : of memory for a file buffer, and a wave
002279  002483  //       : buffer. The minimum memory requirement is
002280  002484  //       : about 580 bytes for the disk io service and
002281  002485  //       : a minimum wave buffer size of 1024. The siz
002282  002486  //       : of the wave buffer allocation
002283  002487  //       : can be increased by the snd_BufSize function.
002284  002488  //       : The default size 1024 bytes.
002285  002489  //       : NB the memory is only required during the
002286  002490  //       : duration of play, and is automatically
002287  002491  //       : released while not in use.
002288  002492  //       : See the Sound Class services for other associated controls.
002289  002493  //       : If there are no errors, returns number of blocks to play (1 to 32767)
002290  002494  //       : If errors occured, the folling is returned
002291  002495  //       : -7  : Insufficient memory available for WAV buffer and file
002292  002496  //       : -6  : cant play this rate
002293  002497  //       : -5  : no data chunk found in first rsector
002294  002498  //       : -4  : no format data
002295  002499  //       : -3  : no wave chunk signature
002296  002500  //       : -2  : bad wave file format
002297  002501  //       : -1  : file not found
002298  002502        
002299  002503        
002300  002504        
002301  002505  //------------------------------------------------------------------//
002302  002506  //        Sound Class Services
002303  002507  //------------------------------------------------------------------//
002304  002508        
002305  002509  func snd_Volume("var"), 0;
002306  002510  // Syntax: snd_Volume("var");
002307  002511  // Usage : snd_Volume(30);
002308  002512  // Notes : set sound playback volume.  Var must
002309  002513  //       : be in the range from 8 (min volume)
002310  002514  //       : to 127 (max volume). If var is less
002311  002515  //       : than 8 volume is set to 8, and if
002312  002516  //       : var > 127 it is set to 127.
002313  002517        
002314  002518  func snd_Pitch("pitch"), 1;
002315  002519  // func snd_Pitch("freq"), 1;
002316  002520  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
002317  002521  // Notes : sets the samples playback rate to a different frequency
002318  002522  //       : The minimum value is 4khz
002319  002523  //       : Setting the pitch to zero restores the original sample rate
002320  002524  //       : Return value is the samples original sample rate.
002321  002525        
002322  002526  func snd_BufSize("var"), 0;
002323  002527  // Syntax: snd_BufSize("var");
002324  002528  // Usage : snd_BufSize(2);
002325  002529  // Notes : specify the a memory chunk size for the wavefile buffer.
002326  002530  //       : default size 1024 bytes.
002327  002531  //       : 0 = 1024 bytes (default)
002328  002532  //       : 1 = 2048 bytes
002329  002533  //       : 2 = 4096 bytes
002330  002534  //       : 3 = 8192 bytes
002331  002535        
002332  002536  func snd_Stop(), 0;
002333  002537  // Syntax: snd_Stop();
002334  002538  // Usage : snd_Stop();
002335  002539  // Notes : stop any sound that is playing, releasing
002336  002540  //       : buffers and closes any open wav file.
002337  002541        
002338  002542  func snd_Pause(), 0;
002339  002543  // Syntax: snd_Pause();
002340  002544  // Usage : snd_Pause();
002341  002545  // Notes : pauses any sound that is playing, does nothing
002342  002546  //       : until sound is resumed with snd_Continue().
002343  002547  //       : The sample cam be terminated with snd_Stop.
002344  002548  //       : buffers and closes any open wav file.
002345  002549        
002346  002550  func snd_Continue(), 0;
002347  002551  // Syntax: snd_Continue();
002348  002552  // Usage : snd_Continue();
002349  002553  // Notes : resume any sound that is paused by snd_Pause.
002350  002554        
002351  002555  func snd_Playing(), 1;
002352  002556  // Syntax: snd_Playing();
002353  002557  // Usage : r := snd_Playing();
002354  002558  // Notes : returns 0 if sound has finished playing,
002355  002559  //       : else return number of 512 byte blocks to go.
002356  002560        
002357  002561        
002358  002562        
002359  002563  //------------------------------------------------------------------//
002360  002564  //        String Class Services
002361  002565  //------------------------------------------------------------------//
002362  002566        
002363  002567  func str_Ptr("&var"), 1;
002364  002568  // Syntax: str_Ptr(&var);
002365  002569  // Usage : p := str_Ptr(&var);
002366  002570  // Notes : return a byte pointer to a word region
002367  002571        
002368  002572  func str_GetD("&ptr", "&var"), 1;
002369  002573  // Syntax: str_GetD(&ptr, &var);
002370  002574  // Usage : ok := str_GetD(&ptr, &var);
002371  002575  // Notes : convert number in a string to DWORD ( myvar[2] )
002372  002576  //       : returns true if function succeeds, advancing ptr
002373  002577        
002374  002578  func str_GetW("&ptr", "&var"), 1;
002375  002579  // Syntax: str_GetW(&ptr, &var);
002376  002580  // Usage : ok := str_GetW(&ptr, &var);
002377  002581  // Notes : convert number in a string to WORD ( myvar )
002378  002582  //       : returns true if function succeeds, advancing ptr
002379  002583        
002380  002584  func str_GetHexW("&ptr", "&var"), 1;
002381  002585  // Syntax: str_GetHexW(&ptr, &var);
002382  002586  // Usage : ok := str_GetHexW(&ptr, &var);
002383  002587  // Notes : convert HEX number in a string to WORD ( myvar )
002384  002588  //       : returns true if function succeeds, advancing ptr
002385  002589        
002386  002590  func str_GetC("&ptr", "&var"), 1;
002387  002591  // Syntax: str_GetC(&ptr, &var);
002388  002592  // Usage : ok := str_GetC(&ptr, &var);
002389  002593  // Notes : get a valid ascii char in a string to WORD ( myvar )
002390  002594  //       : returns true if function succeeds, advancing ptr
002391  002595        
002392  002596  func str_GetByte("ptr"), 1;
002393  002597  // Syntax: str_GetByte(ptr);
002394  002598  // Usage : myvar := str_GetByte(ptr);
002395  002599  // Notes : get a byte to myvar
002396  002600  //       : returns value
002397  002601        
002398  002602  func str_GetWord("ptr"), 1;
002399  002603  // Syntax: GetWord(ptr);
002400  002604  // Usage : GetWord(ptr);
002401  002605  // Notes : get a word to myvar
002402  002606  //       : returns value
002403  002607        
002404  002608  func str_PutByte("ptr","val"), 0;
002405  002609  // Syntax: str_PutByte(ptr);
002406  002610  // Usage : myvar := str_PutByte(ptr);
002407  002611  // Notes : put a byte at ptr
002408  002612  //       : returns value
002409  002613        
002410  002614  func str_PutWord("ptr","val"), 0;
002411  002615  // Syntax: str_PutWord("ptr","val");
002412  002616  // Usage : str_PutWord(p,100);
002413  002617  // Notes : put word 100 at current pointer location
002414  002618  //       : returns value
002415  002619        
002416  002620  func str_Match("&ptr", "*str"), 1;
002417  002621  // Syntax: str_Match(&ptr, *str);
002418  002622  // Usage : r := str_Match(&p, "hello");
002419  002623  // Notes : Case sensitive match
002420  002624  //       : returns true if function succeded, andvancing pointer to position past
002421  002625  //       : the matched item. Note that any whitespace characters are skipped
002422  002626  //       : in the source string prior to the test.
002423  002627        
002424  002628  func str_MatchI("&ptr", "*str"), 1;
002425  002629  // Syntax: str_MatchI(&ptr, *str);
002426  002630  // Usage : r := str_MatchI(&p, "hello");
002427  002631  // Notes : Case insensitive match
002428  002632  //       : returns true if function succeded, andvancing pointer to position past
002429  002633  //       : the matched item. Note that any whitespace characters are skipped
002430  002634  //       : in the source string prior to the test.
002431  002635        
002432  002636  func str_Find("&ptr", "*str"), 1;
002433  002637  // Syntax: str_Find(&ptr, *str);
002434  002638  // Usage : n := str_Find(&p, "hello");
002435  002639  // Notes : given the address of a pointer to a source string as the
002436  002640  //       : first argument, and a pointer to a test string as the second
002437  002641  //       : argument, attempt to find the position of the matching string
002438  002642  //       : in the source string. The test is performed with case sensitivity.
002439  002643  //       : return 0 if not found, else returns the address of the first
002440  002644  //       : character of the match. NB:- The source pointer is not altered.
002441  002645        
002442  002646  func str_FindI("&ptr", "*str"), 1;
002443  002647  // Syntax: str_Find(&ptr, *str);
002444  002648  // Usage : n := str_Find(&p, "hello");
002445  002649  // Notes : given the address of a pointer to a source string as the
002446  002650  //       : first argument, and a pointer to a test string as the second
002447  002651  //       : argument, attempt to find the position of the matching string
002448  002652  //       : in the source string. The test is performed with no case
002449  002653  //       : sensitivity, eg upper and lower case chars are accepted.
002450  002654  //       : return 0 if not found, else returns the address of the first
002451  002655  //       : character of the match. NB:- The source pointer is not altered.
002452  002656        
002453  002657  func str_Length("ptr"), 1;
002454  002658  // Syntax: str_Length(ptr);
002455  002659  // Usage : len := str_Ptr(mystring);
002456  002660  // Notes : return the length of a byte aligned string excluding terminator
002457  002661        
002458  002662  func str_Printf("&ptr", "*format"), 1;
002459  002663  // Syntax: str_Printf("&ptr", "*format");
002460  002664  // Usage : r := str_Printf(&p, "%8s");
002461  002665  // Notes : refer to documentation
002462  002666  //       :
002463  002667        
002464  002668  func str_Cat("dest","src"), 1;
002465  002669  // Syntax: str_Append("&dest","&src");
002466  002670  // Usage : str_Append(&buf,"Hello");
002467  002671  // Notes : Appends a copy of the source string to the destination string.
002468  002672  //       : The terminating null character in destination is overwritten by
002469  002673  //       : the first character of source, and a new null-character is appended
002470  002674  //       : at the end of the new string formed by the concatenation of both in destination.
002471  002675  //       : returns destination.
002472  002676        
002473  002677  func str_CatN("dest","src","count"), 1;
002474  002678  // Syntax: str_Append("&dest","&src","count");
002475  002679  // Usage : str_Append(&buf,"Monday",3);
002476  002680  // Notes : Appends a copy of the source string to the destination string.
002477  002681  //       : The number of characters copied is limited by "count".
002478  002682  //       : The terminating null character in destination is overwritten by
002479  002683  //       : the first character of source, and a new null-character is appended
002480  002684  //       : at the end of the new string formed by the concatenation of both in destination.
002481  002685  //       : returns destination.
002482  002686        
002483  002687        
002484  002688  func sys_StoreTouchCalibration(), 1;
002485  002689  // Syntax: sys_StoreTouchCalibration();
002486  002690  // Usage : r := sys_StoreTouchCalibration();
002487  002691  // Notes : Store the touch calibration values in non-volatile memory.
002488  002692  //       : Returns true if the values have been accepted and stored,
002489  002693  //       : else returns false if write could not be performed, or
002490  002694  //       : touch calibration values are improbable.
002491  002695  //       : The values that are stored are obtained from:-
002492  002696  //     : TOUCH_XMINCAL             78  // touch calibration value
002493  002697  //     : TOUCH_YMINCAL             79  // touch calibration value
002494  002698  //       : TOUCH_XMAXCAL             80  // touch calibration value
002495  002699  //       : TOUCH_YMAXCAL             81  // touch calibration value
002496  002700  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
002497  002701  //       : This function is not supported on uVGA, Capicitive touch
002498  002702  //       : and 4.3" resistive touch modules.
002499  002703        
002500  002704        
002501  002705  func unicode_page("charbeg","charend","charoffset"), 1;
002502  002706  // Syntax: unicode_page("charbeg","charend","charoffset");
002503  002707  // Usage : eg:  F_Traditional_0x20_0xFF
002504  002708  // Notes : After selecting a unicode image control with txt_FontID,
002505  002709  //       : this function is called to set the required font within the
002506  002710  //       : unicode set. The file "Unicode.inc" contains wrappers for
002507  002711  //       : this function, and it is not normally called directly.
002508  002712  //       : Returns count of characters in the set.
002509  002713  //       : Refer to "Unicode.inc" for further information.
002510  002714        
002511  002715        
002512  002716  func EVE_SP(), 1;
002513  002717  // Syntax: EVE_SP();
002514  002718  // Usage : eg:  print(EVE_SP());
002515  002719  // Notes : Used for debugging to assess the current stack level,
002516  002720  //       : mainly for checking stack leaks
002517  002721        
002518  002722  func EVE_SSIZE(), 1;
002519  002723  // Syntax: EVE_SSIZE();
002520  002724  // Usage : eg:  print(EVE_SSIZE());
002521  002725  // Notes : Used to get the stack size,
002522  002726  //       : mainly for debugging purposes
002523  002727        
002524  002728        
002525  002729  // uVGAII extended functions
002526  002730  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
002527  002731  // Syntax: disp_Sync(line);
002528  002732  // Usage : disp_Sync(480);
002529  002733  // Notes : Waits till the hardware gets to a certain line.
002530  002734  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
002531  002735  //       : Some experimentation may be needed to find an optimum line for disp_Sync
002532  002736  //       : depending on the graphics operation. The higher the value, the slower
002533  002737  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
002534  002738  //       : within the vertical retrace period) where it will just 'hang up' stopping the
002535  002739  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
002536  002740  //       : be slowest (as its actually right at the end of the blanking period) and 508
002537  002741  //       : will cause a hangup situation as it is above the highes scanline value.
002538  002742  //       : Currently, this function is only supported on displays with SSD1963 driver.
002539  002743        
002540  002744        
002541  002745  // New functions added to PmmC v2.8
002542  002746  //================================================================
002543  002747  func CY(), 1;
002544  002748  // Syntax: CY();
002545  002749  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
002546  002750  //       : print(myvar," "CY(),"\n");           // carry = 1
002547  002751  // Notes : This function returns the carry status of an
002548  002752  // unsigned overflow from any 16 or 32bit additions or sutractions.
002549  002753  //================================================================
002550  002754        
002551  002755        
002552  002756  //================================================================
002553  002757  func str_ByteMove("src", "dest", "count"), 1;
002554  002758  // func str_ByteMove("src", "dest", "count"), 1;
002555  002759  // Syntax   : str_ByteMove(src, dest, bytecount);
002556  002760  // Input    : STR *source points to byte aligned source.
002557  002761  //          : STR *dest   points to byte aligned destination.
002558  002762  //          : VAR count   number of bytes to transfer.
002559  002763  // Usage    : nextpos := str_ByteMove(s, d, 100);
002560  002764  // Notes    : copy bytes from "src" to "dest", stopping only
002561  002765  //          : when "count" is exhausted.
002562  002766  //          : No terminator is appended, it is purely a
002563  002767  //          : byte copy, and any zeroes encountered will
002564  002768  //          : also be copied.
002565  002769  // Returns  : returns a pointer to the end of the destination
002566  002770  //          : (which is "dest" + "count")
002567  002771  //================================================================
002568  002772        
002569  002773        
002570  002774  //================================================================
002571  002775  func str_Copy("dest", "src"), 1;
002572  002776  // Syntax   : str_Copy(dest, src);
002573  002777  // Input    : STR *dest   points to byte aligned destination.
002574  002778  //          : STR *source points to byte aligned source.
002575  002779  // Usage    : nextplace := str_Copy(d, s);
002576  002780  // Notes    : copy a string from "src" to "dest", stopping only
002577  002781  //          : when the end of source string "src" is encountered
002578  002782  //          : (0x00 terminator).
002579  002783  //          : The terminator is always appended, even if "src" is
002580  002784  //          : an empty string.
002581  002785  // Returns  : returns a pointer to the 0x00 string terminator at
002582  002786  //          : end of "dest" (which is "dest" + str_Length(src); )
002583  002787  //================================================================
002584  002788        
002585  002789  //================================================================
002586  002790  func str_CopyN("dest", "src", "count"), 1;
002587  002791  // Syntax   : str_CopyN(dest, src, bytecount);
002588  002792  // Input    : STR *dest   points to byte aligned destination.
002589  002793  //          : STR *source points to byte aligned source.
002590  002794  //          : VAR count   max number of chars to copy.
002591  002795  // Usage    : nextplace := str_CopyN(d, s, 100);
002592  002796  // Notes    : copy a string from "src" to "dest", stopping only
002593  002797  //          : when "count" is exhausted, or end of source
002594  002798  //          : string "str" is encountered (0x00 string terminator).
002595  002799  //          : The terminator is always appended, even if
002596  002800  //          : "count" is zero, or "src" is a null string.
002597  002801  // Returns  : returns a pointer to the 0x00 string terminator
002598  002802  //          : (which is "dest" + whatever was copied)
002599  002803  //================================================================
002600  002804        
002601  002805  //================================================================
002602  002806  func umul_1616("&res32", "val1", "val2"), 1;
002603  002807  // Syntax   : umul_1616(&res32, varA, varB);
002604  002808  // Input    : DWORD *result   points to 32bit result register.
002605  002809  //          : VAR   val1  16bit register or constant
002606  002810  //          : VAR   val2  16bit register or constant
002607  002811  // Usage    : var res32[2];
002608  002812  //          : umul_1616(&res32, myvar, 50000);
002609  002813  // Notes    : performs an unsigned multiply of 2 x 16bit values
002610  002814  //          : placing the 32bit result in a 2 word array.
002611  002815  // Returns  : the pointer to the 32bit result.
002612  002816  //          : carry and overflow are not affected.
002613  002817  //================================================================
002614  002818        
002615  002819  //================================================================
002616  002820  func uadd_3232("&res32", "&val1", "&val2"), 1;
002617  002821  // Syntax   : cmp_3232(&res32, &varA, &varB);
002618  002822  // Input    : DWORD *res32 points to optional result (or zero for compare)
002619  002823  //          : DWORD *val1 points to 32bit augend
002620  002824  //          : DWORD *val2 points to 32bit addend
002621  002825  // Usage    : var res32[2];
002622  002826  //          : res := cmp_3232(res32, val1, val2);
002623  002827  // Notes    : performs an unsigned addition of 2 x 32bit values
002624  002828  //          : placing the 32bit result in a 2 word array.
002625  002829  // Returns  : returns 1 on 32bit unsigned overflow (carry).
002626  002830  //          ; carry flag is also set on 32bit unsigned overflow
002627  002831  //          ; and can be read with the CY() function.
002628  002832  //================================================================
002629  002833        
002630  002834  //================================================================
002631  002835  func usub_3232("&res32", "&val1", "&val2"), 1;
002632  002836  // Syntax   : cmp_3232(&res32, &varA, &varB);
002633  002837  // Input    : DWORD *res32 points to optional result (or zero for compare)
002634  002838  //          : DWORD *val1 points to first 32bit minuend
002635  002839  //          : DWORD *val2 points to 32bit subtrahend
002636  002840  // Usage    : var res32[2];
002637  002841  //          : res := cmp_3232(res32, val1, val2);
002638  002842  // Notes    : performs an unsigned subtraction of 2 x 32bit values
002639  002843  //          : placing the 32bit result in a 2 word array.
002640  002844  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
002641  002845  //          ; carry flag is also set on 32bit unsigned underflow
002642  002846  //          ; and can be read with the CY() function.
002643  002847  //================================================================
002644  002848        
002645  002849  //================================================================
002646  002850  func ucmp_3232("&val1", "&val2"), 1;
002647  002851  // Syntax   : cmp_3232(&varA, &varB);
002648  002852  // Input    : DWORD *val1 points to 32bit minuend
002649  002853  //          : DWORD *val2 points to 32bit sutrahend
002650  002854  // Usage    : res := cmp_3232(val1, val2);
002651  002855  // Notes    : performs an unsigned comparison of 2 x 32bit values.
002652  002856  //          : The result of the subtraction is returned.
002653  002857  // Returns  : 0  if equal
002654  002858  //          : 1  if val1 > val2
002655  002859  //          : -1 if val1 < val2
002656  002860  //          : This function does not affect the carry flag.
002657  002861  //================================================================
002658  002862        
002659  002863  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v3.8
002660  002864  // Syntax: disp_Disconnect();                  New in v3.8
002661  002865  // Usage : disp_Disconnect();
002662  002866  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
002663  002867  //       : its lowest possible power consumption. Use after disabling peripheral power
002664  002868  //       : to ensure the minimal power usage by the display.
002665  002869  //       : disp_Init() should be used to reinitialise the display.
002666  002870        
002667  002871  func reserved(), 0;                            
002668  002872        
002669  002873  func sys_DeepSleep("units"), 1;
002670  002874  // Syntax: t := sys_DeepSleep("units");       New in v3.8
002671  002875  // Usage : t := sys_DeepSleep(10);
002672  002876  // Notes : sets the display and processor into lowest power mode for a period of time.
002673  002877  //       : When returning from DeepSleep the display should be reinitialised
002674  002878  //       : with disp_Init().
002675  002879  //       : Touching the touch screen will also wake from sleep.
002676  002880  //       : Returns remaining sleep units.
002677  002881        
002678  002882  //------------------------------------------------------------------//
002679  002883  // CONSTANTS
002680  002884  //------------------------------------------------------------------//
002681  002885        
002682  002886  // generic constants
002683  002887  #CONST
002684  002896  #END
002685  002897        
002686  002898  //------------------------------------------------------------------------------
002687  002899  // Pin related constants
002688  002900  //------------------------------------------------------------------------------
002689  002901  #CONST
002690  002919  #END
002691  002920        
002692  002921  //------------------------------------------------------------------------------
002693  002922  //gfx_Set() related constants
002694  002923  //------------------------------------------------------------------------------
002695  002924  #CONST
002696  002941  #END
002697  002942        
002698  002943        
002699  002944  //gfx_Get() related constants
002700  002945  #CONST
002701  002954  #END
002702  002955        
002703  002956        
002704  002957        
002705  002958        
002706  002959  #CONST
002707  002972  #END
002708  002973        
002709  002974        
002710  002975  #CONST
002711  002998  #END
002712  002999        
002713  003000  //------------------------------------------------------------------------------
002714  003001  //txt_Set() related constants
002715  003002  //------------------------------------------------------------------------------
002716  003003  #CONST
002717  003022  #END
002718  003023        
002719  003024        
002720  003025        
002721  003026  //------------------------------------------------------------------------------
002722  003027  //txt_Set() related arguments
002723  003028  // NB:- FONT4 must be inherited if required,
002724  003029  // eg #inherit "FONT4.fnt"
002725  003030  //------------------------------------------------------------------------------
002726  003031  #CONST
002727  003043  #END
002728  003044        
002729  003045        
002730  003046        
002731  003047  //touch_Set() related constants
002732  003048  #CONST
002733  003052  #END
002734  003053        
002735  003054  //touch_Get() related constants
002736  003055  #CONST
002737  003063  #END
002738  003064        
002739  003065  // image control offset related constants
002740  003066  #CONST
002741  003073  #END
002742  003074        
002743  003075  // image attribute flags
002744  003076  // for img_SetAttributes(...) and img_ClearAttributes(...)
002745  003077  #CONST
002746  003091  #END
002747  003092        
002748  003093        
002749  003094  #constant ALL 0xFFFF // argument for img_xxx functions to update all images
002750  003094  #constant ALL 0xFFFF // argument for img_xxx functions to update all images
002751  003095        
002752  003096  // image control entry offsets
002753  003097  #CONST
002754  003112  #END
002755  003113        
002756  003114  #CONST
002757  003132  #END
002758  003133        
002759  003134        
002760  003135        
002761  003136        
002762  003137  #CONST
002763  003157  #END
002764  003158        
002765  003159        
002766  003160        
002767  003161  // timer control  related constants
002768  003162  #CONST
002769  003171  #END
002770  003172        
002771  003173  // I2C timing related constants
002772  003174  #CONST
002773  003178  #END
002774  003179        
002775  003180        
002776  003181  // spi_Init(...)  mode arguments
002777  003182  #CONST
002778  003192  #END
002779  003193        
002780  003194  //------------------------------------------------------------------------------
002781  003195  // system WORD variables accesible with peekW and pokeW or pointer access
002782  003196  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
002783  003197  // can also be accessed with peekW and pokeW
002784  003198  //------------------------------------------------------------------------------
002785  003199        
002786  003200  #CONST
002787  003294  #END
002788  003295        
002789  003296  //------------------------------------------------------------------------------
002790  003297  // FILEIO Error Code Constants
002791  003298  //------------------------------------------------------------------------------
002792  003299  #CONST
002793  003325  #END
002794  003326        
002795  003327  //==================================================================================================
002796  003328        
002797  003329        
002798  003330        
002799  000013      #ENDIF
002800  000014        
002801  000015        
002802  000016      #CONST
002803  000072      #END
002804  000073        
002805  000074        
002806  000075  //===========================================================================================
002807  000076        
002808  000077        
002809  000002        
002810  000003        
002811  000004  // generated 2022. 05. 17. 10:38:13
002812  000005        
002813  000006  #MODE RUNFLASH
002814  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

002815  000008  #inherit "4DGL_16bitColours.fnc"
002816  000008  #inherit "4DGL_16bitColours.fnc"
002817  000004  */
002818  000005        
002819  000006        
002820  000007        
002821  000008  #CONST
002822  000149  #END
002823  000150        
002824  000009        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

002825  000010  #inherit "VisualConst.inc"
002826  000010  #inherit "VisualConst.inc"
002827  000001  // Line Patterns
002828  000002  #constant  LPCOARSE    0xF0F0
002829  000002  #constant  LPCOARSE    0xF0F0
002830  000003  #constant  LPMEDIUM    0x3333
002831  000003  #constant  LPMEDIUM    0x3333
002832  000004  #constant  LPFINE      0xAAAA
002833  000004  #constant  LPFINE      0xAAAA
002834  000005  #constant  LPDASHDOT   0x03CF
002835  000005  #constant  LPDASHDOT   0x03CF
002836  000006  #constant  LPDASHDOTDOT 0x0333
002837  000006  #constant  LPDASHDOTDOT 0x0333
002838  000007  #constant  LPSOLID     0x0000
002839  000007  #constant  LPSOLID     0x0000
002840  000011        
002841  000012        
file D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_boxConst.inc

002842  000013  #inherit "resp_boxConst.inc"
002843  000013  #inherit "resp_boxConst.inc"
002844  000001  // File generated 2022. 05. 17. 10:37:54
002845  000002  // Warning! This is a generated file, any manual changes will be
002846  000003  // lost during the next generation.
002847  000004        
002848  000005  #constant  Strings0Count    1
002849  000005  #constant  Strings0Count    1
002850  000006  #constant  Strings0Size     12
002851  000006  #constant  Strings0Size     12
002852  000007  #constant  Strings1Count    1
002853  000007  #constant  Strings1Count    1
002854  000008  #constant  Strings1Size     12
002855  000008  #constant  Strings1Size     12
002856  000009  #constant  Strings16Count    1
002857  000009  #constant  Strings16Count    1
002858  000010  #constant  Strings16Size     12
002859  000010  #constant  Strings16Size     12
002860  000011  #constant  Strings17Count    1
002861  000011  #constant  Strings17Count    1
002862  000012  #constant  Strings17Size     12
002863  000012  #constant  Strings17Size     12
002864  000013  #constant  Strings14Count    1
002865  000013  #constant  Strings14Count    1
002866  000014  #constant  Strings14Size     12
002867  000014  #constant  Strings14Size     12
002868  000015  #constant  Strings15Count    1
002869  000015  #constant  Strings15Count    1
002870  000016  #constant  Strings15Size     12
002871  000016  #constant  Strings15Size     12
002872  000017  #constant  Strings2Count    2
002873  000017  #constant  Strings2Count    2
002874  000018  #constant  Strings2Size     4
002875  000018  #constant  Strings2Size     4
002876  000019  #constant  Strings3Count    2
002877  000019  #constant  Strings3Count    2
002878  000020  #constant  Strings3Size     4
002879  000020  #constant  Strings3Size     4
002880  000021  #constant  Strings4Count    0
002881  000021  #constant  Strings4Count    0
002882  000022  #constant  Strings4Size     1
002883  000022  #constant  Strings4Size     1
002884  000023  #constant  Strings5Count    0
002885  000023  #constant  Strings5Count    0
002886  000024  #constant  Strings5Size     1
002887  000024  #constant  Strings5Size     1
002888  000025  #constant  Strings6Count    0
002889  000025  #constant  Strings6Count    0
002890  000026  #constant  Strings6Size     1
002891  000026  #constant  Strings6Size     1
002892  000027  #constant  Strings7Count    0
002893  000027  #constant  Strings7Count    0
002894  000028  #constant  Strings7Size     1
002895  000028  #constant  Strings7Size     1
002896  000029  #constant  Strings8Count    0
002897  000029  #constant  Strings8Count    0
002898  000030  #constant  Strings8Size     1
002899  000030  #constant  Strings8Size     1
002900  000031  #constant  Strings9Count    0
002901  000031  #constant  Strings9Count    0
002902  000032  #constant  Strings9Size     1
002903  000032  #constant  Strings9Size     1
002904  000033  #constant  Strings10Count    7
002905  000033  #constant  Strings10Count    7
002906  000034  #constant  Strings10Size     39
002907  000034  #constant  Strings10Size     39
002908  000035  #constant  Strings11Count    0
002909  000035  #constant  Strings11Count    0
002910  000036  #constant  Strings11Size     1
002911  000036  #constant  Strings11Size     1
002912  000037  #constant  Strings12Count    1
002913  000037  #constant  Strings12Count    1
002914  000038  #constant  Strings12Size     138
002915  000038  #constant  Strings12Size     138
002916  000039  #constant  Strings13Count    1
002917  000039  #constant  Strings13Count    1
002918  000040  #constant  Strings13Size     15
002919  000040  #constant  Strings13Size     15
002920  000041  #constant  Strings19Count    1
002921  000041  #constant  Strings19Count    1
002922  000042  #constant  Strings19Size     34
002923  000042  #constant  Strings19Size     34
002924  000043  #constant  Strings18Count    3
002925  000043  #constant  Strings18Count    3
002926  000044  #constant  Strings18Size     103
002927  000044  #constant  Strings18Size     103
002928  000047  #END
2929  0013
2930  0014
2931  0015
2932  0016
2933  0017
2934  0018
2935  0019
2936  001A
2937  001B
2938  001C
2939  001D
2940  001E
2941  001F
002942  000048        
002943  000049        
002944  000050  #constant  IFONT_OFFSET     18
002945  000050  #constant  IFONT_OFFSET     18
002946  000051  // object indexes into ImageControl
002947  000052  #CONST
002948  000129  #END
002949  000130        
002950  000131        
002951  000132  #constant  Strings0StartH   0x0
002952  000132  #constant  Strings0StartH   0x0
002953  000133  #constant  Strings0StartL   0x0
002954  000133  #constant  Strings0StartL   0x0
002955  000134  #constant  Strings1StartH   0x0
002956  000134  #constant  Strings1StartH   0x0
002957  000135  #constant  Strings1StartL   0x200
002958  000135  #constant  Strings1StartL   0x200
002959  000136  #constant  Strings16StartH   0x0
002960  000136  #constant  Strings16StartH   0x0
002961  000137  #constant  Strings16StartL   0x400
002962  000137  #constant  Strings16StartL   0x400
002963  000138  #constant  Strings17StartH   0x0
002964  000138  #constant  Strings17StartH   0x0
002965  000139  #constant  Strings17StartL   0x600
002966  000139  #constant  Strings17StartL   0x600
002967  000140  #constant  Strings14StartH   0x0
002968  000140  #constant  Strings14StartH   0x0
002969  000141  #constant  Strings14StartL   0x800
002970  000141  #constant  Strings14StartL   0x800
002971  000142  #constant  Strings15StartH   0x0
002972  000142  #constant  Strings15StartH   0x0
002973  000143  #constant  Strings15StartL   0xA00
002974  000143  #constant  Strings15StartL   0xA00
002975  000144  #constant  Strings2StartH   0x0
002976  000144  #constant  Strings2StartH   0x0
002977  000145  #constant  Strings2StartL   0xC00
002978  000145  #constant  Strings2StartL   0xC00
002979  000146  #constant  Strings3StartH   0x0
002980  000146  #constant  Strings3StartH   0x0
002981  000147  #constant  Strings3StartL   0xE00
002982  000147  #constant  Strings3StartL   0xE00
002983  000148  #constant  Strings4StartH   0x0
002984  000148  #constant  Strings4StartH   0x0
002985  000149  #constant  Strings4StartL   0x1000
002986  000149  #constant  Strings4StartL   0x1000
002987  000150  #constant  Strings5StartH   0x0
002988  000150  #constant  Strings5StartH   0x0
002989  000151  #constant  Strings5StartL   0x1200
002990  000151  #constant  Strings5StartL   0x1200
002991  000152  #constant  Strings6StartH   0x0
002992  000152  #constant  Strings6StartH   0x0
002993  000153  #constant  Strings6StartL   0x1400
002994  000153  #constant  Strings6StartL   0x1400
002995  000154  #constant  Strings7StartH   0x0
002996  000154  #constant  Strings7StartH   0x0
002997  000155  #constant  Strings7StartL   0x1600
002998  000155  #constant  Strings7StartL   0x1600
002999  000156  #constant  Strings8StartH   0x0
003000  000156  #constant  Strings8StartH   0x0
003001  000157  #constant  Strings8StartL   0x1800
003002  000157  #constant  Strings8StartL   0x1800
003003  000158  #constant  Strings9StartH   0x0
003004  000158  #constant  Strings9StartH   0x0
003005  000159  #constant  Strings9StartL   0x1A00
003006  000159  #constant  Strings9StartL   0x1A00
003007  000160  #constant  Strings10StartH   0x0
003008  000160  #constant  Strings10StartH   0x0
003009  000161  #constant  Strings10StartL   0x1C00
003010  000161  #constant  Strings10StartL   0x1C00
003011  000162  #constant  Strings11StartH   0x0
003012  000162  #constant  Strings11StartH   0x0
003013  000163  #constant  Strings11StartL   0x1E00
003014  000163  #constant  Strings11StartL   0x1E00
003015  000164  #constant  Strings12StartH   0x0
003016  000164  #constant  Strings12StartH   0x0
003017  000165  #constant  Strings12StartL   0x2000
003018  000165  #constant  Strings12StartL   0x2000
003019  000166  #constant  Strings13StartH   0x0
003020  000166  #constant  Strings13StartH   0x0
003021  000167  #constant  Strings13StartL   0x2200
003022  000167  #constant  Strings13StartL   0x2200
003023  000168  #constant  Strings19StartH   0x0
003024  000168  #constant  Strings19StartH   0x0
003025  000169  #constant  Strings19StartL   0x2400
003026  000169  #constant  Strings19StartL   0x2400
003027  000170  #constant  Strings18StartH   0x0
003028  000170  #constant  Strings18StartH   0x0
003029  000171  #constant  Strings18StartL   0x2600
003030  000171  #constant  Strings18StartL   0x2600
003031  000172        
003032  000173  #IFNOT EXISTS NOGLOBALS
003033  000174  var hndl ;
003034  000175  var hFonts[20] ;
003035  000176  var oKeyboard0[12] := [-1, 0, 0, 0, 0, 255, 255, 255, 255, 255, 13, 0] ;
3036  002B
3037  002C
3038  002D
3039  002E
3040  002F
3041  0030
3042  0031
3043  0032
3044  0033
3045  0034
3046  0035
3047  0036
3048  0037
3049  0038
3050  0039
3051  003A
3052  003B
3053  003C
3054  003D
3055  003E
3056  003F
3057  0040
3058  0041
3059  0042
003060  000177  #ENDIF
003061  000014        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

003062  000015  #inherit "CLPrintStrings.inc"
003063  000015  #inherit "CLPrintStrings.inc"
003064  000001  func PrintStrings(var ID, var *msgid, var String)
003065  000002      var StringID, i, ch, offs32[2], res32[2];
003066  000003      StringID := oStringss[1+ID] ;
003067  000004      if (String)
003068  000005          stringsCV[ID] := -1 ;
003069  000006      else
003070  000007          stringsCV[ID] := msgid ;
003071  000008      endif
003072  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
003073  000010      txt_FontID(hFonts[ID]) ;
003074  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
003075  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
003076  000013        
003077  000014      if (*(StringID + Ofs_String_Transparent))
003078  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
003079  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
003080  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
003081  000018      else
003082  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
003083  000020          gfx_Clipping(ON) ;
003084  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
003085  000022          gfx_Clipping(OFF) ;
003086  000023        
003087  000024      endif
003088  000025        
003089  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
003090  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
003091  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
003092  000029        
003093  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
003094  000031        
003095  000032      if (String)
003096  000033          i := 0 ;
003097  000034          ch := msgid[i++] ;
003098  000035          while (ch != 0)
003099  000036              putch(ch) ;
003100  000037              ch := msgid[i++] ;
003101  000038          wend
003102  000039      else
003103  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
003104  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
003105  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
003106  000043          uadd_3232(res32,res32,offs32) ;
003107  000044          file_Seek(hstrings, res32[1], res32[0]);
003108  000045          repeat
003109  000046              if (*(StringID + Ofs_String_Ansi))
003110  000047                  ch := file_GetC(hstrings) ;
003111  000048              else
003112  000049                  ch := file_GetW(hstrings) ;
003113  000050              endif
003114  000051              putch(ch) ;
003115  000052          until (ch == 0) ;
003116  000053      endif
003117  000054        
003118  000055  endfunc
003119  000056        
003120  000016        
003121  000017  #constant IPDatasize 22
003122  000017  #constant IPDatasize 22
003123  000018        
003124  000019  #CONST
003125  000023  #END
003126  000024        
003127  000025        
003128  000026        
003129  000027  #CONST
003130  000134  #END
003131  000135        
003132  000136  #CONST
003133  000149  #END
003134  000150        
003135  000151  #constant KbShiftBit        01
003136  000151  #constant KbShiftBit        01
003137  000152  #constant KbCapsBit         02
003138  000152  #constant KbCapsBit         02
003139  000153  #constant KbShiftCapsBits   03
003140  000153  #constant KbShiftCapsBits   03
003141  000154  #constant KbCtrlBit         04
003142  000154  #constant KbCtrlBit         04
003143  000155        
003144  000156  func refreshstate(var iKB, var oKB)
003145  000157      var shifted ;
003146  000158      shifted := oKB[Ofs_kb_State] & KbShiftCapsBits ;
003147  000159      if (!shifted || (shifted == KbShiftCapsBits))
003148  000160          shifted := 0 ;
003149  000161          oKB[Ofs_kb_Caps] := 0 ;
003150  000162      else
003151  000163          shifted := 1 ;
003152  000164          oKB[Ofs_kb_Caps] := 2 ;
003153  000165      endif
003154  000166      setkeystate(iKB,shifted) ;
003155  000167      if (oKB[Ofs_kb_State] & KbCapsBit)
003156  000168          setkeystate(iKB + oKB[Ofs_kb_Lock],1) ;
003157  000169      endif
003158  000170      if ((oKB[Ofs_kb_State] & KbShiftBit) && (shifted))
003159  000171          setkeystate(iKB + oKB[Ofs_kb_Shift1],1) ;
003160  000172          setkeystate(iKB + oKB[Ofs_kb_Shift2],1) ;
003161  000173      endif
003162  000174      if (oKB[Ofs_kb_State] & KbCtrlBit)
003163  000175          setkeystate(iKB + oKB[Ofs_kb_Ctrl1],1) ;
003164  000176          setkeystate(iKB + oKB[Ofs_kb_Ctrl2],1) ;
003165  000177      endif
003166  000178  endfunc
003167  000179        
003168  000180  func kbDown(var iKB, var oKB, var KBKeys, var key)
003169  000181      var keyval, rtn ;
003170  000182      oKB[Ofs_kb_Mvt] := 1 ;
003171  000183      oKB[Ofs_kb_Ign]  := 0 ;
003172  000184      if ((key == oKB[Ofs_kb_Shift1]) || (key == oKB[Ofs_kb_Shift2]))
003173  000185          if (oKB[Ofs_kb_State] & KbShiftBit)
003174  000186              oKB[Ofs_kb_State] &= ~KbShiftBit ;
003175  000187              oKB[Ofs_kb_Mvt] := 0 ;
003176  000188          else
003177  000189              oKB[Ofs_kb_State] |= KbShiftBit ;
003178  000190          endif
003179  000191          refreshstate(iKB, oKB) ;
003180  000192          oKB[Ofs_kb_Ign] := 1 ;
003181  000193      else if ((key == oKB[Ofs_kb_Ctrl1]) || (key == oKB[Ofs_kb_Ctrl2]))
003182  000194          if (oKB[Ofs_kb_State] & KbCtrlBit)
003183  000195              oKB[Ofs_kb_State] &= ~KbCtrlBit ;
003184  000196              oKB[Ofs_kb_Mvt] := 0 ;
003185  000197          else
003186  000198              oKB[Ofs_kb_State] |= KbCtrlBit ;
003187  000199          endif
003188  000200          setkeystate(iKB+oKB[Ofs_kb_Ctrl1],oKB[Ofs_kb_Mvt]) ;
003189  000201          key := oKB[Ofs_kb_Ctrl2] ;
003190  000202          oKB[Ofs_kb_Ign] := 1 ;
003191  000203      else if (key == oKB[Ofs_kb_Lock])
003192  000204          if (oKB[Ofs_kb_State] & KbCapsBit)
003193  000205              oKB[Ofs_kb_State] &= ~KbCapsBit ;
003194  000206              oKB[Ofs_kb_Mvt] := 0 ;
003195  000207          else
003196  000208              oKB[Ofs_kb_State] |= KbCapsBit ;
003197  000209          endif
003198  000210          refreshstate(iKB, oKB) ;
003199  000211          oKB[Ofs_kb_Ign] := 1 ;
003200  000212      endif
003201  000213        
003202  000214      if (!oKB[Ofs_kb_Ign])
003203  000215          if (oKB[Ofs_kb_ShiftCaps])
003204  000216              keyval := (oKB[Ofs_kb_State] & KbShiftCapsBits) * oKB[Ofs_kb_Buttons] - 1 ;
003205  000217          else if (((oKB[Ofs_kb_State] & KbShiftCapsBits) == 0) || ((oKB[Ofs_kb_State] & KbShiftCapsBits) == KbShiftCapsBits))
003206  000218                  keyval := - 1 ;
003207  000219              else
003208  000220                  keyval := oKB[Ofs_kb_Buttons] - 1 ;
003209  000221          endif
003210  000222          keyval := KBKeys[key+keyval] ;
003211  000223          if (oKB[Ofs_kb_State] & KbCtrlBit) keyval &= 0x9F ;
003212  000224  //        SendReport(REPORT_EVENT, tKeyboard, actKB, keyval & 0xff) ;
003213  000225  // sendReport, or KBEvent(actKB, keyval & 0xff) 
003214  000226  	rtn := rKeyboardRoutines[ActiveKeyboard] ;
003215  000227          rtn(REPORT_EVENT, tKeyboard, ActiveKeyboard, keyval & 0xff) ;
003216  000228          setkeystate(iKB+key,oKB[Ofs_kb_Mvt]+oKB[Ofs_kb_Caps]) ;
003217  000229      endif
003218  000230      oKB[Ofs_kb_Down] := key ;
003219  000231  endfunc
003220  000232        
003221  000233  func setkeystate(var key, var idx)
003222  000234      img_SetWord(hndl, key,IMAGE_INDEX, idx);
003223  000235      img_Show(hndl,key) ;
003224  000236  endfunc
003225  000237        
003226  000238  func kbUp(var iKB, var oKB)
003227  000239      if (!oKB[Ofs_kb_Ign])
003228  000240          setkeystate(iKB + oKB[Ofs_kb_Down],oKB[Ofs_kb_Caps]) ;
003229  000241          if (oKB[Ofs_kb_State] & KbShiftBit)
003230  000242              oKB[Ofs_kb_State] &= ~KbShiftBit ;
003231  000243              refreshstate(iKB, oKB) ;
003232  000244          endif
003233  000245          if (oKB[Ofs_kb_State] & KbCtrlBit)
003234  000246              oKB[Ofs_kb_State] &= ~KbCtrlBit ;
003235  000247              setkeystate(iKB + oKB[Ofs_kb_Ctrl1],0) ;
003236  000248              setkeystate(iKB + oKB[Ofs_kb_Ctrl2],0) ;
003237  000249          endif
003238  000250          oKB[Ofs_kb_Down] := -1 ;
003239  000251      endif
003240  000252  endfunc
003241  000253        
003242  000365  #END
3243  0A57
3244  0A58
3245  0A59
3246  0A5A
3247  0A5B
3248  0A5C
3249  0A5D
3250  0A5E
3251  0A5F
3252  0A60
3253  0A61
3254  0A62
3255  0A63
3256  0A64
3257  0A65
3258  0A66
3259  0A67
3260  0A68
3261  0A69
3262  0A6A
3263  0A6B
3264  0A6C
3265  0A6D
3266  0A6E
3267  0A6F
3268  0A70
3269  0A71
3270  0A72
3271  0A73
3272  0A74
3273  0A75
3274  0A76
3275  0A77
3276  0A78
3277  0A79
3278  0A7A
3279  0A7B
3280  0A7C
3281  0A7D
3282  0A7E
3283  0A7F
3284  0A80
3285  0A81
3286  0A82
3287  0A83
3288  0A84
3289  0A85
3290  0A86
3291  0A87
3292  0A88
3293  0A89
3294  0A8A
3295  0A8B
3296  0A8C
3297  0A8D
3298  0A8E
3299  0A8F
3300  0A90
3301  0A91
3302  0A92
3303  0A93
3304  0A94
3305  0A95
3306  0A96
3307  0A97
3308  0A98
3309  0A99
3310  0A9A
3311  0A9B
3312  0A9C
3313  0A9D
3314  0A9E
3315  0A9F
3316  0AA0
3317  0AA1
3318  0AA2
3319  0AA3
3320  0AA4
3321  0AA5
3322  0AA6
3323  0AA7
3324  0AA8
3325  0AA9
3326  0AAA
3327  0AAB
3328  0AAC
3329  0AAD
3330  0AAE
3331  0AAF
3332  0AB0
3333  0AB1
3334  0AB2
3335  0AB3
3336  0AB4
3337  0AB5
3338  0AB6
3339  0AB7
3340  0AB8
3341  0AB9
3342  0ABA
3343  0ABB
3344  0ABC
3345  0ABD
3346  0ABE
3347  0ABF
3348  0AC0
3349  0AC1
3350  0AC2
3351  0AC3
3352  0AC4
3353  0AC5
3354  0AC6
3355  0AC7
3356  0AC8
3357  0AC9
3358  0ACA
3359  0ACB
3360  0ACC
3361  0ACD
3362  0ACE
3363  0ACF
3364  0AD0
3365  0AD1
3366  0AD2
3367  0AD3
3368  0AD4
3369  0AD5
3370  0AD6
3371  0AD7
3372  0AD8
3373  0AD9
3374  0ADA
3375  0ADB
3376  0ADC
3377  0ADD
3378  0ADE
3379  0ADF
3380  0AE0
3381  0AE1
3382  0AE2
3383  0AE3
3384  0AE4
3385  0AE5
3386  0AE6
3387  0AE7
3388  0AE8
3389  0AE9
3390  0AEA
3391  0AEB
3392  0AEC
3393  0AED
3394  0AEE
3395  0AEF
3396  0AF0
3397  0AF1
3398  0AF2
3399  0AF3
3400  0AF4
3401  0AF5
3402  0AF6
3403  0AF7
3404  0AF8
3405  0AF9
3406  0AFA
3407  0AFB
3408  0AFC
3409  0AFD
3410  0AFE
3411  0AFF
3412  0B00
3413  0B01
3414  0B02
3415  0B03
3416  0B04
3417  0B05
3418  0B06
3419  0B07
3420  0B08
3421  0B09
3422  0B0A
3423  0B0B
3424  0B0C
3425  0B0D
3426  0B0E
3427  0B0F
3428  0B10
3429  0B11
3430  0B12
3431  0B13
3432  0B14
3433  0B15
3434  0B16
3435  0B17
3436  0B18
3437  0B19
3438  0B1A
3439  0B1B
3440  0B1C
3441  0B1D
3442  0B1E
3443  0B1F
3444  0B20
3445  0B21
3446  0B22
3447  0B23
3448  0B24
3449  0B25
3450  0B26
3451  0B27
3452  0B28
3453  0B29
3454  0B2A
3455  0B2B
3456  0B2C
3457  0B2D
3458  0B2E
3459  0B2F
3460  0B30
3461  0B31
3462  0B32
3463  0B33
3464  0B34
3465  0B35
3466  0B36
3467  0B37
3468  0B38
3469  0B39
3470  0B3A
3471  0B3B
3472  0B3C
3473  0B3D
3474  0B3E
3475  0B3F
3476  0B40
3477  0B41
3478  0B42
3479  0B43
3480  0B44
3481  0B45
3482  0B46
3483  0B47
3484  0B48
3485  0B49
3486  0B4A
3487  0B4B
3488  0B4C
3489  0B4D
3490  0B4E
3491  0B4F
3492  0B50
3493  0B51
3494  0B52
3495  0B53
3496  0B54
3497  0B55
3498  0B56
3499  0B57
3500  0B58
3501  0B59
3502  0B5A
3503  0B5B
3504  0B5C
3505  0B5D
3506  0B5E
3507  0B5F
3508  0B60
3509  0B61
3510  0B62
3511  0B63
3512  0B64
3513  0B65
3514  0B66
3515  0B67
3516  0B68
3517  0B69
3518  0B6A
3519  0B6B
3520  0B6C
3521  0B6D
3522  0B6E
3523  0B6F
3524  0B70
3525  0B71
3526  0B72
3527  0B73
3528  0B74
3529  0B75
3530  0B76
3531  0B77
3532  0B78
3533  0B79
3534  0B7A
3535  0B7B
3536  0B7C
3537  0B7D
3538  0B7E
3539  0B7F
3540  0B80
3541  0B81
3542  0B82
3543  0B83
3544  0B84
3545  0B85
3546  0B86
3547  0B87
3548  0B88
3549  0B89
3550  0B8A
3551  0B8B
3552  0B8C
3553  0B8D
3554  0B8E
3555  0B8F
3556  0B90
3557  0B91
3558  0B92
3559  0B93
3560  0B94
3561  0B95
3562  0B96
3563  0B97
3564  0B98
3565  0B99
3566  0B9A
3567  0B9B
3568  0B9C
3569  0B9D
3570  0B9E
3571  0B9F
3572  0BA0
3573  0BA1
3574  0BA2
3575  0BA3
3576  0BA4
3577  0BA5
3578  0BA6
3579  0BA7
3580  0BA8
3581  0BA9
3582  0BAA
3583  0BAB
3584  0BAC
3585  0BAD
3586  0BAE
3587  0BAF
3588  0BB0
3589  0BB1
3590  0BB2
3591  0BB3
3592  0BB4
3593  0BB5
3594  0BB6
3595  0BB7
3596  0BB8
3597  0BB9
3598  0BBA
3599  0BBB
3600  0BBC
3601  0BBD
3602  0BBE
3603  0BBF
3604  0BC0
3605  0BC1
3606  0BC2
3607  0BC3
3608  0BC4
3609  0BC5
3610  0BC6
3611  0BC7
3612  0BC8
3613  0BC9
3614  0BCA
3615  0BCB
3616  0BCC
3617  0BCD
3618  0BCE
3619  0BCF
3620  0BD0
3621  0BD1
3622  0BD2
3623  0BD3
3624  0BD4
3625  0BD5
3626  0BD6
3627  0BD7
3628  0BD8
3629  0BD9
3630  0BDA
3631  0BDB
3632  0BDC
3633  0BDD
3634  0BDE
3635  0BDF
3636  0BE0
3637  0BE1
3638  0BE2
3639  0BE3
3640  0BE4
3641  0BE5
3642  0BE6
3643  0BE7
3644  0BE8
3645  0BE9
3646  0BEA
3647  0BEB
3648  0BEC
3649  0BED
3650  0BEE
3651  0BEF
3652  0BF0
3653  0BF1
3654  0BF2
3655  0BF3
3656  0BF4
3657  0BF5
3658  0BF6
3659  0BF7
3660  0BF8
3661  0BF9
3662  0BFA
3663  0BFB
3664  0BFC
3665  0BFD
3666  0BFE
3667  0BFF
3668  0C00
3669  0C01
3670  0C02
3671  0C03
3672  0C04
3673  0C05
3674  0C06
3675  0C07
3676  0C08
3677  0C09
3678  0C0A
3679  0C0B
3680  0C0C
3681  0C0D
3682  0C0E
3683  0C0F
3684  0C10
3685  0C11
3686  0C12
3687  0C13
3688  0C14
3689  0C15
3690  0C16
3691  0C17
3692  0C18
3693  0C19
3694  0C1A
3695  0C1B
3696  0C1C
3697  0C1D
3698  0C1E
3699  0C1F
3700  0C20
3701  0C21
3702  0C22
3703  0C23
3704  0C24
3705  0C25
3706  0C26
3707  0C27
3708  0C28
3709  0C29
3710  0C2A
3711  0C2B
3712  0C2C
3713  0C2D
3714  0C2E
3715  0C2F
3716  0C30
3717  0C31
3718  0C32
3719  0C33
3720  0C34
3721  0C35
3722  0C36
3723  0C37
3724  0C38
3725  0C39
3726  0C3A
3727  0C3B
3728  0C3C
3729  0C3D
3730  0C3E
3731  0C3F
3732  0C40
3733  0C41
3734  0C42
3735  0C43
3736  0C44
3737  0C45
3738  0C46
3739  0C47
3740  0C48
3741  0C49
3742  0C4A
3743  0C4B
3744  0C4C
3745  0C4D
3746  0C4E
3747  0C4F
3748  0C50
3749  0C51
3750  0C52
3751  0C53
3752  0C54
3753  0C55
3754  0C56
3755  0C57
3756  0C58
3757  0C59
3758  0C5A
3759  0C5B
3760  0C5C
3761  0C5D
3762  0C5E
3763  0C5F
3764  0C60
3765  0C61
3766  0C62
3767  0C63
3768  0C64
3769  0C65
3770  0C66
3771  0C67
3772  0C68
3773  0C69
3774  0C6A
3775  0C6B
3776  0C6C
3777  0C6D
3778  0C6E
3779  0C6F
3780  0C70
3781  0C71
3782  0C72
3783  0C73
3784  0C74
3785  0C75
3786  0C76
3787  0C77
3788  0C78
3789  0C79
3790  0C7A
3791  0C7B
3792  0C7C
3793  0C7D
3794  0C7E
3795  0C7F
3796  0C80
3797  0C81
3798  0C82
3799  0C83
3800  0C84
3801  0C85
3802  0C86
3803  0C87
3804  0C88
3805  0C89
3806  0C8A
3807  0C8B
3808  0C8C
3809  0C8D
3810  0C8E
3811  0C8F
3812  0C90
3813  0C91
3814  0C92
3815  0C93
3816  0C94
3817  0C95
3818  0C96
3819  0C97
3820  0C98
3821  0C99
3822  0C9A
3823  0C9B
3824  0C9C
3825  0C9D
3826  0C9E
3827  0C9F
3828  0CA0
3829  0CA1
3830  0CA2
3831  0CA3
3832  0CA4
3833  0CA5
3834  0CA6
3835  0CA7
3836  0CA8
3837  0CA9
3838  0CAA
3839  0CAB
3840  0CAC
3841  0CAD
3842  0CAE
3843  0CAF
3844  0CB0
3845  0CB1
3846  0CB2
3847  0CB3
3848  0CB4
3849  0CB5
3850  0CB6
3851  0CB7
3852  0CB8
3853  0CB9
3854  0CBA
3855  0CBB
3856  0CBC
3857  0CBD
3858  0CBE
3859  0CBF
3860  0CC0
3861  0CC1
3862  0CC2
3863  0CC3
3864  0CC4
3865  0CC5
3866  0CC6
3867  0CC7
3868  0CC8
3869  0CC9
3870  0CCA
3871  0CCB
3872  0CCC
3873  0CCD
3874  0CCE
3875  0CCF
3876  0CD0
3877  0CD1
3878  0CD2
3879  0CD3
3880  0CD4
3881  0CD5
3882  0CD6
3883  0CD7
3884  0CD8
3885  0CD9
3886  0CDA
3887  0CDB
3888  0CDC
3889  0CDD
3890  0CDE
3891  0CDF
3892  0CE0
3893  0CE1
3894  0CE2
3895  0CE3
3896  0CE4
3897  0CE5
3898  0CE6
3899  0CE7
3900  0CE8
3901  0CE9
3902  0CEA
3903  0CEB
3904  0CEC
3905  0CED
3906  0CEE
3907  0CEF
3908  0CF0
3909  0CF1
3910  0CF2
3911  0CF3
3912  0CF4
3913  0CF5
3914  0CF6
3915  0CF7
3916  0CF8
3917  0CF9
3918  0CFA
3919  0CFB
3920  0CFC
3921  0CFD
3922  0CFE
3923  0CFF
3924  0D00
3925  0D01
3926  0D02
3927  0D03
3928  0D04
3929  0D05
3930  0D06
3931  0D07
3932  0D08
3933  0D09
3934  0D0A
3935  0D0B
3936  0D0C
3937  0D0D
3938  0D0E
3939  0D0F
3940  0D10
3941  0D11
3942  0D12
3943  0D13
3944  0D14
3945  0D15
3946  0D16
3947  0D17
3948  0D18
3949  0D19
3950  0D1A
3951  0D1B
3952  0D1C
3953  0D1D
3954  0D1E
3955  0D1F
3956  0D20
3957  0D21
3958  0D22
3959  0D23
3960  0D24
3961  0D25
3962  0D26
3963  0D27
3964  0D28
3965  0D29
3966  0D2A
3967  0D2B
3968  0D2C
3969  0D2D
3970  0D2E
3971  0D2F
3972  0D30
3973  0D31
3974  0D32
3975  0D33
3976  0D34
3977  0D35
3978  0D36
3979  0D37
3980  0D38
3981  0D39
3982  0D3A
3983  0D3B
3984  0D3C
3985  0D3D
3986  0D3E
3987  0D3F
3988  0D40
3989  0D41
3990  0D42
3991  0D43
3992  0D44
3993  0D45
3994  0D46
3995  0D47
3996  0D48
3997  0D49
3998  0D4A
3999  0D4B
4000  0D4C
4001  0D4D
4002  0D4E
4003  0D4F
4004  0D50
4005  0D51
4006  0D52
4007  0D53
4008  0D54
4009  0D55
4010  0D56
4011  0D57
4012  0D58
4013  0D59
4014  0D5A
4015  0D5B
4016  0D5C
4017  0D5D
4018  0D5E
4019  0D5F
4020  0D60
4021  0D61
4022  0D62
4023  0D63
4024  0D64
4025  0D65
4026  0D66
4027  0D67
4028  0D68
4029  0D69
4030  0D6A
4031  0D6B
4032  0D6C
4033  0D6D
4034  0D6E
4035  0D6F
4036  0D70
4037  0D71
4038  0D72
4039  0D73
4040  0D74
4041  0D75
4042  0D76
4043  0D77
4044  0D78
4045  0D79
4046  0D7A
4047  0D7B
4048  0D7C
4049  0D7D
4050  0D7E
4051  0D7F
4052  0D80
4053  0D81
4054  0D82
4055  0D83
4056  0D84
4057  0D85
4058  0D86
4059  0D87
4060  0D88
4061  0D89
4062  0D8A
4063  0D8B
4064  0D8C
4065  0D8D
4066  0D8E
4067  0D8F
4068  0D90
4069  0D91
4070  0D92
4071  0D93
4072  0D94
4073  0D95
4074  0D96
4075  0D97
4076  0D98
4077  0D99
4078  0D9A
4079  0D9B
4080  0D9C
4081  0D9D
4082  0D9E
4083  0D9F
4084  0DA0
4085  0DA1
4086  0DA2
4087  0DA3
4088  0DA4
4089  0DA5
4090  0DA6
4091  0DA7
4092  0DA8
4093  0DA9
4094  0DAA
4095  0DAB
4096  0DAC
4097  0DAD
4098  0DAE
4099  0DAF
4100  0DB0
4101  0DB1
4102  0DB2
4103  0DB3
4104  0DB4
4105  0DB5
4106  0DB6
4107  0DB7
4108  0DB8
4109  0DB9
4110  0DBA
4111  0DBB
4112  0DBC
4113  0DBD
4114  0DBE
4115  0DBF
4116  0DC0
4117  0DC1
4118  0DC2
4119  0DC3
4120  0DC4
4121  0DC5
4122  0DC6
4123  0DC7
4124  0DC8
4125  0DC9
4126  0DCA
4127  0DCB
4128  0DCC
4129  0DCD
4130  0DCE
4131  0DCF
4132  0DD0
4133  0DD1
4134  0DD2
4135  0DD3
4136  0DD4
4137  0DD5
4138  0DD6
4139  0DD7
4140  0DD8
4141  0DD9
4142  0DDA
4143  0DDB
4144  0DDC
4145  0DDD
4146  0DDE
4147  0DDF
4148  0DE0
4149  0DE1
4150  0DE2
4151  0DE3
4152  0DE4
4153  0DE5
4154  0DE6
4155  0DE7
4156  0DE8
4157  0DE9
4158  0DEA
4159  0DEB
4160  0DEC
4161  0DED
4162  0DEE
4163  0DEF
4164  0DF0
4165  0DF1
4166  0DF2
4167  0DF3
4168  0DF4
4169  0DF5
4170  0DF6
4171  0DF7
4172  0DF8
4173  0DF9
4174  0DFA
4175  0DFB
4176  0DFC
4177  0DFD
4178  0DFE
4179  0DFF
4180  0E00
4181  0E01
4182  0E02
4183  0E03
4184  0E04
4185  0E05
4186  0E06
4187  0E07
4188  0E08
4189  0E09
4190  0E0A
4191  0E0B
4192  0E0C
4193  0E0D
4194  0E0E
4195  0E0F
4196  0E10
4197  0E11
4198  0E12
4199  0E13
4200  0E14
4201  0E15
4202  0E16
4203  0E17
4204  0E18
4205  0E19
4206  0E1A
4207  0E1B
4208  0E1C
4209  0E1D
4210  0E1E
4211  0E1F
4212  0E20
4213  0E21
4214  0E22
4215  0E23
4216  0E24
4217  0E25
4218  0E26
4219  0E27
4220  0E28
4221  0E29
4222  0E2A
4223  0E2B
4224  0E2C
4225  0E2D
4226  0E2E
4227  0E2F
4228  0E30
4229  0E31
4230  0E32
4231  0E33
4232  0E34
4233  0E35
4234  0E36
4235  0E37
4236  0E38
4237  0E39
4238  0E3A
4239  0E3B
4240  0E3C
4241  0E3D
4242  0E3E
4243  0E3F
4244  0E40
4245  0E41
4246  0E42
4247  0E43
4248  0E44
4249  0E45
4250  0E46
4251  0E47
4252  0E48
4253  0E49
4254  0E4A
4255  0E4B
4256  0E4C
4257  0E4D
4258  0E4E
4259  0E4F
4260  0E50
4261  0E51
4262  0E52
4263  0E53
4264  0E54
4265  0E55
4266  0E56
4267  0E57
4268  0E58
4269  0E59
4270  0E5A
4271  0E5B
4272  0E5C
4273  0E5D
4274  0E5E
4275  0E5F
4276  0E60
4277  0E61
4278  0E62
4279  0E63
4280  0E64
4281  0E65
4282  0E66
4283  0E67
4284  0E68
4285  0E69
4286  0E6A
4287  0E6B
4288  0E6C
4289  0E6D
4290  0E6E
4291  0E6F
4292  0E70
4293  0E71
4294  0E72
4295  0E73
4296  0E74
4297  0E75
4298  0E76
4299  0E77
4300  0E78
4301  0E79
4302  0E7A
4303  0E7B
4304  0E7C
4305  0E7D
4306  0E7E
4307  0E7F
4308  0E80
4309  0E81
4310  0E82
4311  0E83
4312  0E84
4313  0E85
4314  0E86
4315  0E87
4316  0E88
4317  0E89
4318  0E8A
4319  0E8B
4320  0E8C
4321  0E8D
4322  0E8E
4323  0E8F
4324  0E90
4325  0E91
4326  0E92
4327  0E93
4328  0E94
4329  0E95
4330  0E96
4331  0E97
4332  0E98
4333  0E99
4334  0E9A
4335  0E9B
4336  0E9C
4337  0E9D
4338  0E9E
4339  0E9F
4340  0EA0
4341  0EA1
4342  0EA2
4343  0EA3
4344  0EA4
4345  0EA5
4346  0EA6
4347  0EA7
4348  0EA8
4349  0EA9
4350  0EAA
4351  0EAB
4352  0EAC
4353  0EAD
4354  0EAE
4355  0EAF
4356  0EB0
4357  0EB1
4358  0EB2
4359  0EB3
4360  0EB4
4361  0EB5
4362  0EB6
4363  0EB7
4364  0EB8
4365  0EB9
4366  0EBA
4367  0EBB
4368  0EBC
4369  0EBD
4370  0EBE
4371  0EBF
4372  0EC0
4373  0EC1
4374  0EC2
4375  0EC3
4376  0EC4
4377  0EC5
4378  0EC6
4379  0EC7
4380  0EC8
4381  0EC9
4382  0ECA
4383  0ECB
4384  0ECC
4385  0ECD
4386  0ECE
4387  0ECF
4388  0ED0
4389  0ED1
4390  0ED2
4391  0ED3
4392  0ED4
4393  0ED5
4394  0ED6
4395  0ED7
4396  0ED8
4397  0ED9
4398  0EDA
4399  0EDB
4400  0EDC
4401  0EDD
4402  0EDE
4403  0EDF
4404  0EE0
4405  0EE1
4406  0EE2
4407  0EE3
4408  0EE4
4409  0EE5
4410  0EE6
4411  0EE7
4412  0EE8
4413  0EE9
4414  0EEA
4415  0EEB
4416  0EEC
4417  0EED
4418  0EEE
4419  0EEF
4420  0EF0
4421  0EF1
4422  0EF2
4423  0EF3
4424  0EF4
4425  0EF5
4426  0EF6
4427  0EF7
4428  0EF8
4429  0EF9
4430  0EFA
4431  0EFB
4432  0EFC
4433  0EFD
4434  0EFE
4435  0EFF
4436  0F00
4437  0F01
4438  0F02
4439  0F03
4440  0F04
4441  0F05
4442  0F06
4443  0F07
4444  0F08
4445  0F09
4446  0F0A
4447  0F0B
4448  0F0C
4449  0F0D
4450  0F0E
4451  0F0F
4452  0F10
4453  0F11
4454  0F12
4455  0F13
4456  0F14
4457  0F15
4458  0F16
4459  0F17
4460  0F18
4461  0F19
4462  0F1A
4463  0F1B
4464  0F1C
4465  0F1D
4466  0F1E
4467  0F1F
4468  0F20
4469  0F21
4470  0F22
4471  0F23
4472  0F24
4473  0F25
4474  0F26
4475  0F27
4476  0F28
4477  0F29
4478  0F2A
4479  0F2B
4480  0F2C
4481  0F2D
4482  0F2E
4483  0F2F
4484  0F30
4485  0F31
4486  0F32
4487  0F33
4488  0F34
4489  0F35
4490  0F36
4491  0F37
4492  0F38
4493  0F39
4494  0F3A
4495  0F3B
4496  0F3C
4497  0F3D
4498  0F3E
4499  0F3F
4500  0F40
4501  0F41
4502  0F42
4503  0F43
4504  0F44
4505  0F45
4506  0F46
4507  0F47
4508  0F48
4509  0F49
4510  0F4A
4511  0F4B
4512  0F4C
4513  0F4D
4514  0F4E
4515  0F4F
4516  0F50
4517  0F51
4518  0F52
4519  0F53
4520  0F54
4521  0F55
4522  0F56
4523  0F57
4524  0F58
4525  0F59
4526  0F5A
4527  0F5B
4528  0F5C
4529  0F5D
4530  0F5E
4531  0F5F
4532  0F60
4533  0F61
4534  0F62
4535  0F63
4536  0F64
4537  0F65
4538  0F66
4539  0F67
4540  0F68
4541  0F69
4542  0F6A
4543  0F6B
4544  0F6C
4545  0F6D
4546  0F6E
4547  0F6F
4548  0F70
4549  0F71
4550  0F72
4551  0F73
4552  0F74
4553  0F75
4554  0F76
4555  0F77
4556  0F78
4557  0F79
4558  0F7A
4559  0F7B
4560  0F7C
4561  0F7D
4562  0F7E
4563  0F7F
4564  0F80
4565  0F81
4566  0F82
4567  0F83
4568  0F84
4569  0F85
4570  0F86
4571  0F87
4572  0F88
4573  0F89
4574  0F8A
4575  0F8B
4576  0F8C
4577  0F8D
4578  0F8E
4579  0F8F
4580  0F90
4581  0F91
4582  0F92
4583  0F93
4584  0F94
4585  0F95
4586  0F96
4587  0F97
4588  0F98
4589  0F99
4590  0F9A
4591  0F9B
4592  0F9C
4593  0F9D
4594  0F9E
4595  0F9F
4596  0FA0
4597  0FA1
4598  0FA2
4599  0FA3
4600  0FA4
4601  0FA5
4602  0FA6
4603  0FA7
4604  0FA8
4605  0FA9
4606  0FAA
4607  0FAB
4608  0FAC
4609  0FAD
4610  0FAE
4611  0FAF
4612  0FB0
4613  0FB1
4614  0FB2
4615  0FB3
4616  0FB4
4617  0FB5
4618  0FB6
4619  0FB7
4620  0FB8
4621  0FB9
4622  0FBA
4623  0FBB
4624  0FBC
4625  0FBD
4626  0FBE
4627  0FBF
4628  0FC0
4629  0FC1
4630  0FC2
4631  0FC3
4632  0FC4
4633  0FC5
4634  0FC6
4635  0FC7
4636  0FC8
4637  0FC9
4638  0FCA
4639  0FCB
4640  0FCC
4641  0FCD
4642  0FCE
4643  0FCF
4644  0FD0
4645  0FD1
4646  0FD2
4647  0FD3
4648  0FD4
4649  0FD5
4650  0FD6
4651  0FD7
4652  0FD8
4653  0FD9
4654  0FDA
4655  0FDB
4656  0FDC
4657  0FDD
4658  0FDE
4659  0FDF
4660  0FE0
4661  0FE1
4662  0FE2
4663  0FE3
4664  0FE4
4665  0FE5
4666  0FE6
4667  0FE7
4668  0FE8
4669  0FE9
4670  0FEA
4671  0FEB
4672  0FEC
4673  0FED
4674  0FEE
4675  0FEF
4676  0FF0
4677  0FF1
4678  0FF2
4679  0FF3
4680  0FF4
4681  0FF5
4682  0FF6
4683  0FF7
4684  0FF8
4685  0FF9
4686  0FFA
4687  0FFB
4688  0FFC
4689  0FFD
4690  0FFE
4691  0FFF
4692  1000
4693  1001
4694  1002
4695  1003
4696  1004
4697  1005
4698  1006
4699  1007
4700  1008
4701  1009
4702  100A
4703  100B
4704  100C
4705  100D
4706  100E
4707  100F
4708  1010
4709  1011
4710  1012
4711  1013
4712  1014
4713  1015
4714  1016
4715  1017
4716  1018
4717  1019
4718  101A
4719  101B
4720  101C
4721  101D
4722  101E
4723  101F
4724  1020
4725  1021
4726  1022
4727  1023
4728  1024
4729  1025
4730  1026
4731  1027
4732  1028
4733  1029
4734  102A
4735  102B
4736  102C
4737  102D
4738  102E
4739  102F
4740  1030
4741  1031
4742  1032
4743  1033
4744  1034
4745  1035
4746  1036
4747  1037
4748  1038
4749  1039
4750  103A
4751  103B
4752  103C
4753  103D
4754  103E
4755  103F
4756  1040
4757  1041
4758  1042
4759  1043
4760  1044
4761  1045
4762  1046
4763  1047
4764  1048
4765  1049
4766  104A
4767  104B
4768  104C
4769  104D
4770  104E
4771  104F
4772  1050
4773  1051
4774  1052
4775  1053
4776  1054
4777  1055
4778  1056
4779  1057
4780  1058
4781  1059
4782  105A
4783  105B
4784  105C
4785  105D
4786  105E
4787  105F
4788  1060
4789  1061
4790  1062
4791  1063
4792  1064
4793  1065
4794  1066
4795  1067
4796  1068
4797  1069
4798  106A
4799  106B
4800  106C
4801  106D
4802  106E
4803  106F
4804  1070
4805  1071
4806  1072
4807  1073
4808  1074
4809  1075
4810  1076
4811  1077
4812  1078
4813  1079
4814  107A
4815  107B
4816  107C
4817  107D
4818  107E
4819  107F
4820  1080
4821  1081
4822  1082
4823  1083
4824  1084
4825  1085
4826  1086
4827  1087
4828  1088
4829  1089
4830  108A
4831  108B
4832  108C
4833  108D
4834  108E
4835  108F
4836  1090
4837  1091
4838  1092
4839  1093
4840  1094
4841  1095
4842  1096
4843  1097
4844  1098
4845  1099
4846  109A
4847  109B
4848  109C
4849  109D
4850  109E
4851  109F
4852  10A0
4853  10A1
4854  10A2
4855  10A3
4856  10A4
4857  10A5
4858  10A6
4859  10A7
4860  10A8
4861  10A9
4862  10AA
4863  10AB
4864  10AC
4865  10AD
4866  10AE
4867  10AF
4868  10B0
4869  10B1
4870  10B2
4871  10B3
4872  10B4
4873  10B5
4874  10B6
4875  10B7
4876  10B8
4877  10B9
4878  10BA
4879  10BB
4880  10BC
4881  10BD
4882  10BE
4883  10BF
4884  10C0
4885  10C1
4886  10C2
4887  10C3
4888  10C4
4889  10C5
4890  10C6
4891  10C7
4892  10C8
4893  10C9
4894  10CA
4895  10CB
4896  10CC
4897  10CD
4898  10CE
4899  10CF
4900  10D0
4901  10D1
4902  10D2
4903  10D3
4904  10D4
4905  10D5
4906  10D6
4907  10D7
4908  10D8
4909  10D9
4910  10DA
4911  10DB
4912  10DC
4913  10DD
4914  10DE
4915  10DF
4916  10E0
4917  10E1
4918  10E2
4919  10E3
4920  10E4
4921  10E5
4922  10E6
4923  10E7
4924  10E8
4925  10E9
4926  10EA
4927  10EB
4928  10EC
4929  10ED
4930  10EE
4931  10EF
4932  10F0
4933  10F1
4934  10F2
4935  10F3
4936  10F4
4937  10F5
4938  10F6
4939  10F7
4940  10F8
4941  10F9
4942  10FA
4943  10FB
4944  10FC
4945  10FD
4946  10FE
4947  10FF
4948  1100
4949  1101
4950  1102
4951  1103
4952  1104
4953  1105
4954  1106
4955  1107
4956  1108
4957  1109
4958  110A
4959  110B
4960  110C
4961  110D
4962  110E
4963  110F
4964  1110
4965  1111
4966  1112
4967  1113
4968  1114
4969  1115
4970  1116
4971  1117
4972  1118
4973  1119
4974  111A
4975  111B
4976  111C
4977  111D
4978  111E
4979  111F
4980  1120
4981  1121
4982  1122
4983  1123
4984  1124
4985  1125
4986  1126
4987  1127
4988  1128
4989  1129
4990  112A
4991  112B
4992  112C
4993  112D
4994  112E
4995  112F
4996  1130
4997  1131
4998  1132
4999  1133
5000  1134
5001  1135
5002  1136
5003  1137
5004  1138
5005  1139
5006  113A
5007  113B
5008  113C
5009  113D
5010  113E
5011  113F
5012  1140
5013  1141
5014  1142
5015  1143
5016  1144
5017  1145
5018  1146
5019  1147
5020  1148
5021  1149
5022  114A
5023  114B
5024  114C
5025  114D
5026  114E
5027  114F
5028  1150
5029  1151
5030  1152
5031  1153
5032  1154
5033  1155
5034  1156
5035  1157
5036  1158
5037  1159
5038  115A
5039  115B
5040  115C
5041  115D
5042  115E
5043  115F
5044  1160
5045  1161
5046  1162
5047  1163
5048  1164
5049  1165
5050  1166
5051  1167
5052  1168
5053  1169
5054  116A
5055  116B
5056  116C
5057  116D
5058  116E
5059  116F
5060  1170
5061  1171
5062  1172
5063  1173
5064  1174
5065  1175
5066  1176
5067  1177
5068  1178
5069  1179
5070  117A
5071  117B
5072  117C
5073  117D
5074  117E
5075  117F
5076  1180
5077  1181
5078  1182
5079  1183
5080  1184
5081  1185
5082  1186
5083  1187
5084  1188
5085  1189
5086  118A
5087  118B
5088  118C
5089  118D
5090  118E
5091  118F
5092  1190
5093  1191
5094  1192
5095  1193
5096  1194
5097  1195
5098  1196
5099  1197
5100  1198
5101  1199
5102  119A
5103  119B
5104  119C
5105  119D
5106  119E
5107  119F
5108  11A0
5109  11A1
5110  11A2
5111  11A3
5112  11A4
5113  11A5
5114  11A6
5115  11A7
5116  11A8
5117  11A9
5118  11AA
5119  11AB
5120  11AC
5121  11AD
5122  11AE
5123  11AF
5124  11B0
5125  11B1
5126  11B2
5127  11B3
5128  11B4
5129  11B5
5130  11B6
5131  11B7
5132  11B8
5133  11B9
5134  11BA
5135  11BB
5136  11BC
5137  11BD
5138  11BE
5139  11BF
5140  11C0
5141  11C1
5142  11C2
5143  11C3
5144  11C4
5145  11C5
5146  11C6
5147  11C7
5148  11C8
5149  11C9
5150  11CA
5151  11CB
5152  11CC
5153  11CD
5154  11CE
5155  11CF
5156  11D0
5157  11D1
5158  11D2
5159  11D3
5160  11D4
5161  11D5
5162  11D6
5163  11D7
5164  11D8
5165  11D9
5166  11DA
5167  11DB
5168  11DC
5169  11DD
5170  11DE
5171  11DF
5172  11E0
5173  11E1
5174  11E2
5175  11E3
5176  11E4
5177  11E5
5178  11E6
5179  11E7
5180  11E8
5181  11E9
5182  11EA
5183  11EB
5184  11EC
5185  11ED
5186  11EE
5187  11EF
5188  11F0
5189  11F1
5190  11F2
5191  11F3
5192  11F4
5193  11F5
5194  11F6
5195  11F7
5196  11F8
5197  11F9
5198  11FA
5199  11FB
5200  11FC
5201  11FD
5202  11FE
5203  11FF
5204  1200
5205  1201
5206  1202
5207  1203
5208  1204
5209  1205
5210  1206
5211  1207
5212  1208
5213  1209
5214  120A
5215  120B
5216  120C
5217  120D
5218  120E
5219  120F
5220  1210
5221  1211
5222  1212
5223  1213
5224  1214
5225  1215
5226  1216
5227  1217
5228  1218
5229  1219
5230  121A
5231  121B
5232  121C
5233  121D
5234  121E
5235  121F
5236  1220
5237  1221
5238  1222
5239  1223
5240  1224
5241  1225
5242  1226
5243  1227
5244  1228
5245  1229
5246  122A
5247  122B
5248  122C
5249  122D
5250  122E
5251  122F
5252  1230
5253  1231
5254  1232
5255  1233
5256  1234
5257  1235
5258  1236
5259  1237
5260  1238
5261  1239
5262  123A
5263  123B
5264  123C
5265  123D
5266  123E
5267  123F
5268  1240
5269  1241
5270  1242
5271  1243
5272  1244
5273  1245
5274  1246
5275  1247
5276  1248
5277  1249
5278  124A
5279  124B
5280  124C
5281  124D
5282  124E
5283  124F
5284  1250
5285  1251
5286  1252
5287  1253
5288  1254
5289  1255
5290  1256
5291  1257
5292  1258
5293  1259
5294  125A
5295  125B
5296  125C
5297  125D
5298  125E
5299  125F
5300  1260
5301  1261
5302  1262
5303  1263
5304  1264
5305  1265
5306  1266
5307  1267
5308  1268
5309  1269
5310  126A
5311  126B
5312  126C
5313  126D
5314  126E
5315  126F
5316  1270
5317  1271
5318  1272
5319  1273
5320  1274
5321  1275
5322  1276
5323  1277
5324  1278
5325  1279
5326  127A
5327  127B
5328  127C
5329  127D
5330  127E
5331  127F
5332  1280
5333  1281
5334  1282
5335  1283
5336  1284
5337  1285
5338  1286
5339  1287
5340  1288
5341  1289
5342  128A
5343  128B
5344  128C
5345  128D
5346  128E
5347  128F
5348  1290
5349  1291
5350  1292
5351  1293
5352  1294
5353  1295
5354  1296
5355  1297
5356  1298
5357  1299
5358  129A
5359  129B
5360  129C
5361  129D
5362  129E
5363  129F
5364  12A0
5365  12A1
5366  12A2
5367  12A3
5368  12A4
5369  12A5
5370  12A6
5371  12A7
5372  12A8
5373  12A9
5374  12AA
5375  12AB
5376  12AC
5377  12AD
5378  12AE
5379  12AF
5380  12B0
5381  12B1
5382  12B2
5383  12B3
5384  12B4
5385  12B5
5386  12B6
5387  12B7
5388  12B8
5389  12B9
5390  12BA
5391  12BB
5392  12BC
5393  12BD
5394  12BE
5395  12BF
5396  12C0
5397  12C1
5398  12C2
5399  12C3
5400  12C4
5401  12C5
5402  12C6
5403  12C7
5404  12C8
5405  12C9
5406  12CA
5407  12CB
5408  12CC
5409  12CD
5410  12CE
5411  12CF
5412  12D0
5413  12D1
5414  12D2
5415  12D3
5416  12D4
5417  12D5
5418  12D6
5419  12D7
5420  12D8
5421  12D9
5422  12DA
5423  12DB
5424  12DC
5425  12DD
5426  12DE
5427  12DF
5428  12E0
5429  12E1
5430  12E2
5431  12E3
5432  12E4
5433  12E5
5434  12E6
5435  12E7
5436  12E8
5437  12E9
5438  12EA
5439  12EB
5440  12EC
5441  12ED
5442  12EE
5443  12EF
5444  12F0
5445  12F1
5446  12F2
5447  12F3
5448  12F4
5449  12F5
5450  12F6
5451  12F7
5452  12F8
5453  12F9
5454  12FA
5455  12FB
5456  12FC
5457  12FD
5458  12FE
5459  12FF
5460  1300
5461  1301
5462  1302
5463  1303
5464  1304
5465  1305
5466  1306
5467  1307
5468  1308
5469  1309
5470  130A
5471  130B
5472  130C
5473  130D
5474  130E
5475  130F
5476  1310
5477  1311
5478  1312
5479  1313
5480  1314
5481  1315
5482  1316
5483  1317
5484  1318
5485  1319
5486  131A
5487  131B
5488  131C
5489  131D
5490  131E
5491  131F
5492  1320
5493  1321
5494  1322
5495  1323
5496  1324
5497  1325
5498  1326
5499  1327
5500  1328
5501  1329
5502  132A
5503  132B
5504  132C
5505  132D
5506  132E
5507  132F
5508  1330
5509  1331
5510  1332
5511  1333
5512  1334
5513  1335
5514  1336
5515  1337
5516  1338
5517  1339
5518  133A
5519  133B
5520  133C
5521  133D
5522  133E
5523  133F
5524  1340
5525  1341
5526  1342
5527  1343
5528  1344
5529  1345
5530  1346
5531  1347
5532  1348
5533  1349
5534  134A
5535  134B
5536  134C
5537  134D
5538  134E
5539  134F
5540  1350
5541  1351
5542  1352
5543  1353
5544  1354
5545  1355
5546  1356
5547  1357
5548  1358
5549  1359
5550  135A
5551  135B
5552  135C
5553  135D
5554  135E
5555  135F
5556  1360
5557  1361
5558  1362
5559  1363
5560  1364
5561  1365
5562  1366
5563  1367
5564  1368
5565  1369
5566  136A
5567  136B
5568  136C
5569  136D
5570  136E
5571  136F
5572  1370
5573  1371
5574  1372
5575  1373
5576  1374
5577  1375
5578  1376
5579  1377
5580  1378
5581  1379
5582  137A
5583  137B
5584  137C
5585  137D
5586  137E
5587  137F
5588  1380
5589  1381
5590  1382
5591  1383
5592  1384
5593  1385
5594  1386
5595  1387
5596  1388
5597  1389
5598  138A
5599  138B
5600  138C
5601  138D
5602  138E
5603  138F
5604  1390
5605  1391
5606  1392
5607  1393
5608  1394
5609  1395
5610  1396
5611  1397
5612  1398
5613  1399
5614  139A
5615  139B
5616  139C
5617  139D
5618  139E
5619  139F
5620  13A0
5621  13A1
5622  13A2
5623  13A3
5624  13A4
5625  13A5
5626  13A6
5627  13A7
5628  13A8
5629  13A9
5630  13AA
5631  13AB
5632  13AC
5633  13AD
5634  13AE
5635  13AF
5636  13B0
5637  13B1
5638  13B2
5639  13B3
5640  13B4
5641  13B5
5642  13B6
5643  13B7
5644  13B8
5645  13B9
5646  13BA
5647  13BB
5648  13BC
5649  13BD
5650  13BE
5651  13BF
5652  13C0
5653  13C1
5654  13C2
5655  13C3
5656  13C4
5657  13C5
5658  13C6
5659  13C7
5660  13C8
5661  13C9
5662  13CA
5663  13CB
5664  13CC
5665  13CD
5666  13CE
5667  13CF
5668  13D0
5669  13D1
5670  13D2
5671  13D3
5672  13D4
5673  13D5
5674  13D6
5675  13D7
5676  13D8
5677  13D9
5678  13DA
5679  13DB
5680  13DC
5681  13DD
5682  13DE
5683  13DF
5684  13E0
5685  13E1
5686  13E2
5687  13E3
5688  13E4
5689  13E5
5690  13E6
5691  13E7
5692  13E8
5693  13E9
5694  13EA
5695  13EB
5696  13EC
5697  13ED
5698  13EE
5699  13EF
5700  13F0
5701  13F1
5702  13F2
5703  13F3
5704  13F4
5705  13F5
5706  13F6
5707  13F7
5708  13F8
5709  13F9
5710  13FA
5711  13FB
5712  13FC
5713  13FD
5714  13FE
5715  13FF
5716  1400
5717  1401
5718  1402
5719  1403
5720  1404
5721  1405
5722  1406
5723  1407
5724  1408
5725  1409
5726  140A
5727  140B
5728  140C
5729  140D
5730  140E
5731  140F
5732  1410
5733  1411
5734  1412
5735  1413
5736  1414
5737  1415
5738  1416
5739  1417
5740  1418
5741  1419
5742  141A
5743  141B
5744  141C
5745  141D
5746  141E
5747  141F
5748  1420
5749  1421
5750  1422
5751  1423
5752  1424
5753  1425
5754  1426
5755  1427
5756  1428
5757  1429
5758  142A
5759  142B
5760  142C
5761  142D
5762  142E
5763  142F
5764  1430
5765  1431
5766  1432
5767  1433
5768  1434
5769  1435
5770  1436
5771  1437
5772  1438
5773  1439
5774  143A
5775  143B
5776  143C
5777  143D
5778  143E
5779  143F
5780  1440
5781  1441
5782  1442
5783  1443
5784  1444
5785  1445
5786  1446
5787  1447
5788  1448
5789  1449
5790  144A
5791  144B
5792  144C
5793  144D
5794  144E
5795  144F
5796  1450
5797  1451
5798  1452
5799  1453
5800  1454
5801  1455
5802  1456
5803  1457
5804  1458
5805  1459
5806  145A
5807  145B
5808  145C
5809  145D
5810  145E
5811  145F
5812  1460
5813  1461
5814  1462
5815  1463
5816  1464
5817  1465
5818  1466
5819  1467
5820  1468
5821  1469
5822  146A
5823  146B
5824  146C
5825  146D
5826  146E
5827  146F
5828  1470
5829  1471
5830  1472
5831  1473
5832  1474
5833  1475
5834  1476
5835  1477
5836  1478
5837  1479
5838  147A
5839  147B
5840  147C
5841  147D
5842  147E
5843  147F
5844  1480
5845  1481
5846  1482
005847  000366        
005848  000367  var stringsCV[20] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
5849  0A7F
5850  0A80
5851  0A81
5852  0A82
5853  0A83
5854  0A84
5855  0A85
5856  0A86
5857  0A87
5858  0A88
5859  0A89
5860  0A8A
5861  0A8B
5862  0A8C
5863  0A8D
5864  0A8E
5865  0A8F
5866  0A90
5867  0A91
5868  0A92
5869  0A93
5870  0A94
5871  0A95
5872  0A96
5873  0A97
5874  0A98
5875  0A99
5876  0A9A
5877  0A9B
5878  0A9C
5879  0A9D
5880  0A9E
5881  0A9F
5882  0AA0
5883  0AA1
5884  0AA2
5885  0AA3
5886  0AA4
5887  0AA5
5888  0AA6
005889  000368  var dKeyboard[1], ActiveKeyboard ;
005890  000369  // Start P2.inc
005891  000370  var oObjects[MaxTotObjects+1] ;                 // address of objects
005892  000371  var CurrentForm, oldn, ImageTouched ;
005893  000372  var TouchXpos, TouchYpos ;
005894  000373  var GObjectType, TouchState, CurInputData, pInputIndex ;
005895  000374  var comRX[40], cmd[CMDLenMAX] ;
005896  000375        
005897  000376  var InputCS, OutputCS ;
005898  000377        
005899  000378  // > ? Constant/Global/Data ? <
005900  000379        
005901  000380  func seroutCS(var op)
005902  000381      serout(op) ;
005903  000382      OutputCS ^= op ;
005904  000383  endfunc
005905  000384        
005906  000385  func nak0()
005907  000386      serout(NAK) ;
005908  000387      InputCS := 0 ;
005909  000388  endfunc
005910  000389        
005911  000390  func seroutOcs()
005912  000391      serout(OutputCS) ;
005913  000392      OutputCS := 0 ;
005914  000393  endfunc
005915  000394        
005916  000395  func SendReport(var id, var objt, var objn, var val)
005917  000396      seroutCS(id) ;
005918  000397      seroutCS(objt) ;
005919  000398      seroutCS(objn) ;
005920  000399      seroutCS(val >> 8) ; // first 8 bits
005921  000400      seroutCS(val) ;
005922  000401      seroutOcs() ;
005923  000402  endfunc
005924  000403        
005925  000404  func TMul(var p1, var p2, var p3)
005926  000405      var var32[2], var322[2] ;
005927  000406      umul_1616(var32, p1, *(CurInputData+p2)) ;
005928  000407      umul_1616(var322, var32[1], *(CurInputData+p3)) ;
005929  000408      umul_1616(var32, var32[0], *(CurInputData+p3)) ;
005930  000409      return(var32[1] + var322[0]) ;
005931  000410  endfunc
005932  000411        
005933  000412  func ReadObject(var ObjectType, var ObjectIdx)
005934  000413      var j, k, Objects ;
005935  000414      Objects := *(oObjects+ObjectType) ;
005936  000415        
005937  000416      j := 2 + ObjectIdx * 2 + Objects ;
005938  000417       if (ObjectType == tForm)
005939  000418          k := CurrentForm ;
005940  000419      else if (ObjectType == tStrings)
005941  000420          k := stringsCV[ObjectIdx];
005942  000421          else
005943  000422          k := img_GetWord(hndl, *j, IMAGE_INDEX);
005944  000423          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
005945  000424                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
005946  000425      endif
005947  000426      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
005948  000427  endfunc
005949  000428        
005950  000429        
005951  000430  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
005952  000431      var i, j, k, Objects ;
005953  000432      ObjectType &= 0x3f ;
005954  000433      if (ObjectType == tForm)
005955  000434          ActivateForm(ObjectIdx) ;
005956  000435      else
005957  000436          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
005958  000437          i := *(Objects) ;
005959  000438          switch (ObjectType)
005960  000439              case tWinButton :
005961  000440                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
005962  000441                  break ;
005963  000442              case t4Dbutton :
005964  000443                  j := InputControls[o4Dbuttons[ObjectIdx+1]] ;
005965  000444                  break ;
005966  000445              default : j := -1 ;
005967  000446          endswitch
005968  000447          if (j != -1)
005969  000448              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
005970  000449              NewVal := NewVal << 1 ;
005971  000450              if (OVF())      // button group index change
005972  000451                  if (*(j+InputData+Ofs_IPD_P1))
005973  000452                      k &= 1 ;    // mask off old group index for momentary
005974  000453                  else
005975  000454                      k &= 3 ;    // mask off old group index for toggle
005976  000455                  endif
005977  000456              else            // normal set
005978  000457                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
005979  000458                  k &= 0xfffc ;    // retain only group index for state set
005980  000459              endif
005981  000460              NewVal |= k ;
005982  000461          endif
005983  000462           if (ObjectType == tStrings)
005984  000463              PrintStrings(ObjectIdx, NewVal, 0);
005985  000464          else
005986  000465              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
005987  000466              img_Show(hndl, i) ; // will only display if form is current
005988  000467          endif
005989  000468      endif
005990  000469  endfunc
005991  000470        
005992  000471  func TurnOffButtons(var group)
005993  000472      var j, k, l;
005994  000473      for (j := 0; j < nInputs; j++)
005995  000474          k := j*IPDatasize ;
005996  000475          if (*(InputData+k+Ofs_IPD_P2) == group)
005997  000476              l := -1 ;
005998  000477               if (*(InputData+k) == t4Dbutton)
005999  000478                  l := o4Dbuttons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
006000  000479                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
006001  000480                  img_Show(hndl, l);      // only shows on current form
006002  000481              else if (*(InputData+k) == tWinButton)
006003  000482                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
006004  000483                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
006005  000484                  img_Show(hndl, l);      // only shows on current form
006006  000485              endif
006007  000486          endif
006008  000487      next
006009  000488  endfunc
006010  000489        
006011  000490        
006012  000491        
006013  000492        
006014  000493  func ActivateForm(var newform)
006015  000494      var i, j, *p ;
006016  000495        
006017  000496      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
006018  000497          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
006019  000498              if (img_GetWord(hndl, i, IMAGE_TAG))
006020  000499                  img_Disable(hndl,i) ;
006021  000500              endif
006022  000501          next
006023  000502      endif
006024  000503      CurrentForm := newform ;
006025  000504      // display newform image or clear to image color
006026  000505      if (FormBGcolors[CurrentForm] != ColorBGimage)
006027  000506          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
006028  000507          gfx_Cls() ;
006029  000508          DoGFXObjects() ;                                    // display GFX 'widgets'
006030  000509      endif
006031  000510        
006032  000511      // enable inputs
006033  000512      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
006034  000513          j := img_GetWord(hndl, i, IMAGE_TAG) ;
006035  000514          if (j)
006036  000515              j-- ;
006037  000516              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
006038  000517              //if (j != tKeyboard)
006039  000518              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
006040  000519                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
006041  000520              endif
006042  000521              img_Show(hndl,i) ; // show initialy, if required
006043  000522              if (j == tForm)
006044  000523                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
006045  000524              endif
006046  000525          endif
006047  000526      next
006048  000527      for (i := 0; i < nStrings; i++)
006049  000528          if (stringsCV[i] != -1)
006050  000529              WriteObject(tStrings, i, stringsCV[i]) ;
006051  000530          endif
006052  000531      next
006053  000532        
006054  000533  endfunc
006055  000534        
006056  000535  func UpdateObjects(var newval)
006057  000536      var IPidx, otherOBJ ;
006058  000537      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
006059  000538        
006060  000539          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
006061  000540              img_Show(hndl, *(pInputIndex));      // only shows on current form
006062  000541          if ((GObjectType == t4Dbutton) || (GObjectType == tUserButton) || (GObjectType == tWinButton))
006063  000542              if (*(CurInputData+Ofs_IPD_P1))
006064  000543                  newval &= 1;
006065  000544              else
006066  000545                  newval &= 3;
006067  000546              endif
006068  000547              if (newval > 1) newval := 1;
006069  000548          endif
006070  000549          IPidx := *(CurInputData+TouchState) ;
006071  000550          while(IPidx != 0)
006072  000551              otherOBJ := IPidx + InputData;
006073  000552              if (*(otherOBJ) == OT_REPORT)
006074  000553          SendReport(REPORT_EVENT, GObjectType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
006075  000554              else if (*(otherOBJ) == OT_MAGIC)
006076  000555                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
006077  000556                  IPidx(newval) ;
006078  000557              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
006079  000558                  if (*(otherOBJ) == OT_ACTIVATE)
006080  000559                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
006081  000560                      GObjectType := tForm ;
006082  000561                  else if (*(otherOBJ) == OT_SETCONST)
006083  000562                      newval := *(otherOBJ+Ofs_IPD_P3) ;
006084  000563                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
006085  000564                  else if (*(otherOBJ) == OT_SETANOTHER)
006086  000565                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
006087  000566                  else if (*(otherOBJ) == OT_PREVFRAME)
006088  000567                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
006089  000568                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
006090  000569                      endif
006091  000570                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
006092  000571                  else if (*(otherOBJ) == OT_NEXTFRAME)
006093  000572                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
006094  000573                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
006095  000574                      endif
006096  000575                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
006097  000576                  else if (*(otherOBJ) == OT_PREVSTRING)
006098  000577                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
006099  000578                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
006100  000579                      endif
006101  000580                  else if (*(otherOBJ) == OT_NEXTSTRING)
006102  000581                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
006103  000582                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
006104  000583                      endif
006105  000584                  endif
006106  000585              endif
006107  000586              IPidx := *(otherOBJ+TouchState) ;
006108  000587          wend
006109  000588      endif
006110  000589  endfunc
006111  000590        
006112  000591  // End P2.inc
006113  000592  func DoGFXObjects()
006114  000593      switch (CurrentForm)
006115  000594          case 4:
006116  000595              gfx_Line(0, 48, 320, 48, SLATEGRAY) ;
006117  000596              gfx_Line(0, 96, 320, 96, SLATEGRAY) ;
006118  000597              gfx_Line(0, 144, 320, 144, SLATEGRAY) ;
006119  000598              gfx_Line(0, 192, 320, 192, SLATEGRAY) ;
006120  000599          break ;
006121  000600          case 5:
006122  000601              gfx_Line(0, 48, 320, 48, SLATEGRAY) ;
006123  000602              gfx_Line(0, 96, 320, 96, SLATEGRAY) ;
006124  000603              gfx_Line(0, 144, 320, 144, SLATEGRAY) ;
006125  000604              gfx_Line(0, 192, 320, 192, SLATEGRAY) ;
006126  000605          break ;
006127  000606          case 8:
006128  000607              gfx_Line(0, 48, 320, 48, SLATEGRAY) ;
006129  000608          break ;
006130  000609      endswitch
006131  000610  endfunc
006132  000611        
006133  000612  // Start P3.inc
006134  000613  func main()
006135  000614      var comTX[50], cmdi, i, j, TouchStatus ;
006136  000615        
006137  000616      ActiveKeyboard := -1 ;
006138  000617        
006139  000618      gfx_ScreenMode(LANDSCAPE_R) ;
006140  000619        
006141  000620      putstr("Mounting...\n");
006142  000621      if (!(file_Mount()))
006143  000622          while(!(file_Mount()))
006144  000623              putstr("Drive not mounted...");
006145  000624              pause(200);
006146  000625              gfx_Cls();
006147  000626              pause(200);
006148  000627          wend
006149  000628      endif
006150  000629  //    gfx_MoveTo(0, 0);
006151  000630  //    print(mem_Heap()," ") ;
006152  000631  //    gfx_TransparentColour(0x0020);
006153  000632  //    gfx_Transparency(ON);
006154  000633        
006155  000634      // open image control
006156  000635      hndl := file_LoadImageControl("resp_box.dat", "resp_box.gci", 1);
006157  000636        
006158  000637      // init 'constants'
006159  000638  // End P3.inc
006160  000639        
006161  000640      oObjects[tDipSwitch] := oDipSwitchs ; // dummy as no object there
006162  000641      oObjects[tKnob] := oDipSwitchs ; // dummy as no object there
006163  000642      oObjects[tRockerSwitch] := oDipSwitchs ; // dummy as no object there
006164  000643      oObjects[tRotarySwitch] := oDipSwitchs ; // dummy as no object there
006165  000644      oObjects[tGSlider] := oDipSwitchs ; // dummy as no object there
006166  000645      oObjects[tTrackbar] := oTrackbars ;
006167  000646      oObjects[tWinButton] := oWinButtons ;
006168  000647      oObjects[tAngularmeter] := oDipSwitchs ; // dummy as no object there
006169  000648      oObjects[tCoolgauge] := oDipSwitchs ; // dummy as no object there
006170  000649      oObjects[tCustomdigits] := oDipSwitchs ; // dummy as no object there
006171  000650      oObjects[tForm] := oForms ;
006172  000651      oObjects[tGauge] := oDipSwitchs ; // dummy as no object there
006173  000652      oObjects[tImage] := oDipSwitchs ; // dummy as no object there
006174  000653      oObjects[tKeyboard] := oKeyboards ;
006175  000654      oObjects[tLed] := oDipSwitchs ; // dummy as no object there
006176  000655      oObjects[tLeddigits] := oDipSwitchs ; // dummy as no object there
006177  000656      oObjects[tMeter] := oDipSwitchs ; // dummy as no object there
006178  000657      oObjects[tStrings] := oStringss ;
006179  000658      oObjects[tThermometer] := oDipSwitchs ; // dummy as no object there
006180  000659      oObjects[tUserled] := oUserleds ;
006181  000660      oObjects[tVideo] := oDipSwitchs ; // dummy as no object there
006182  000661      oObjects[tStaticText] := oStaticTexts ;
006183  000662      oObjects[tSounds] := oDipSwitchs ; // dummy as no object there
006184  000663      oObjects[tTimer] := oDipSwitchs ; // dummy as no object there
006185  000664      oObjects[tSpectrum] := oDipSwitchs ; // dummy as no object there
006186  000665      oObjects[tTank] := oDipSwitchs ; // dummy as no object there
006187  000666      oObjects[tUserImages] := oDipSwitchs ; // dummy as no object there
006188  000667      oObjects[tPinOutput] := oDipSwitchs ; // dummy as no object there
006189  000668      oObjects[tPinInput] := oDipSwitchs ; // dummy as no object there
006190  000669      oObjects[t4Dbutton] := o4Dbuttons ;
006191  000670      oObjects[tAniButton] := oDipSwitchs ; // dummy as no object there
006192  000671      oObjects[tColorPicker] := oDipSwitchs ; // dummy as no object there
006193  000672      oObjects[tUserButton] := oDipSwitchs ; // dummy as no object there
006194  000673      hFonts[0] := file_LoadImageControl("resp_box.d01", "resp_box.g01", 1)  ;
006195  000674      hFonts[2] := file_LoadImageControl("resp_box.d07", "resp_box.g07", 1)  ;
006196  000675      hFonts[10] := file_LoadImageControl("resp_box.d0F", "resp_box.g0F", 1)  ;
006197  000676      hFonts[12] := FONT3 ;
006198  000677      hFonts[13] := FONT3 ;
006199  000678      hFonts[18] := FONT3 ;
006200  000679      hFonts[19] := FONT3 ;
006201  000680      hFonts[1] := hFonts[0] ;
006202  000681      hFonts[3] := hFonts[2] ;
006203  000682      hFonts[4] := hFonts[2] ;
006204  000683      hFonts[5] := hFonts[2] ;
006205  000684      hFonts[6] := hFonts[2] ;
006206  000685      hFonts[7] := hFonts[2] ;
006207  000686      hFonts[8] := hFonts[2] ;
006208  000687      hFonts[9] := hFonts[2] ;
006209  000688      hFonts[11] := hFonts[0] ;
006210  000689      hFonts[14] := hFonts[0] ;
006211  000690      hFonts[15] := hFonts[0] ;
006212  000691      hFonts[16] := hFonts[0] ;
006213  000692      hFonts[17] := hFonts[0] ;
006214  000693      dKeyboard[0] := oKeyboard0 ;
006215  000694  // Start P4.inc
006216  000695      hstrings := file_Open("resp_box.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
006217  000696      // init comms
006218  000697      com_Init(comRX,CMDLenMAX,0);
006219  000698      com_SetBaud(COM0,11520);
006220  000699      com_TXbuffer(comTX, 100, 0);
006221  000700      // tag 'real' objects
006222  000701      for (i := 0; i <= MaxTotObjects; i++)
006223  000702          if (   (i != tSounds)
006224  000703              && (i != tTimer)
006225  000704              && (i != tPinOutput)
006226  000705              && (i != tPinInput) )
006227  000706              TouchXpos := oObjects[i] ;
006228  000707              TouchYpos := *(TouchXpos) ;
006229  000708              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
006230  000709                  oldn := *(TouchXpos+ImageTouched*2) ;
006231  000710                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
006232  000711                  if (oldn != -1)
006233  000712                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
006234  000713                      img_Disable(hndl, oldn) ;
006235  000714                  endif
006236  000715              next
006237  000716          endif
006238  000717      next
006239  000718        
006240  000719      for (i := 0; i < nKeyboards; i++) // for each kb key, set tag to -1
006241  000720          if (oKeyboards[i+1] != -1)               // if keyboard exists
006242  000721              for(ImageTouched := oKeyboards[i+1]+1; ImageTouched <= oKeyboards[i+1]+*(dKeyboard[i] + Ofs_kb_Buttons); ImageTouched++)
006243  000722                  img_SetWord(hndl, ImageTouched, IMAGE_TAG, -1);
006244  000723              next
006245  000724          endif
006246  000725      next
006247  000726      // display initial form
006248  000727      CurrentForm := -1 ;
006249  000728  // End P4.inc
006250  000729  // Start P5.inc
006251  000730      ActivateForm(0) ; // need to change this according to first actual form
006252  000731        
006253  000732  // End P5.inc
006254  000733  // Start P6.inc Picaso
006255  000734      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
006256  000735      oldn := -1 ;
006257  000736      repeat
006258  000737        
006259  000738          // check comms for command, how to NAK invalid command
006260  000739          if (com_Count() != 0)
006261  000740              i := serin() ;
006262  000741              InputCS ^= i ;               // update checksum
006263  000742              if (   (cmdi > 2)
006264  000743                  && (cmd[0] == WRITE_STRU) )
006265  000744                  j := (cmdi-1) >> 1 + 2 ;
006266  000745                  if (j == CMDLenMAX)    // max length exceeded
006267  000746                      nak0() ;
006268  000747                      cmdi := -1 ;
006269  000748                  else if (cmdi & 1)
006270  000749                      cmd[j] := i ;
006271  000750                      if (cmd[2] == 0)    // if string complete
006272  000751                          if (InputCS)
006273  000752                              nak0() ;
006274  000753                          else
006275  000754                              if (cmd[0] == WRITE_STRU)
006276  000755                              cmd[j] := 0 ;                     // terminate it
006277  000756                              PrintStrings(cmd[1], &cmd[3], 1) ;
006278  000757                              serout(ACK) ;
006279  000758                              else
006280  000759                              endif
006281  000760                          endif
006282  000761                          cmdi := -1 ;
006283  000762                      endif
006284  000763                  else
006285  000764                      cmd[j] := cmd[j] << 8 + i ;
006286  000765                      cmd[2]-- ;          // dec length
006287  000766                  endif
006288  000767                  cmdi++ ;
006289  000768              else // not unicode string
006290  000769                  cmd[cmdi++] := i ;
006291  000770                   if (cmd[0] == WRITE_STR)                  // Ansi String
006292  000771                      if (cmdi == CMDLenMAX)      // max length exceeded
006293  000772                          nak0() ;
006294  000773                          cmdi := 0 ;
006295  000774                      else if (cmdi > 2)
006296  000775                          if (cmd[2] == -1)
006297  000776                              if (InputCS)
006298  000777                                  nak0() ;
006299  000778                              else
006300  000779                                  if (cmd[0] == WRITE_STR)
006301  000780                                  cmd[cmdi-1] := 0 ;                     // terminate it
006302  000781                                  PrintStrings(cmd[1], &cmd[3], 1) ;
006303  000782                                  serout(ACK) ;
006304  000783                                  else
006305  000784                                  endif
006306  000785                              endif
006307  000786                              cmdi := 0 ;
006308  000787                          else
006309  000788                              cmd[2]-- ;          // dec length
006310  000789                          endif
006311  000790                      endif
006312  000791                  else if (   (cmd[0] == READ_OBJ)
006313  000792                           && (cmdi == 4)         )
006314  000793                      if (InputCS)
006315  000794                          nak0() ;
006316  000795                      else
006317  000796                          ReadObject(cmd[1], cmd[2]) ;
006318  000797                      endif
006319  000798                      cmdi := 0 ;
006320  000799                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
006321  000800                           && (cmdi == 6)          )
006322  000801                      if (InputCS)
006323  000802                          nak0() ;
006324  000803                      else
006325  000804                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
006326  000805                          serout(ACK) ;
006327  000806                      endif
006328  000807                      cmdi := 0 ;
006329  000808                  else if (   (cmd[0] == WRITE_CONTRAST)
006330  000809                           && (cmdi == 3)         )
006331  000810                      if (InputCS)
006332  000811                          nak0() ;
006333  000812                      else
006334  000813                          gfx_Contrast(cmd[1]) ;
006335  000814                          serout(ACK) ;
006336  000815                      endif
006337  000816                      cmdi := 0 ;
006338  000817                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
006339  000818                      nak0() ;
006340  000819                      cmdi := 0 ;
006341  000820                  endif
006342  000821              endif   // not unicode string
006343  000822          endif   // a character is available
006344  000823        
006345  000824        
006346  000825      // touch code processing
006347  000826        
006348  000827          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
006349  000828          ImageTouched := img_Touched(hndl,-1) ;
006350  000829          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
006351  000830              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
006352  000831                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
006353  000832              endif
006354  000833              if (TouchStatus != TOUCH_RELEASED)        // if not released
006355  000834                  if (oldn != -1)
006356  000835                      ImageTouched := oldn ;
006357  000836                  else
006358  000837                      if (oldn != ImageTouched)
006359  000838                  oldn := ImageTouched ;
006360  000839                          TouchStatus := TOUCH_PRESSED ;
006361  000840                      endif
006362  000841                  endif
006363  000842                  TouchXpos  := touch_Get(TOUCH_GETX);
006364  000843                  TouchYpos  := touch_Get(TOUCH_GETY);
006365  000844                  TouchState := Ofs_IPD_DOWN ;
006366  000845              else
006367  000846                  ImageTouched := oldn ;                     // simulate release of what we touched
006368  000847                  oldn := -1 ;                    // prevent double release
006369  000848                  TouchState := Ofs_IPD_RELEASE ;
006370  000849              endif
006371  000850              if (ImageTouched != -1)
006372  000851                  // if touch released then find a keyboard down, if one then release it
006373  000852                  if ((TouchStatus == TOUCH_RELEASED) && (ActiveKeyboard != -1))
006374  000853                      kbUp(oKeyboards[ActiveKeyboard+1], dKeyboard[ActiveKeyboard]) ;
006375  000854                      ActiveKeyboard := -1 ;
006376  000855                  else
006377  000856                      i := 0 ;
006378  000857                      while ((i < nKeyboards) && ((ImageTouched <= oKeyboards[i+1]) || (ImageTouched > oKeyboards[i+1] + *(dKeyboard[i]+Ofs_kb_Buttons))))
006379  000858                          i++ ;
006380  000859                      wend
006381  000860                      if (i < nKeyboards)
006382  000861                          if (TouchStatus == TOUCH_PRESSED)
006383  000862                              ActiveKeyboard := i ;
006384  000863                              kbDown(oKeyboards[ActiveKeyboard+1], dKeyboard[ActiveKeyboard], kKeyboardKeystrokes[ActiveKeyboard], ImageTouched-oKeyboards[ActiveKeyboard+1]) ;
006385  000864                          endif
006386  000865                      else
006387  000866                          CurInputData := InputControls[ImageTouched] + InputData;
006388  000867                          GObjectType := *(CurInputData) ;
006389  000868                          i := GObjectType ;
006390  000869                          if (GObjectType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
006391  000870                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
006392  000871                      endif
006393  000872                  endif
006394  000873              endif
006395  000874          endif
006396  000875   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
006397  000876        
006398  000877          sys_EventsResume() ;
006399  000878      forever
006400  000879        
006401  000880  cDipswitch:
006402  000881        
006403  000882  cKnob:
006404  000883        
006405  000884  cRockerswitch:
006406  000885        
006407  000886  cRotaryswitch:
006408  000887        
006409  000888  cSlider:
006410  000889  cTrackbar:
006411  000890      if (*(CurInputData+Ofs_IPD_P1))
006412  000891          i := TouchXpos - *(CurInputData+Ofs_IPD_P2) ;
006413  000892          if (i < 0)
006414  000893              i := 0 ;
006415  000894          else if (i > *(CurInputData+Ofs_IPD_P3))        // height/width - 17)
006416  000895              i := *(CurInputData+Ofs_IPD_P4) ;           // maxvalue-minvalue
006417  000896          else
006418  000897  //            i := *(input+IPD_P4) * i / *(input+IPD_P3) ;    // max-min - (max-min) * posn / (height-17)
006419  000898              i := TMul(i, Ofs_IPD_P4, Ofs_IPD_P5) ;    // max-min - (max-min) * posn / (height-17)
006420  000899          endif
006421  000900      else
006422  000901          i := TouchYpos - *(CurInputData+Ofs_IPD_P2) ;
006423  000902          if (i < 0)
006424  000903              i := *(CurInputData+Ofs_IPD_P4) ;           // maxvalue-minvalue
006425  000904          else if (i > *(CurInputData+Ofs_IPD_P3))        // height/width - 17)
006426  000905              i := 0 ;
006427  000906          else
006428  000907  //            i := *(input+IPD_P4) - *(input+IPD_P4) * i / *(input+IPD_P3) ;    // max-min - (max-min) * posn / (height-17)
006429  000908              i := *(CurInputData+Ofs_IPD_P4) - TMul(i, Ofs_IPD_P4, Ofs_IPD_P5) ;    // max-min - (max-min) * posn / (height-17)
006430  000909          endif
006431  000910      endif
006432  000911       if (GObjectType == tTrackbar)
006433  000912          pInputIndex := oTrackbars ;
006434  000913      endif
006435  000914      pInputIndex += *(CurInputData+Ofs_IPD_OBJVIDX) ;
006436  000915      UpdateObjects(i) ;
006437  000916  endsub ;
006438  000917        
006439  000918  c4DButton:
006440  000919      pInputIndex := o4Dbuttons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
006441  000920      goto gbutton ;
006442  000921  cUserButton:
006443  000922  cWinbutton:
006444  000923      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
006445  000924  gbutton:
006446  000925      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
006447  000926      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
006448  000927          if (TouchStatus == TOUCH_RELEASED)
006449  000928              i &= 0xfffe ;
006450  000929              TouchState == Ofs_IPD_DOWN ;
006451  000930          else
006452  000931              i |= 1 ;
006453  000932              TouchState == Ofs_IPD_RELEASE ;
006454  000933          endif
006455  000934      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
006456  000935          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
006457  000936              if ((i & 3) == 3)
006458  000937                  i &= 0xfffc ;
006459  000938              else
006460  000939                  i++ ;
006461  000940              endif
006462  000941          else
006463  000942              i |= 1 ;                                      // make down regardless of current state
006464  000943          endif
006465  000944      else                        // group action, up all other buttons on touch press, reports 0 for button down
006466  000945          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
006467  000946              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
006468  000947          endif
006469  000948          i := (i & 0xfffc) | 2 ;
006470  000949      endif
006471  000950        
006472  000951      UpdateObjects(i) ;
006473  000952  endsub ;
006474  000953        
006475  000954  cAniButton:
006476  000955        
006477  000956  cColorPicker:
006478  000957        
006479  000958  endfunc
006480  000959  // End P6.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 556 file:resp_box.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 494 file:resp_box.4DGenieS)
Notice: Check that the function called via pointer  'rtn' requires 4 arguments (line 227 file:resp_box.4DGenieS)


Symbol Table:
name                             decimal         hex
_1F                                  -40  0xffffffd8 (PmmC func) args[0] r=0  (not used)
__MAXMEM                           14400  0x00003840 (const dword)  (usage 1)
__MAXPROG                          14400  0x00003840 (const dword)  (usage 1)
__PLATFORM                             1  0x00000001 (const dword)  (not used)
ABS                                  -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                        6001  0x00001771 (User func) args[1] r=0  (usage 9)
ActiveKeyboard                       110  0x0000006e (mem) word (global)  (usage 36)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                           7  0x00000007 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BACKLITE                               6  0x00000006 (const dword)  (not used)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 60)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
BUS_0                                  8  0x00000008 (const dword)  (not used)
BUS_1                                  9  0x00000009 (const dword)  (not used)
BUS_2                                 10  0x0000000a (const dword)  (not used)
BUS_3                                 11  0x0000000b (const dword)  (not used)
BUS_4                                 12  0x0000000c (const dword)  (not used)
BUS_5                                 13  0x0000000d (const dword)  (not used)
BUS_6                                 14  0x0000000e (const dword)  (not used)
BUS_7                                 15  0x0000000f (const dword)  (not used)
bus_In                               -45  0xffffffd3 (PmmC func) args[0] r=1  (not used)
bus_Out                              -46  0xffffffd2 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                             -49  0xffffffcf (PmmC func) args[0] r=1  (not used)
bus_Set                              -47  0xffffffd1 (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             5  0x00000005 (const dword)  (not used)
bus_Write                            -48  0xffffffd0 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                            -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                          -159  0xffffff61 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                           -158  0xffffff62 (PmmC func) args[1] r=1  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
CKMODE_0                               0  0x00000000 (const dword)  (not used)
CKMODE_1                               1  0x00000001 (const dword)  (not used)
CKMODE_2                               2  0x00000002 (const dword)  (not used)
CKMODE_3                               3  0x00000003 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  278  0x00000116 (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 6)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COLOUR_MODE                           27  0x0000001b (const dword)  (not used)
COLUMN_ADDRESS_END1                    5  0x00000005 (const dword)  (not used)
COLUMN_ADDRESS_END2                    4  0x00000004 (const dword)  (not used)
COLUMN_ADDRESS_START1                  3  0x00000003 (const dword)  (not used)
COLUMN_ADDRESS_START2                  2  0x00000002 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63496  0x0000f808 (const dword)  (not used)
com1_Count                          -132  0xffffff7c (PmmC func) args[0] r=1  (not used)
com1_Error                          -134  0xffffff7a (PmmC func) args[0] r=1  (not used)
com1_Full                           -133  0xffffff7b (PmmC func) args[0] r=1  (not used)
com1_Init                           -130  0xffffff7e (PmmC func) args[3] r=0  (not used)
com1_Reset                          -131  0xffffff7d (PmmC func) args[0] r=0  (not used)
com1_Sync                           -135  0xffffff79 (PmmC func) args[0] r=1  (not used)
com1_TXbuffer                       -136  0xffffff78 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -139  0xffffff75 (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -137  0xffffff77 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -138  0xffffff76 (PmmC func) args[1] r=1  (not used)
com_Count                           -122  0xffffff86 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -124  0xffffff84 (PmmC func) args[0] r=1  (not used)
com_Full                            -123  0xffffff85 (PmmC func) args[0] r=1  (not used)
com_Init                            -120  0xffffff88 (PmmC func) args[3] r=0  (usage 3)
com_Reset                           -121  0xffffff87 (PmmC func) args[0] r=0  (not used)
com_SetBaud                         -142  0xffffff72 (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -125  0xffffff83 (PmmC func) args[0] r=1  (not used)
com_TXbuffer                        -126  0xffffff82 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -129  0xffffff7f (PmmC func) args[1] r=1  (not used)
com_TXcount                         -127  0xffffff81 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -128  0xffffff80 (PmmC func) args[1] r=1  (not used)
comRX                                198  0x000000c6 (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -18  0xffffffee (PmmC func) args[1] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         194  0x000000c2 (mem) word (global)  (usage 63)
CurrentForm                          180  0x000000b4 (mem) word (global)  (usage 45)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                  -285  0xfffffee3 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
CYCLE_CONTROL_1                       58  0x0000003a (const dword)  (not used)
CYCLE_CONTROL_2                       59  0x0000003b (const dword)  (not used)
CYCLE_CONTROL_3                       60  0x0000003c (const dword)  (not used)
CYCLE_CONTROL_4                       61  0x0000003d (const dword)  (not used)
CYCLE_CONTROL_5                       62  0x0000003e (const dword)  (not used)
CYCLE_CONTROL_6                       64  0x00000040 (const dword)  (not used)
D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS    2806  0x00000af6 (const ??? 0)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (not used)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_Disconnect                     -293  0xfffffedb (PmmC func) args[0] r=0  (not used)
disp_Init                           -143  0xffffff71 (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -149  0xffffff6b (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -145  0xffffff6f (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -144  0xffffff70 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -284  0xfffffee4 (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -147  0xffffff6d (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -148  0xffffff6c (PmmC func) args[1] r=0  (not used)
DISPLAY_CONTROL_1                     38  0x00000026 (const dword)  (not used)
DISPLAY_CONTROL_10                    54  0x00000036 (const dword)  (not used)
DISPLAY_CONTROL_14                    65  0x00000041 (const dword)  (not used)
DISPLAY_CONTROL_2                     39  0x00000027 (const dword)  (not used)
DISPLAY_CONTROL_3                     40  0x00000028 (const dword)  (not used)
DISPLAY_CONTROL_4                     41  0x00000029 (const dword)  (not used)
DISPLAY_CONTROL_5                     42  0x0000002a (const dword)  (not used)
DISPLAY_CONTROL_6                     44  0x0000002c (const dword)  (not used)
DISPLAY_CONTROL_7                     45  0x0000002d (const dword)  (not used)
DISPLAY_CONTROL_8                    144  0x00000090 (const dword)  (not used)
DISPLAY_CONTROL_9                     53  0x00000035 (const dword)  (not used)
DISPLAY_MODE_CONTROL                   1  0x00000001 (const dword)  (not used)
dKeyboard                            108  0x0000006c (mem) word[1] (global)  (usage 15)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                        5169  0x00001431 (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                              -282  0xfffffee6 (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                           -283  0xfffffee5 (PmmC func) args[0] r=1  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -232  0xffffff18 (PmmC func) args[1] r=1  (not used)
file_Count                          -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -247  0xffffff09 (PmmC func) args[1] r=1  (not used)
file_Error                          -225  0xffffff1f (PmmC func) args[0] r=1  (not used)
file_Exec                           -251  0xffffff05 (PmmC func) args[2] r=1  (not used)
file_Exists                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
file_FindNext                       -229  0xffffff1b (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -242  0xffffff0e (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -246  0xffffff0a (PmmC func) args[3] r=1  (not used)
file_GetW                           -244  0xffffff0c (PmmC func) args[1] r=1  (usage 3)
file_Image                          -239  0xffffff11 (PmmC func) args[3] r=1  (not used)
file_Index                          -235  0xffffff15 (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -249  0xffffff07 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -252  0xffffff04 (PmmC func) args[3] r=1  (usage 12)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -253  0xffffff03 (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -231  0xffffff19 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -255  0xffffff01 (PmmC func) args[1] r=1  (not used)
file_PutC                           -241  0xffffff0f (PmmC func) args[2] r=1  (not used)
file_PutS                           -245  0xffffff0b (PmmC func) args[2] r=1  (not used)
file_PutW                           -243  0xffffff0d (PmmC func) args[2] r=1  (not used)
file_Read                           -233  0xffffff17 (PmmC func) args[3] r=1  (not used)
file_Rewind                         -248  0xffffff08 (PmmC func) args[1] r=1  (not used)
file_Run                            -250  0xffffff06 (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -240  0xffffff10 (PmmC func) args[5] r=1  (not used)
file_Seek                           -234  0xffffff16 (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_Size                           -238  0xffffff12 (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -236  0xffffff14 (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -254  0xffffff02 (PmmC func) args[0] r=0  (not used)
file_Write                          -237  0xffffff13 (PmmC func) args[3] r=1  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_BlockErase                    -157  0xffffff63 (PmmC func) args[1] r=1  (not used)
flash_BulkErase                     -156  0xffffff64 (PmmC func) args[0] r=0  (not used)
flash_ID                            -155  0xffffff65 (PmmC func) args[0] r=1  (not used)
flash_SIG                           -154  0xffffff66 (PmmC func) args[0] r=1  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
FONT1                                  0  0x00000000 (const dword)  (not used)
FONT2                                  1  0x00000001 (const dword)  (not used)
FONT3                                  2  0x00000002 (const dword)  (usage 12)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        2620  0x00000a3cFormBGcolors                        2620  0x00000a3c (mem) word[12] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                          68  0x00000044FormEndIndex                          68  0x00000044 (mem) word[12] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 6)
FormStartIndex                        44  0x0000002cFormStartIndex                        44  0x0000002c (mem) word[12] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
GAMMA_CONTROL_1                       70  0x00000046 (const dword)  (not used)
GAMMA_CONTROL_10                      79  0x0000004f (const dword)  (not used)
GAMMA_CONTROL_11                      80  0x00000050 (const dword)  (not used)
GAMMA_CONTROL_12                      81  0x00000051 (const dword)  (not used)
GAMMA_CONTROL_2                       71  0x00000047 (const dword)  (not used)
GAMMA_CONTROL_3                       72  0x00000048 (const dword)  (not used)
GAMMA_CONTROL_4                       73  0x00000049 (const dword)  (not used)
GAMMA_CONTROL_5                       74  0x0000004a (const dword)  (not used)
GAMMA_CONTROL_6                       75  0x0000004b (const dword)  (not used)
GAMMA_CONTROL_7                       76  0x0000004c (const dword)  (not used)
GAMMA_CONTROL_8                       77  0x0000004d (const dword)  (not used)
GAMMA_CONTROL_9                       78  0x0000004e (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
Gen4_ULCD_32PT                         0  0x00000000 (const ??? 0)  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                         -85  0xffffffab (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -104  0xffffff98 (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -103  0xffffff99 (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                         -92  0xffffffa4 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                            -74  0xffffffb6 (PmmC func) args[2] r=0  (not used)
gfx_Bullet                           -71  0xffffffb9 (PmmC func) args[1] r=0  (not used)
gfx_Button                           -80  0xffffffb0 (PmmC func) args[9] r=0  (not used)
GFX_BUTTON_BACKGROUND                 64  0x00000040 (const dword)  (not used)
GFX_BUTTON_FOREGROUND                 63  0x0000003f (const dword)  (not used)
GFX_BUTTON_MODE                       65  0x00000041 (const dword)  (not used)
gfx_ChangeColour                     -76  0xffffffb4 (PmmC func) args[2] r=0  (not used)
gfx_Circle                           -61  0xffffffc3 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                     -62  0xffffffc2 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                         -94  0xffffffa2 (PmmC func) args[1] r=0  (usage 6)
gfx_ClipWindow                       -75  0xffffffb5 (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                              -51  0xffffffcd (PmmC func) args[0] r=0  (usage 6)
gfx_ColourMode                      -102  0xffffff9a (PmmC func) args[1] r=1  (not used)
gfx_Contrast                        -100  0xffffff9c (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                              -70  0xffffffba (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                          -78  0xffffffb2 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                    -79  0xffffffb1 (PmmC func) args[5] r=0  (not used)
gfx_FrameDelay                       -97  0xffffff9f (PmmC func) args[1] r=1  (not used)
gfx_Get                              -90  0xffffffa6 (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                         -64  0xffffffc0 (PmmC func) args[2] r=1  (not used)
GFX_HILIGHT_BACKGROUND                61  0x0000003d (const dword)  (not used)
GFX_HILIGHT_FOREGROUND                62  0x0000003e (const dword)  (not used)
GFX_HILITE_LINE                       58  0x0000003a (const dword)  (not used)
gfx_Hline                            -57  0xffffffc7 (PmmC func) args[4] r=1  (not used)
gfx_IncX                             -72  0xffffffb8 (PmmC func) args[0] r=1  (not used)
gfx_IncY                             -73  0xffffffb7 (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_SELECTION                    60  0x0000003c (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
GFX_LEFT_GUTTER_WIDTH                 68  0x00000044 (const dword)  (not used)
gfx_Line                             -56  0xffffffc8 (PmmC func) args[5] r=0  (usage 27)
GFX_LINE_COUNT                        59  0x0000003b (const dword)  (not used)
gfx_LinePattern                     -101  0xffffff9b (PmmC func) args[1] r=1  (not used)
gfx_LineRel                          -55  0xffffffc9 (PmmC func) args[2] r=0  (not used)
gfx_LineTo                           -54  0xffffffca (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                          -53  0xffffffcb (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                           -52  0xffffffcc (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                     -93  0xffffffa3 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                            -67  0xffffffbd (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                        -66  0xffffffbe (PmmC func) args[2] r=0  (not used)
gfx_Origin                           -89  0xffffffa7 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                    -99  0xffffff9d (PmmC func) args[1] r=1  (not used)
gfx_Panel                            -81  0xffffffaf (PmmC func) args[6] r=0  (not used)
gfx_PenSize                          -91  0xffffffa5 (PmmC func) args[1] r=1  (not used)
GFX_PIXEL_SHIFT                       70  0x00000046 (const dword)  (not used)
gfx_Polygon                          -69  0xffffffbb (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                    -88  0xffffffa8 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                         -68  0xffffffbc (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                         -63  0xffffffc1 (PmmC func) args[3] r=0  (not used)
GFX_RECT_X1                           71  0x00000047 (const dword)  (not used)
GFX_RECT_X2                           73  0x00000049 (const dword)  (not used)
GFX_RECT_Y1                           72  0x00000048 (const dword)  (not used)
GFX_RECT_Y2                           74  0x0000004a (const dword)  (not used)
gfx_Rectangle                        -59  0xffffffc5 (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                  -60  0xffffffc4 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                         -84  0xffffffac (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
GFX_RIGHT_GUTTER_WIDTH                69  0x00000045 (const dword)  (not used)
gfx_ScreenCopyPaste                  -83  0xffffffad (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                       -98  0xffffff9e (PmmC func) args[1] r=1  (usage 3)
gfx_Selection                        -86  0xffffffaa (PmmC func) args[3] r=0  (not used)
gfx_Set                              -50  0xffffffce (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                    -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
gfx_Slider                           -82  0xffffffae (PmmC func) args[8] r=1  (not used)
GFX_STATUSBAR_HEIGHT                  67  0x00000043 (const dword)  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOOLBAR_HEIGHT                    66  0x00000042 (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                     -96  0xffffffa0 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour                -95  0xffffffa1 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                         -65  0xffffffbf (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                   -87  0xffffffa9 (PmmC func) args[7] r=0  (not used)
gfx_Vline                            -58  0xffffffc6 (PmmC func) args[4] r=1  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -105  0xffffff97 (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -106  0xffffff96 (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GObjectType                          190  0x000000be (mem) word (global)  (usage 27)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[20] (global)  (usage 102)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                              -214  0xffffff2a (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 99)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             106  0x0000006a (mem) word (global)  (usage 12)
I2C                                63520  0x0000f820 (const dword)  (not used)
I2C_Ack                             -169  0xffffff57 (PmmC func) args[0] r=0  (not used)
I2C_AckPoll                         -172  0xffffff54 (PmmC func) args[1] r=1  (not used)
I2C_AckStatus                       -171  0xffffff55 (PmmC func) args[0] r=0  (not used)
I2C_Close                           -163  0xffffff5d (PmmC func) args[0] r=0  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_Getn                            -175  0xffffff51 (PmmC func) args[2] r=1  (not used)
I2C_Gets                            -174  0xffffff52 (PmmC func) args[2] r=1  (not used)
I2C_Idle                            -173  0xffffff53 (PmmC func) args[0] r=0  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_Nack                            -170  0xffffff56 (PmmC func) args[0] r=0  (not used)
I2C_Open                            -162  0xffffff5e (PmmC func) args[1] r=0  (not used)
I2C_Putn                            -177  0xffffff4f (PmmC func) args[2] r=1  (not used)
I2C_Puts                            -176  0xffffff50 (PmmC func) args[1] r=1  (not used)
I2C_Read                            -167  0xffffff59 (PmmC func) args[0] r=1  (not used)
I2C_Restart                         -166  0xffffff5a (PmmC func) args[0] r=1  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I2C_Start                           -164  0xffffff5c (PmmC func) args[0] r=1  (not used)
I2C_Stop                            -165  0xffffff5b (PmmC func) args[0] r=1  (not used)
I2C_Write                           -168  0xffffff58 (PmmC func) args[1] r=1  (not used)
i4Dbutton0                            34  0x00000022 (const ??? 0)  (usage 3)
i4Dbutton1                            38  0x00000026 (const ??? 0)  (usage 3)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 3)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
IFONT_OFFSET                          18  0x00000012 (const dword)  (not used)
iKeyboard0                            50  0x00000032 (const ??? 0)  (usage 3)
iKeyboard0_0                          51  0x00000033 (const ??? 0)  (not used)
iKeyboard0_1                          52  0x00000034 (const ??? 0)  (not used)
iKeyboard0_10                         61  0x0000003d (const ??? 0)  (not used)
iKeyboard0_11                         62  0x0000003e (const ??? 0)  (not used)
iKeyboard0_12                         63  0x0000003f (const ??? 0)  (not used)
iKeyboard0_2                          53  0x00000035 (const ??? 0)  (not used)
iKeyboard0_3                          54  0x00000036 (const ??? 0)  (not used)
iKeyboard0_4                          55  0x00000037 (const ??? 0)  (not used)
iKeyboard0_5                          56  0x00000038 (const ??? 0)  (not used)
iKeyboard0_6                          57  0x00000039 (const ??? 0)  (not used)
iKeyboard0_7                          58  0x0000003a (const ??? 0)  (not used)
iKeyboard0_8                          59  0x0000003b (const ??? 0)  (not used)
iKeyboard0_9                          60  0x0000003c (const ??? 0)  (not used)
iKeyboard0keystrokes                   7  0x00000007iKeyboard0keystrokes                   7  0x00000007 (mem) byte[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (not used)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 45)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 12)
IMAGE_TAG2                            13  0x0000000d (const dword)  (not used)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (not used)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
ImageTouched                         184  0x000000b8 (mem) word (global)  (usage 57)
img_ClearAttributes                 -187  0xffffff45 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -181  0xffffff4b (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -180  0xffffff4c (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -179  0xffffff4d (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -184  0xffffff48 (PmmC func) args[3] r=1  (usage 36)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -182  0xffffff4a (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SetAttributes                   -186  0xffffff46 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -178  0xffffff4e (PmmC func) args[4] r=1  (not used)
img_SetWord                         -183  0xffffff49 (PmmC func) args[4] r=1  (usage 21)
img_Show                            -185  0xffffff47 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -188  0xffffff44 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
INPUT                                  1  0x00000001 (const dword)  (not used)
InputControls                         92  0x0000005cInputControls                         92  0x0000005c (mem) word[75] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 9)
InputCS                              438  0x000001b6 (mem) word (global)  (usage 21)
InputData                            242  0x000000f2InputData                            242  0x000000f2 (mem) word[825] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 30)
INVERSE                               64  0x00000040 (const dword)  (not used)
IO1_PIN                                1  0x00000001 (const dword)  (not used)
IO2_PIN                                2  0x00000002 (const dword)  (not used)
IO3_PIN                                3  0x00000003 (const dword)  (not used)
IO4_PIN                                4  0x00000004 (const dword)  (not used)
IO5_PIN                                5  0x00000005 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                             -207  0xffffff31 (PmmC func) args[1] r=1  (not used)
isalpha                             -206  0xffffff32 (PmmC func) args[1] r=1  (not used)
isdigit                             -202  0xffffff36 (PmmC func) args[1] r=1  (not used)
islower                             -205  0xffffff33 (PmmC func) args[1] r=1  (not used)
isprint                             -208  0xffffff30 (PmmC func) args[1] r=1  (not used)
isspace                             -209  0xffffff2f (PmmC func) args[1] r=1  (not used)
iStatictext0                           2  0x00000002 (const ??? 0)  (usage 3)
iStatictext1                           4  0x00000004 (const ??? 0)  (usage 3)
iStatictext10                         35  0x00000023 (const ??? 0)  (usage 3)
iStatictext11                         36  0x00000024 (const ??? 0)  (usage 3)
iStatictext12                         37  0x00000025 (const ??? 0)  (usage 3)
iStatictext13                         46  0x0000002e (const ??? 0)  (usage 3)
iStatictext14                         47  0x0000002f (const ??? 0)  (usage 3)
iStatictext15                         48  0x00000030 (const ??? 0)  (usage 3)
iStatictext16                         49  0x00000031 (const ??? 0)  (usage 3)
iStatictext17                         72  0x00000048 (const ??? 0)  (usage 3)
iStatictext18                         73  0x00000049 (const ??? 0)  (usage 3)
iStatictext19                         14  0x0000000e (const ??? 0)  (usage 3)
iStatictext2                           5  0x00000005 (const ??? 0)  (usage 3)
iStatictext20                         15  0x0000000f (const ??? 0)  (usage 3)
iStatictext21                         17  0x00000011 (const ??? 0)  (usage 3)
iStatictext22                         75  0x0000004b (const ??? 0)  (usage 3)
iStatictext3                           6  0x00000006 (const ??? 0)  (usage 3)
iStatictext4                          13  0x0000000d (const ??? 0)  (usage 3)
iStatictext5                          24  0x00000018 (const ??? 0)  (usage 3)
iStatictext6                          25  0x00000019 (const ??? 0)  (usage 3)
iStatictext7                          26  0x0000001a (const ??? 0)  (usage 3)
iStatictext8                          27  0x0000001b (const ??? 0)  (usage 3)
iStatictext9                          33  0x00000021 (const ??? 0)  (usage 3)
iStrings0                           1892  0x00000764iStrings0                           1892  0x00000764 (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
iStrings1                           1918  0x0000077eiStrings1                           1918  0x0000077e (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
iStrings10                          2152  0x00000868iStrings10                          2152  0x00000868 (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
iStrings11                          2178  0x00000882iStrings11                          2178  0x00000882 (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
iStrings12                          2204  0x0000089ciStrings12                          2204  0x0000089c (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
iStrings13                          2230  0x000008b6iStrings13                          2230  0x000008b6 (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
iStrings14                          2256  0x000008d0iStrings14                          2256  0x000008d0 (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
iStrings15                          2282  0x000008eaiStrings15                          2282  0x000008ea (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
iStrings16                          2308  0x00000904iStrings16                          2308  0x00000904 (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
iStrings17                          2334  0x0000091eiStrings17                          2334  0x0000091e (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
iStrings18                          2360  0x00000938iStrings18                          2360  0x00000938 (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
iStrings19                          2386  0x00000952iStrings19                          2386  0x00000952 (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
iStrings2                           1944  0x00000798iStrings2                           1944  0x00000798 (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
iStrings3                           1970  0x000007b2iStrings3                           1970  0x000007b2 (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
iStrings4                           1996  0x000007cciStrings4                           1996  0x000007cc (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
iStrings5                           2022  0x000007e6iStrings5                           2022  0x000007e6 (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
iStrings6                           2048  0x00000800iStrings6                           2048  0x00000800 (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
iStrings7                           2074  0x0000081aiStrings7                           2074  0x0000081a (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
iStrings8                           2100  0x00000834iStrings8                           2100  0x00000834 (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
iStrings9                           2126  0x0000084eiStrings9                           2126  0x0000084e (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
isupper                             -204  0xffffff34 (PmmC func) args[1] r=1  (not used)
iswhite                             -210  0xffffff2e (PmmC func) args[1] r=1  (not used)
isxdigit                            -203  0xffffff35 (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -198  0xffffff3a (PmmC func) args[1] r=0  (not used)
iTrackbar0                            69  0x00000045 (const ??? 0)  (usage 3)
iUserled0                             23  0x00000017 (const ??? 0)  (usage 3)
iUserled1                             16  0x00000010 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                            0  0x00000000 (const ??? 0)  (usage 3)
iWinbutton1                            1  0x00000001 (const ??? 0)  (usage 3)
iWinbutton10                          19  0x00000013 (const ??? 0)  (usage 3)
iWinbutton11                          20  0x00000014 (const ??? 0)  (usage 3)
iWinbutton12                          21  0x00000015 (const ??? 0)  (usage 3)
iWinbutton13                          22  0x00000016 (const ??? 0)  (usage 3)
iWinbutton14                          28  0x0000001c (const ??? 0)  (usage 3)
iWinbutton15                          29  0x0000001d (const ??? 0)  (usage 3)
iWinbutton16                          30  0x0000001e (const ??? 0)  (usage 3)
iWinbutton17                          31  0x0000001f (const ??? 0)  (usage 3)
iWinbutton18                          32  0x00000020 (const ??? 0)  (usage 3)
iWinbutton19                          39  0x00000027 (const ??? 0)  (usage 3)
iWinbutton2                            3  0x00000003 (const ??? 0)  (usage 3)
iWinbutton20                          40  0x00000028 (const ??? 0)  (usage 3)
iWinbutton21                          41  0x00000029 (const ??? 0)  (usage 3)
iWinbutton22                          42  0x0000002a (const ??? 0)  (usage 3)
iWinbutton23                          43  0x0000002b (const ??? 0)  (usage 3)
iWinbutton24                          44  0x0000002c (const ??? 0)  (usage 3)
iWinbutton25                          45  0x0000002d (const ??? 0)  (usage 3)
iWinbutton26                          64  0x00000040 (const ??? 0)  (usage 3)
iWinbutton27                          65  0x00000041 (const ??? 0)  (usage 3)
iWinbutton28                          66  0x00000042 (const ??? 0)  (usage 3)
iWinbutton29                          70  0x00000046 (const ??? 0)  (usage 3)
iWinbutton3                            7  0x00000007 (const ??? 0)  (usage 3)
iWinbutton30                          71  0x00000047 (const ??? 0)  (usage 3)
iWinbutton31                          68  0x00000044 (const ??? 0)  (usage 3)
iWinbutton32                          67  0x00000043 (const ??? 0)  (usage 3)
iWinbutton33                          74  0x0000004a (const ??? 0)  (usage 3)
iWinbutton4                            8  0x00000008 (const ??? 0)  (usage 3)
iWinbutton5                            9  0x00000009 (const ??? 0)  (usage 3)
iWinbutton6                           10  0x0000000a (const ??? 0)  (usage 3)
iWinbutton7                           11  0x0000000b (const ??? 0)  (usage 3)
iWinbutton8                           12  0x0000000c (const ??? 0)  (usage 3)
iWinbutton9                           18  0x00000012 (const ??? 0)  (usage 3)
KbCapsBit                              2  0x00000002 (const dword)  (usage 12)
KbCtrlBit                              4  0x00000004 (const dword)  (usage 21)
kbDown                              7291  0x00001c7b (User func) args[4] r=0  (usage 3)
KbShiftBit                             1  0x00000001 (const dword)  (usage 18)
KbShiftCapsBits                        3  0x00000003 (const dword)  (usage 18)
kbUp                                7124  0x00001bd4 (User func) args[2] r=0  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 2644  0x00000a54kKeyboardKeystrokes                 2644  0x00000a54 (mem) word[1] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
LANDSCAPE                              0  0x00000000 (const dword)  (not used)
LANDSCAPE_R                            1  0x00000001 (const dword)  (usage 3)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                              -213  0xffffff2b (PmmC func) args[1] r=1  (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                                2898  0x00000b52 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -15  0xfffffff1 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
MEDIA_ADDRESS_MW                      92  0x0000005c (const dword)  (not used)
MEDIA_ADDRESS_UW                      93  0x0000005d (const dword)  (not used)
media_Flush                         -118  0xffffff8a (PmmC func) args[0] r=1  (not used)
media_Image                         -117  0xffffff8b (PmmC func) args[2] r=0  (not used)
media_Init                          -119  0xffffff89 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -111  0xffffff91 (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -113  0xffffff8f (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -114  0xffffff8e (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                      124  0x0000007c (const dword)  (not used)
MEDIA_SECTOR_LO                      123  0x0000007b (const dword)  (not used)
media_SetAdd                        -109  0xffffff93 (PmmC func) args[2] r=0  (not used)
media_SetSector                     -110  0xffffff92 (PmmC func) args[2] r=0  (not used)
media_Video                         -107  0xffffff95 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -108  0xffffff94 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -115  0xffffff8d (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
media_WrSector                      -112  0xffffff90 (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -217  0xffffff27 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -218  0xffffff26 (PmmC func) args[1] r=1  (not used)
mem_Compare                         -224  0xffffff20 (PmmC func) args[3] r=1  (not used)
mem_Copy                            -223  0xffffff21 (PmmC func) args[3] r=1  (not used)
mem_Free                            -220  0xffffff24 (PmmC func) args[1] r=1  (not used)
mem_Heap                            -221  0xffffff23 (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -219  0xffffff25 (PmmC func) args[2] r=1  (not used)
mem_Set                             -222  0xffffff22 (PmmC func) args[3] r=1  (not used)
MEMORY_ACCESS_CONTROL                 22  0x00000016 (const dword)  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -14  0xfffffff2 (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                                7091  0x00001bb3 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                               75  0x0000004b (const dword)  (usage 3)
nKeyboards                             1  0x00000001 (const dword)  (usage 9)
nObjects                              76  0x0000004c (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
nStrings                              20  0x00000014 (const dword)  (usage 3)
o4Dbuttons                          2614  0x00000a36o4Dbuttons                          2614  0x00000a36 (mem) word[3] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 12)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oDipSwitchs                         2412  0x0000096coDipSwitchs                         2412  0x0000096c (mem) word[1] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 75)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              2488  0x000009b8oForms                              2488  0x000009b8 (mem) word[13] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (not used)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (not used)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (not used)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (not used)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (not used)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 18)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 18)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 54)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 15)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 18)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 15)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_kb_Buttons                        10  0x0000000a (const ??? 0)  (usage 12)
Ofs_kb_Caps                            4  0x00000004 (const ??? 0)  (usage 12)
Ofs_kb_Ctrl1                           7  0x00000007 (const ??? 0)  (usage 12)
Ofs_kb_Ctrl2                           8  0x00000008 (const ??? 0)  (usage 12)
Ofs_kb_Down                            0  0x00000000 (const ??? 0)  (usage 9)
Ofs_kb_Ign                             3  0x00000003 (const ??? 0)  (usage 18)
Ofs_kb_Lock                            9  0x00000009 (const ??? 0)  (usage 6)
Ofs_kb_Mvt                             1  0x00000001 (const ??? 0)  (usage 18)
Ofs_kb_Shift1                          5  0x00000005 (const ??? 0)  (usage 6)
Ofs_kb_Shift2                          6  0x00000006 (const ??? 0)  (usage 6)
Ofs_kb_ShiftCaps                      11  0x0000000b (const ??? 0)  (usage 3)
Ofs_kb_State                           2  0x00000002 (const ??? 0)  (usage 63)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oKeyboard0                            42  0x0000002a (mem) word[12] (global)  (usage 3)
oKeyboards                          2514  0x000009d2oKeyboards                          2514  0x000009d2 (mem) word[2] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 27)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oldn                                 182  0x000000b6 (mem) word (global)  (usage 42)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             112  0x00000070 (mem) word[34] (global)  (usage 108)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
OSC_CONTROL_1                         25  0x00000019 (const dword)  (not used)
OSC_CONTROL_3                        147  0x00000093 (const dword)  (not used)
oStaticTexts                        2566  0x00000a06oStaticTexts                        2566  0x00000a06 (mem) word[24] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
oStringss                           2518  0x000009d6oStringss                           2518  0x000009d6 (mem) word[21] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 3)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 117)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTrackbars                          2414  0x0000096eoTrackbars                          2414  0x0000096e (mem) word[2] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 6)
oUserleds                           2560  0x00000a00oUserleds                           2560  0x00000a00 (mem) word[3] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OUTPUT                                 0  0x00000000 (const dword)  (not used)
OutputCS                             440  0x000001b8 (mem) word (global)  (usage 9)
OVF                                  -21  0xffffffeb (PmmC func) args[0] r=1  (usage 3)
oWinButtons                         2418  0x00000972oWinButtons                         2418  0x00000972 (mem) word[35] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 12)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PICASO                                 1  0x00000001 (const dword)  (usage 3)
PICASO_FUNCTIONS                       0  0x00000000 (const ??? 0)  (not used)
pin_HI                               -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
pin_LO                               -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
pin_Read                             -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
pin_Set                              -41  0xffffffd7 (PmmC func) args[2] r=1  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          196  0x000000c4 (mem) word (global)  (usage 24)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -12  0xfffffff4 (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
POWER_CONTROL_1                       27  0x0000001b (const dword)  (not used)
POWER_CONTROL_2                       28  0x0000001c (const dword)  (not used)
POWER_CONTROL_3                       29  0x0000001d (const dword)  (not used)
POWER_CONTROL_4                       30  0x0000001e (const dword)  (not used)
POWER_CONTROL_5                       31  0x0000001f (const dword)  (not used)
POWER_CONTROL_6                       32  0x00000020 (const dword)  (not used)
PrintStrings                        8014  0x00001f4e (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
RAND                                 -19  0xffffffed (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
READ_WRITE_DATA                       34  0x00000022 (const dword)  (not used)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                          6824  0x00001aa8 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
refreshstate                        7812  0x00001e84 (User func) args[2] r=0  (usage 9)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 6)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
reserved                            -294  0xfffffeda (PmmC func) args[0] r=0  (not used)
RGBINT_CONTROL_1                      56  0x00000038 (const dword)  (not used)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   2646  0x00000a56rKeyboardRoutines                   2646  0x00000a56 (mem) word[1] (member of D:\munka\MTA\projects\MTA_response_box\LCD\resp_box.4DWork\resp_box.4DGenieS)  (usage 1)
rKeyboardRoutines                 UNRESOLVED  (usage 2)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROW_ADDRESS_END1                       9  0x00000009 (const dword)  (not used)
ROW_ADDRESS_END2                       8  0x00000008 (const dword)  (not used)
ROW_ADDRESS_START1                     7  0x00000007 (const dword)  (not used)
ROW_ADDRESS_START2                     6  0x00000006 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (usage 3)
RXMODE_0                               0  0x00000000 (const dword)  (not used)
RXMODE_1                               1  0x00000001 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -20  0xffffffec (PmmC func) args[1] r=0  (not used)
SELECT                                 3  0x00000003 (const dword)  (not used)
SELECT_MULTIPLE                        4  0x00000004 (const dword)  (not used)
SendReport                          7026  0x00001b72 (User func) args[4] r=0  (usage 9)
serin                                 -1  0xffffffff (PmmC func) args[0] r=1  (usage 3)
serin1                              -140  0xffffff74 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                                -3  0xfffffffd (PmmC func) args[1] r=0  (usage 21)
serout1                             -141  0xffffff73 (PmmC func) args[1] r=0  (not used)
seroutCS                            7106  0x00001bc2 (User func) args[1] r=0  (usage 15)
seroutOcs                           7076  0x00001ba4 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                               -4  0xfffffffc (PmmC func) args[1] r=0  (not used)
setkeystate                         7266  0x00001c62 (User func) args[2] r=0  (usage 33)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -17  0xffffffef (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (usage 27)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -258  0xfffffefe (PmmC func) args[1] r=0  (not used)
snd_Continue                        -261  0xfffffefb (PmmC func) args[0] r=0  (not used)
snd_Pause                           -260  0xfffffefc (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -257  0xfffffeff (PmmC func) args[1] r=1  (not used)
snd_Playing                         -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
snd_Stop                            -259  0xfffffefd (PmmC func) args[0] r=0  (not used)
snd_Volume                          -256  0xffffff00 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
spi_Disable                         -153  0xffffff67 (PmmC func) args[0] r=0  (not used)
SPI_FAST                               0  0x00000000 (const dword)  (not used)
spi_Init                            -150  0xffffff6a (PmmC func) args[3] r=0  (not used)
SPI_MED                                1  0x00000001 (const dword)  (not used)
spi_Read                            -151  0xffffff69 (PmmC func) args[0] r=1  (not used)
SPI_SLOW                               2  0x00000002 (const dword)  (not used)
spi_Write                           -152  0xffffff68 (PmmC func) args[1] r=0  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -22  0xffffffea (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
str_Cat                             -278  0xfffffeea (PmmC func) args[2] r=1  (not used)
str_CatN                            -279  0xfffffee9 (PmmC func) args[3] r=1  (not used)
str_Copy                            -287  0xfffffee1 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -288  0xfffffee0 (PmmC func) args[3] r=1  (not used)
str_Find                            -274  0xfffffeee (PmmC func) args[2] r=1  (not used)
str_FindI                           -275  0xfffffeed (PmmC func) args[2] r=1  (not used)
str_GetByte                         -268  0xfffffef4 (PmmC func) args[1] r=1  (not used)
str_GetC                            -267  0xfffffef5 (PmmC func) args[2] r=1  (not used)
str_GetD                            -264  0xfffffef8 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -266  0xfffffef6 (PmmC func) args[2] r=1  (not used)
str_GetW                            -265  0xfffffef7 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -269  0xfffffef3 (PmmC func) args[1] r=1  (not used)
str_Length                          -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
str_Match                           -272  0xfffffef0 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -273  0xfffffeef (PmmC func) args[2] r=1  (not used)
str_Printf                          -277  0xfffffeeb (PmmC func) args[2] r=1  (not used)
str_Ptr                             -263  0xfffffef9 (PmmC func) args[1] r=1  (not used)
str_PutByte                         -270  0xfffffef2 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -271  0xfffffef1 (PmmC func) args[2] r=0  (not used)
strheight                           -161  0xffffff5f (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                          12  0x0000000c (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                         0  0x00000000 (const dword)  (usage 3)
Strings10Count                         7  0x00000007 (const dword)  (not used)
Strings10Size                         39  0x00000027 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings11Count                         0  0x00000000 (const dword)  (not used)
Strings11Size                          1  0x00000001 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                        138  0x0000008a (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                         15  0x0000000f (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         12  0x0000000c (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     2048  0x00000800 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                         12  0x0000000c (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                     2560  0x00000a00 (const dword)  (usage 3)
Strings16Count                         1  0x00000001 (const dword)  (not used)
Strings16Size                         12  0x0000000c (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     1024  0x00000400 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                         12  0x0000000c (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                     1536  0x00000600 (const dword)  (usage 3)
Strings18Count                         3  0x00000003 (const dword)  (not used)
Strings18Size                        103  0x00000067 (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                         34  0x00000022 (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings1Count                          1  0x00000001 (const dword)  (not used)
Strings1Size                          12  0x0000000c (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                       512  0x00000200 (const dword)  (usage 3)
Strings2Count                          2  0x00000002 (const dword)  (not used)
Strings2Size                           4  0x00000004 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      3072  0x00000c00 (const dword)  (usage 3)
Strings3Count                          2  0x00000002 (const dword)  (not used)
Strings3Size                           4  0x00000004 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                      3584  0x00000e00 (const dword)  (usage 3)
Strings4Count                          0  0x00000000 (const dword)  (not used)
Strings4Size                           1  0x00000001 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      4096  0x00001000 (const dword)  (usage 3)
Strings5Count                          0  0x00000000 (const dword)  (not used)
Strings5Size                           1  0x00000001 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                      4608  0x00001200 (const dword)  (usage 3)
Strings6Count                          0  0x00000000 (const dword)  (not used)
Strings6Size                           1  0x00000001 (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      5120  0x00001400 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      5632  0x00001600 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                      6144  0x00001800 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      6656  0x00001a00 (const dword)  (usage 3)
stringsCV                             66  0x00000042 (mem) word[20] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                            -160  0xffffff60 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -295  0xfffffed9 (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -194  0xffffff3e (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -195  0xffffff3d (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -196  0xffffff3c (PmmC func) args[0] r=0  (usage 3)
sys_GetTimer                        -192  0xffffff40 (PmmC func) args[1] r=1  (not used)
sys_SetTimer                        -191  0xffffff41 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -193  0xffffff3f (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -280  0xfffffee8 (PmmC func) args[0] r=1  (not used)
sys_T                               -189  0xffffff43 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -190  0xffffff42 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 27)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 3)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 6)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 3)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
TMul                                6972  0x00001b3c (User func) args[3] r=0  (usage 6)
to                                    -5  0xfffffffb (PmmC func) args[1] r=1  (not used)
tolower                             -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -199  0xffffff39 (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -201  0xffffff37 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 12)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 21)
touch_Set                           -200  0xffffff38 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           192  0x000000c0 (mem) word (global)  (usage 24)
TouchXpos                            186  0x000000ba (mem) word (global)  (usage 15)
TouchYpos                            188  0x000000bc (mem) word (global)  (usage 12)
toupper                             -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
translate                             -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 9)
TurnOffButtons                      6322  0x000018b2 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 9)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 120)
txt_Attributes                       -38  0xffffffda (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -34  0xffffffde (PmmC func) args[1] r=1  (not used)
txt_Delay                            -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -25  0xffffffe7 (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontID                           -27  0xffffffe5 (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
txt_Italic                           -35  0xffffffdd (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -23  0xffffffe9 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -33  0xffffffdf (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -24  0xffffffe8 (PmmC func) args[2] r=0  (not used)
txt_Underline                        -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
txt_Width                            -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -31  0xffffffe1 (PmmC func) args[1] r=1  (not used)
uadd_3232                           -290  0xfffffede (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                           -292  0xfffffedc (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
umul_1616                           -289  0xfffffedf (PmmC func) args[3] r=1  (usage 12)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                        -281  0xfffffee7 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                       5370  0x000014fa (User func) args[1] r=0  (usage 6)
USER_INITIALIZED_DISPLAY              32  0x00000020 (const dword)  (not used)
usub_3232                           -291  0xfffffedd (PmmC func) args[3] r=1  (not used)
VCOM_CONTROL_1                        67  0x00000043 (const dword)  (not used)
VCOM_CONTROL_2                        68  0x00000044 (const dword)  (not used)
VCOM_CONTROL_3                        69  0x00000045 (const dword)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 60)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                         6508  0x0000196c (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
